issue_id,title,contents,authorLogin,authorAssociation,createdAt,closedAt,closed,comments_count,milestone,participants_count,Label_category-api,Label_category-docs,Label_category-release,Label_category-tests,Label_component-assert,Label_component-cli,Label_component-core,Label_component-diff,Label_component-dump,Label_component-reporter,Label_good for new contributors,Label_help wanted,Label_meta,Label_meta-ready,Label_status-declined,Label_status-stalled,Label_type-enhancement,Label_type-problem,Label_type-support
1,noglobals GET parameter ignored,"QUnit.init overrides the config var, resetting the noglobals config to false. Since the noglobals get parameter is read before QUnit.init, the noglobals parameter is ignored.",kassens,CONTRIBUTOR,2009-10-02T14:16:41Z,2009-11-05T13:16:45Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
2,Test Suite URL Params need their own query string,"If you use qunit with testswarm it fails to run tests because testswarm adds url params to the tests. So instead of just looking for /test?this is a test, it should be something like /test?t=this is a test",RyanS,CONTRIBUTOR,2009-10-12T14:41:46Z,2009-11-05T13:09:47Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
3,module name is not shown,"When modules are defined, their names do not appear (for me) next to the test names in the output.
The config object is defined on line 353, and config is assigned to in QUnit.init. config.currentModule is set in the module function and accessed in the test function. It looks like a different config object is being referenced in each of the different functions.",smith,NONE,2009-10-25T03:48:40Z,2009-11-05T13:08:48Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
4,The assesrtions inside an QUnit.asyncTest are not evaluated asynchronously,"Hi!
As far as I can understand from the code*, the assertions are always evaluated at the parsing time even if the test is asynchronous. One would expect them to be evaluated at the time QUnit.start() is called.

http://github.com/jquery/qunit/blob/master/qunit/qunit.js#L261
http://github.com/jquery/qunit/blob/master/qunit/qunit.js#L279
http://github.com/jquery/qunit/blob/master/qunit/qunit.js#L283",gurdiga,NONE,2009-11-05T13:43:37Z,2009-11-15T04:05:09Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
5,qunit throws syntax error on Safari 2.0.4,"It is not possible to use qunit to run tests in the Safari 2.0.4 browser, which is still a Level 2 browser here at the BBC. This is because qunit uses a function declaration pattern that Safari 2.0.4 considers to be a ""syntax error.""
// snip
test: function test (testName, callback) { // throws error
}

Rewriting those function declarations to be like the following example will allow qunit to run in Safari 2.0.4.
//snip
test: function (testName, callback) { // runs
}",micmath,NONE,2009-11-13T16:37:04Z,2009-11-15T04:27:56Z,True,6.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
6,"Add ""start"" callback","The browser automation integration callbacks are asymmetric. There's testStart/testDone, moduleStart/moduleDone, but no counterpart for ""done"". It would make sense to have a start callback for the testsuite in total.",runeh,CONTRIBUTOR,2009-12-21T21:38:33Z,2010-07-26T16:12:38Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
7,Modify location.search instead of location.href on test double-click,Double-clicking a test when the URL has a hash doesn't work as the ?testName is put after the hash. Modifying location.search instead would put it before the hash.,eligrey,NONE,2009-12-22T03:17:52Z,2010-07-26T16:17:16Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
8,Failed tests expanded on load,"For the UI - how do people feel about having tests that have failing items initially set to expanded?  I find when I'm writing tests and code, I'm regularly refreshing content as I tweak items, and would like to not have to click into each failed item.  Was going to add this, but didn't want to without a bit of concensus first - could potentially add a checkbox to toggle the preference?",phae,NONE,2010-01-04T16:24:18Z,2010-07-26T16:21:14Z,True,3.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
9,Should have an assertion for locating an item in a list,"I've found this to be very useful in my work, so I thought I'd share it with you guys.  Sometimes you need to check if a particular item shows up in a list.  This is implemented using underscore.js.  You guys can probably remove that dependency easily enough though.
qunit.js:296
contains: function(a, b, message) {
push( _.any(a, function(x){ return QUnit.equiv(x, b) }), a, b, message);
},
Unfortunately, this prints [object Object] in the test's summary.  Can this be fixed?",nickretallack,NONE,2010-01-31T09:04:46Z,2010-07-26T16:23:07Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
10,Show diff if equal() or deepEqual() failed,"Quickly, can you figure out what's wrong here? I don't.",NV,CONTRIBUTOR,2010-02-09T18:26:16Z,2010-07-26T17:02:50Z,True,5.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
11,Remove `init` function from a global namespace,"QUnit puts a lot of functions to the global namespace. Most of them (ok, equal, module, is) are OK. But init really bugs me. Can we remove it from the global namespace?",NV,CONTRIBUTOR,2010-02-13T22:00:22Z,2010-07-26T17:09:45Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
12,"""raises"" assertion","It would be useful for QUnit to provide an assertion to test for the occurrence of exceptions.
original ticket
patch",FND,NONE,2010-02-25T10:10:45Z,2010-07-26T17:44:12Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
13,An element's child nodes will be gone under certain circumstances in IE (at least 7 & 8),"Consider a test page with a main section as follows:
<div id=""main"">
    <ul>
        <li>yadda</li>
    </ul>
</div>

And a test script as follows:
jQuery(function($) {
    var $elem = $('#main > ul');
    console.log($elem.children().length);
    module('blub');
    test('yadda', function() {
        console.log($elem.children().length);
});
});

One would expect that this prints two times 1 to the console, which it does in Firefox and Chrome. In Internet Explorer (I've tested 7 & 8) it will print 1 and then 0 though, indicating that the element has somehow been emptied somewhere during starting up test yadda. If I reinforce $elem by putting $elem = $('#main > ul'); in a module setup function, the problem miraculously disappears.",timmolendijk,NONE,2010-03-11T23:54:30Z,2010-07-18T18:39:22Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
14,misuse of stop()/start() breaks test independence,"Accidentally calling start() twice in an asynchronous test can cause the subsequent test to fail nondeterministically. In the code sample below, the first test will always succeed, but the second will sometimes fail because the expected assertion was not run. Obviously, the short answer is that I shouldn't call start() twice, but the fact that one test can break another is still unpleasant. Would it be possible to limit the scope of start() and stop() so they don't leak from one test to another?

asyncTest(""Test1"", function() {
    expect(2);
    setTimeout(function() {
        ok(true, 'Test1 assertion 1');
        start();
    }, 10);
    setTimeout(function() {
        ok(true, 'Test1 assertion 2');
        start();
    }, 10);
});
asyncTest(""Test2"", function() {
expect(1);
setTimeout(function() {
ok(true, 'Test2 assertion');
start();
}, 10);
});",csosborn,NONE,2010-03-21T00:20:24Z,2010-07-19T16:12:27Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
15,dog-fooding qunit,"I would like for all the private functions to be made public (ex. done(), validTest(), process(), etc.). This would make it an easier chore to start using jquery to unit test the display portion of qunit. Right now the code mixes presentation with testing-logic.",gutzofter,NONE,2010-03-23T04:36:42Z,2010-07-27T00:32:52Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
16,start configuration,when the page initially displays it has the 'Hide passed tests' check-box unchecked. It would be more in-line with TDD to have it checked initially. How the hell did this get closed.,gutzofter,NONE,2010-03-23T04:40:20Z,2010-03-23T04:40:48Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
17,qunit.js raises 1 JS error and 2 JS warnings in Eclipse,"Hello,
Ity is a minot thing but today I found that:
COMPLAINS THAT ""Syntax Error on token Undefined""
    parsers:{
        window: '[Window]',
        document: '[Document]',
        error:'[ERROR]', //when no parser is found, shouldn't happen
        unknown: '[Unknown]',
        'null':'null',
        undefined:'undefined',                                 COMPLAINS THAT ""Syntax Error on token Undefined""
        'function':function( fn ) {

Also warnging for missing "";"" at:
number:literal,
'boolean':literal
},
DOMAttrs:{//attributes to dump from nodes, name=>realName
id:'id',
name:'name',
'class':'className'
},
HTML:false,//if true, entities are escaped ( <, >, \t, space and \n )
indentChar:'   ',//indentation unit
multiline:false //if true, items in a collection, are separated by a \n, else just a space.
};
Also
""// Load paramaters"" should be ""//Load parameters""
""    * Prefered to ok( actual == expected, message )"" should be
""    * Preffered to ok( actual == expected, message )""",gaddlord,NONE,2010-05-17T09:08:36Z,2010-07-27T00:33:46Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
18,"add ""notequals"" assertion",It would be nice if we could test for inequality.,gminuses,NONE,2010-05-19T03:51:42Z,2010-05-19T07:29:32Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
19,QUnit.reset() removes global jQuery ajax event handlers,"While testing my global ajax event support library, found the following problem.
Global jQuery ajax event handlers will be ""unbound"" after the firs test() has completed.
I do something like this in my library:
jQuery(document).ajaxStart(function() { /* do something */ })
This seems to be the cause of the problem in qunit.js reset() :
jQuery.event.global = {};",salomvary,NONE,2010-06-01T08:28:50Z,2010-07-27T09:29:58Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
20,Async setup and teardown,"Guys,
I've had to run some async code on my setup and teardown methods but QUnit wasn't handling it properly.
Here's a simple patch to make it run and the corresponding test cases:
http://github.com/fgrehm/qunit/compare/2dbf6037778266fa01a1...master",fgrehm,CONTRIBUTOR,2010-06-14T17:15:46Z,2010-07-15T16:07:23Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
21,not*Equal should show both args in success case (and possibly one in fail case),"E.g. strictEqual gives both args, if the comparison fails. But f there is a notStrictEqual comparison, it would be interesting to know both arg vals in the success case, since they differ then (in opposite to strictEqual). In the fail case one arg would be sufficient for nonStrictEqual (similar to strictEqual in the success case): but then there are two same values...
In this sense the not*Equal comparison variants are complement to their opposite - without 'not' at the beginning - ones.",hartrock,NONE,2010-07-14T23:18:29Z,2010-07-15T22:48:09Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
22,Output long expected/actual values with fixed-width font and next to each other,"A full diff library would be overkill, but the current output could be improved to make it more readable and easier to see differences.",jzaefferer,MEMBER,2010-07-19T16:10:18Z,2010-07-20T04:03:14Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
23,Double-clicking test title shows all tests for a given module (change seems in rev 138),"I think this is a regression error, as before double clicking a test title would only display that test (provided the title string was unique). Now double clicking on a test title shows all the tests for that module.
Reduced test case here (http://dl.dropbox.com/u/232025/reduction.html), drop in to qunit src directory.
Thanks Jörn!",andybeeching,NONE,2010-07-20T09:40:18Z,2010-07-26T17:51:01Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
24,BlackBerry 5.0 and stop(),"In unit testing jQuery hashchange event in BlackBerry 4.6.1 and 5.0, I found that the tests would only run all the way through in 5.0 if I called QUnit.stop() explicitly instead of just stop().
I only mention this in case jQuery mobile will be tested in BlackBerry 5.0 with QUnit. See the commit if you're curious.",cowboy,NONE,2010-07-20T19:45:39Z,2010-07-29T07:24:59Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
25,Output is broken,http://elv1s.ru/x/qunit/equals.html,NV,CONTRIBUTOR,2010-07-21T21:44:48Z,2010-07-22T12:17:10Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
26,optimize css selectors,"definitely something minor but the css selectors can be made more efficient and readable
ol#qunit-tests li li.fail span.test-actual =
#qunit-tests .fail .test-actual",leeoniya,CONTRIBUTOR,2010-07-22T15:05:23Z,2010-07-29T13:24:09Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
27,Array equality fails,"The following assertion fails, and shouldn't.  :)
equals([""a""], [""a""], ""arrayfail"");

Here's a complete HTML file in case that makes it easier:
<html>
<head>
  <script type=""text/javascript"" src=""http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js""></script>
  <link rel=""stylesheet"" href=""qunit.css"" type=""text/css"" media=""screen"" />
  <script type=""text/javascript"" src=""qunit.js""></script>
</head>
<body>
    <h1 id=""qunit-header"">Repro</h1>
    <h2 id=""qunit-banner""></h2>
    <h2 id=""qunit-userAgent""></h2>
    <ol id=""qunit-tests""></ol>
<script>
    $(document).ready(function(){
        test(""array equality"", function() {
            expect(1);
            equals([""a""], [""a""], ""a=a"");
        });
    });
    </script>

</body>
</html>",rdw,NONE,2010-08-08T09:58:21Z,2010-08-09T00:29:05Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
29,Output location in addition to useragent for rerunning tests,"It would be handy to get the URL into the markup when looking at results in TestSwarm, which are just static html. In order to interact with the results, I'd want to rerun the test in that browser, and would want to have the URL that TestSwarm used.",jzaefferer,MEMBER,2010-08-25T16:38:26Z,2010-08-29T18:04:48Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
30,Docs page failing,"See
http://img529.imageshack.us/img529/5835/picture6rk.png",fernandezpablo85,NONE,2010-08-25T20:30:50Z,2010-08-26T09:14:50Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
31,Output exception stacktrace,"Currently exceptions will get logged to the console, if available, making the stacktrace browsable (at least in Firebug). When browsing scraped test results or no console is available, that isn't available, so a static output would be useful.",jzaefferer,MEMBER,2010-08-27T18:32:32Z,2010-11-03T15:17:12Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
32,"QUnit.log outputs HTML, but it shouldn't","QUnit.log = function(a, msg){
  console.log(msg)
}

test(""some test"", function(){
  equals(1, 2);
});
Console:
<span class=""test-message"">undefined</span>, expected: <span class=""test-expected"">2</span> result: <span class=""test-actual"">1</span>, diff: <del>2 </del><ins>1 </ins>
I'm using qunit-tap and it outputs HTML into terminal.",NV,CONTRIBUTOR,2010-09-01T13:12:15Z,2010-11-03T15:46:39Z,True,3.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
33,QUnit.moduleDone logs bogus module at start,"If module() is used from the beginning, there is one bogus log entry with that name of the last module and stats all at zero. If module() isn't used before the first test, those tests get grouped into a log entry, again with the name of the last module().
The issue lies in the fact that test() accesses config.currentModule for determining whether to run the current test or not. Therefore module() has to assign config.currentModule twice: Once before and once within the synchronizer. The check within the synchronized-module() code wrongly assumes that config.currentModule is undefined for the first module().",jzaefferer,MEMBER,2010-09-03T11:00:27Z,2010-11-03T16:13:10Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
36,Document all assertions,"deepEqual, notEqual etc. aren't documented  - see http://docs.jquery.com/QUnit",jzaefferer,MEMBER,2010-09-06T18:42:36Z,2010-11-12T14:41:20Z,True,1.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
39,Custom matchers,"Would be great to define custom matchers like this:
QUnit.sameOwnProperties = function(actual, expected, message) {
  QUnit._push(myCompare(actual, expected), actual, expected, message);
}

To do that we have to move push function from the closure into QUnit._push (or QUnit.push, whatever).",NV,CONTRIBUTOR,2010-09-13T18:56:59Z,2010-11-03T14:51:43Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
41,Commenting inside tests,"Hi,
It would be nice, if there was some function to create comments inside the test, e.g.:
module('User List');
test('single user', function () {
    info('Creating new User'); // <-- new function here
    var user = new User('Chris');
    equals(typeof user, 'object', 'new User has been created');
    equals(user.name, 'Chris', 'User name is correct');

    info('Hovering User'); // <-- new function here
    // etc.
});

It is sometimes useful to make a comment about what is happening before specific assertion. It also makes it quicker to find possible mistake. I know that one can use:
ok(true, 'Creating new User');
But disadvantage of the above approach is, that these type of comments are mixed with informations from assertions and harder to find,  the comments are also counted to passed tests and have to be included in value passed to the 'expect()' function.
I made it working in quick and very dirty way in my copy of QUnit, but it would be nice, if this function was included to the main copy.
I'm, personally, using following style to distinguish those comments:
#qunit-tests li li.info {
    color: blue;
    background-color: #fff;
    border-left: 13px solid blue;
}

Best regards,
ChrisRaven",ChrisRaven,NONE,2010-09-29T20:29:35Z,2010-11-03T14:39:46Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
42,"""too much recursion"" problem","Hi,
When I have following objects and test, I get ""too much recursion"" error in FF (probably in other browsers too):
function ElemList() {
    this.elements = {};
    this.selected = null;
}

ElemList.prototype.addElement(data) {
    var
        element = new Element(data, this);

    this.elements[data.id] = element;
};

ElemList.prototype.selectElement(id) {
    this.selected = this.elements[id];
};

function Element(data, parent) {
    this.data = data;
    this.parent = parent;
}

test('selection', function () {
    var
        elemList = new ElemList();

    elemList.addElement({id:'id1'});
    elemList.selectElement('id1');
    same(elemList.selected, elemList.elements['id1'], 'Selected correctly');
});

The problem is of course, that ""element.parent"" indicates ""elemList"", and ""elemList.topics"" includes pointer to ""element"", and in this point the circular reference starts. But in program it is perfectly valid (it works in production code), error only appears during testing. The problem is, because the 'same()' function makes deep comparison and follows all pointers, which is a problem in the above example. Maybe adding some mechanism to detect this kind of code would be useful.
Best regards,
ChrisRaven",ChrisRaven,NONE,2010-10-01T15:12:38Z,2010-10-01T23:00:01Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
44,Make reset work without jQuery,"Currently the reset implementation relies on jQuery's html-method. As reset does nothing without jQuery being present, all the qunit-fixture stuff is pretty useless.",jzaefferer,MEMBER,2010-10-31T15:55:56Z,2010-11-01T11:58:58Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
45,Outdated Documentation,Unfortunately the example at http://docs.jquery.com/QUnit#source is out of date. You simply have to update the body according to https://github.com/jquery/qunit/blob/master/test/index.html to make the example working. I would have updated the page if it were a wiki...,mpfau,NONE,2010-11-03T18:21:47Z,2010-11-04T18:04:58Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
46,Uncaught TypeError: Cannot read property 'checked' of null,"A recent commit seems to result in a type error:
Uncaught TypeError: Cannot read property 'checked' of null (line 676)
As a result, tests are not run, but 'stuck' on the first test() call. This is happening in all the browsers I tried (IE8, FF3, Chrome, etc).
To repro:
1 goto http://docs.jquery.com/Qunit
2 note the first test in the QUnit example is halted at 'Running a basic test example'.
It looks like this is related to #45, because the adding the toolbar element to the html template resolved the error in my unit tests. e.g.",twalker,NONE,2010-11-04T01:29:34Z,2010-11-04T09:32:22Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
47,"Persist ""Hide passed tests"" checkbox state across test runs","Figure out a way to make the setting persistent, similar to the Eclipse JUnit runner. When enabled, you don't see successful tests at all. Summary is enough to ensure that tests were ran at all.",jzaefferer,MEMBER,2010-11-04T09:36:41Z,2011-01-12T20:23:32Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
48,"Drop ""Hide missing tests"" toolbar feature","Was built for jQuery UI, where it isn't used anyway. Too much overhead for very little to no value.",jzaefferer,MEMBER,2010-11-04T09:38:30Z,2010-11-27T16:12:03Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
49,Test reordering for faster results,"After a testrun with failing tests, the next run could provide useful results faster by running the failed tests first. Within the two categories, failed and passed, tests could be ordered by runtime, running tests that take less time first.
Need to figure something out to gather the necessary stats and persist them. Idea: Hidden input/textarea, filled with joined-array of testname|pass/fail|runtime, eg. ""jsDump.parse|pass|12"". Read that before running tests again, eg. in QUnit.init().
Non-browser runtimes would require a different storage, so the persistance should be abstracted.",jzaefferer,MEMBER,2010-11-04T09:43:28Z,2010-12-05T11:38:16Z,True,2.0,,1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
51,Update API docs,"equals => equal, same => deepEqual",jzaefferer,MEMBER,2010-11-04T14:23:21Z,2010-11-12T14:43:28Z,True,1.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
52,expect() broken,"The expect() code runs too late now, see http://forum.jquery.com/topic/latest-version-no-longer-fails-on-mismatched-expected#14737000001570197",jzaefferer,MEMBER,2010-11-05T09:29:40Z,2010-11-05T10:51:42Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
53,"QUnit.done gets called too often, at least outside the browser",Must be called only at the end of running the suite.,jzaefferer,MEMBER,2010-11-08T09:23:38Z,2010-11-27T15:09:42Z,True,2.0,,2.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
54,Example for mocking,"Provide an example for mocking with QUnit, eg. via mockjax",jzaefferer,MEMBER,2010-11-09T14:44:56Z,2011-08-05T12:02:48Z,True,0.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
55,Example of simulate plugin with QUnit,Maybe even bundle simulate with QUnit - at least make it a proper plugin with a release and docs.,jzaefferer,MEMBER,2010-11-09T14:45:55Z,2011-08-05T12:03:32Z,True,1.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
56,Running on serverside,"Currently QUnit still has various calls to window.setTimeout/Interval, those need to be removed/replaced/checked.
One of them may be a bit harder to get rid of:
js: ""../qunit/qunit.js"", line 1021: Java class ""[B"" has no public instance field or method named ""setInterval"".
    at ../qunit/qunit.js:1021
    at ../qunit/qunit.js:1002
    at ../qunit/qunit.js:1085
    at ../qunit/qunit.js:1085
    at ../qunit/qunit.js:1085
    at ../qunit/qunit.js:110
    at ../qunit/qunit.js:712 (process)
    at ../qunit/qunit.js:304
    at suite.js:84",jzaefferer,MEMBER,2010-11-16T21:01:38Z,2012-02-15T16:55:18Z,True,13.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
57,Provide Getting Started example,"Source of the current example contains document-ready code, thats misleading. Should provide an example of the minimal necessary markup.",jzaefferer,MEMBER,2010-11-17T15:59:44Z,2012-05-04T09:59:55Z,True,1.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
58,Add a README file,,fernandezpablo85,NONE,2010-11-25T18:42:41Z,2010-11-27T15:45:15Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
60,Output filename:linenumber for failed assertions,"Seeing where an assertion is defined can be very useful. Maybe generate a stacktrace via trow new Error, catch that immeditely and inspect it.",jzaefferer,MEMBER,2010-11-27T16:14:31Z,2010-11-28T12:44:35Z,True,3.0,,1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
61,Update license header,"2010/11, MIT or GPL",jzaefferer,MEMBER,2010-12-04T15:57:51Z,2011-01-04T08:36:33Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
64,Test for sessionStorage fails in Firefox 4 when DOM storage is disabled,"Use test from Modernizr, it'll work.",jzaefferer,MEMBER,2010-12-07T21:49:44Z,2010-12-07T21:52:04Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
65,Failing asynchronous test runs out of the source order,"This is regarding commit f32d1c9. I've also commented it, but I'm not sure the comments are seen so I'm describing the problem here too.
I can't understand what is the reasoning behind storing the fact that a test failed. Is that documented somewhere?
Now I'm facing a pretty confusing situation when the second of 4 asynchronous tests [constantly] fails. It runs first event if it is the second in the source code, and that's why it fails. Taking a peek into the code I found this commit and setting defined.sessionStorage = false (at line 15 in qunit.js) fixes my problem, but it does not feel right...
Am I missing something besides ""every test should not depend on the other tests"" and ""order of tests should not matter""?",gurdiga,NONE,2010-12-09T14:57:47Z,2010-12-27T13:12:19Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
69,Extend raises with optional second argument,See http://nodejs.org/docs/v0.3.2/api/assert.html#assert.throws for usecases.,jzaefferer,MEMBER,2010-12-21T10:07:05Z,2010-12-27T13:11:13Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
71,qunit crashes IE 5.5 and IE 6,"By using IE Tester I've noticed that, after updating to the newest qunit, my unit tests crashes IE 5.5 and IE 6.0. I've haven't been able to pin point where exactly as these browsers simply crash without any error message.
Please confirm.",dotnetCarpenter,NONE,2010-12-29T14:26:16Z,2011-09-16T16:43:16Z,True,7.0,,6.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
72,Option to run QUnit without try/catch,"IE (and others, to varying extents) lose the original exception if it is wrapped in a try/catch instead of being allowed to fall all the way out. A separate code path is needed in Test.prototype.run to allow this to happen. Obviously, the unit tests will fail completely when this happens, but at least it will allow easier access to the actual error causing the trouble; right now, one needs to comment out the entire try & catch block in order to get access to it.",csnover,NONE,2011-01-02T02:09:52Z,2011-01-12T20:30:59Z,True,5.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
73,Mechanism to dispatch native browser events,"It would be nice if QUnit had a mechanism that would allow for easy dispatching of native browser events on elements instead of needing to reinvent the wheel for every test suite that needs to test events. Right now, for instance, the vast majority of jQuery unit tests are only testing the jQuery event system and don’t actually ever confirm that native browser events will work the same way.",csnover,NONE,2011-01-02T18:23:53Z,2012-09-29T13:55:44Z,True,9.0,,5.0,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
74,Test run out-of-order,"I don't know if test order is supposed to be significant, but since I don't see it documented either way, I've been assuming that tests should run in the order in which they are defined.
I've noticed that sometimes, when an assertion fails, tests run out-of-order.
Always successful:
http://jsfiddle.net/cowboy/KWMjJ/1/
Intermittent failure (click ""Run"" multiple times):
http://jsfiddle.net/cowboy/KWMjJ/2/ (test 2, # expect error)
http://jsfiddle.net/cowboy/KWMjJ/3/ (test 3, failing test)
I've observed this behavior in Firefox 4 and Chrome.",cowboy,NONE,2011-01-03T13:03:44Z,2011-03-03T07:17:02Z,True,12.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
76,Synchronize stop/start calls,"If stop() is called multiple times, delay start until equal amount of callsto start(). Makes synchronizing multiple async blocks trivial.",jzaefferer,MEMBER,2011-01-04T08:33:45Z,2011-01-04T16:36:33Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
77,Use testName instead of test for calls to fail(),Useless to have html markup in console output.,jzaefferer,MEMBER,2011-01-06T10:33:00Z,2011-01-12T20:05:23Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
78,Document ?notrycatch,See #72,jzaefferer,MEMBER,2011-01-12T20:31:53Z,2011-09-19T07:30:11Z,True,2.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
79,Document updated callbacks,See qunit.js line 616 to 629,jzaefferer,MEMBER,2011-01-12T20:32:41Z,2011-08-05T12:01:37Z,True,1.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
80,"""Hide passed tests"" when enabled on page load doesn't hide passing assertions","For a test with both failing and passing assertions, passing assertions are still displayed.
If enabled after a testrun, they are, correctly, hidden.",jzaefferer,MEMBER,2011-01-18T10:59:30Z,2011-08-05T12:00:29Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
81,QUnit is not changing the 'config.current' to the next test,"I am having trouble re-creating this issue in a sandbox environment, but it is quit a strange one.
I have an asyncTest that sends a json request and then several normal tests
asyncTest(....)
test(...)
test(...)
the normal tests preform about 30 assertations each.
However, when I run the suite, I find that the last test to get run shows zero tests (zero run), even though the tests are clearly being run.
Some extensive debugging in chrome as shown me that the config.current is not being changed before the last test is run, so the 36 assertions run in the final test are added to the stack of tests run in final test - 1.
When the test has finished running, QUnit thinks that no tests have been run.
This issue immediately resolves itself if I remove the asyncTest.",guyht,NONE,2011-01-27T18:33:39Z,2011-01-28T02:41:32Z,True,5.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
82,QUnit is not changing the 'config.current' to the next test,"Ok, sorry for creating a new issue, looks like I cant reopen the last one.
The 2nd to last test is not running the following code around line 200
queue: function() {
    var test = this;
    synchronize(function() {
        test.init();
    });
    function run() {
        // each of these can by async
        synchronize(function() {
            test.setup();
        });
        synchronize(function() {
            test.run();
        });
        synchronize(function() {
            test.teardown();
        });
        synchronize(function() {
            test.finish();
        });
    }

test.setup() is called, followed by test.finish().  test.run() is not called.
Then on the following test, it is called twice.
It seems as if some of the synchronization has got mixed up and looks like this
Queue test 1
Queue test 2
Queue test 3
... start testing
test1.setup
test1.run
test1.finish
test2.setup
test2.finish
test3.setup
test2.run
test3.run
test3.finish
But because test 2 is finished before it runs, no results are displayed.",guyht,NONE,2011-01-27T19:02:16Z,2011-10-10T14:44:26Z,True,12.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
85,TypeError comparing strings using equal when json.js present,"Hi,
If json.js is included as a dependency and an ""equal"" assertion is performed on two unequal strings then a TypeError is thrown with the following message.
Died on test #1: ns[i].rows is undefined - { ""message"": ""ns[i].rows is undefined"", ""fileName"": ""https://github.com/jquery/qunit/raw/master/qunit/qunit.js"", ""lineNumber"": 1316....................
I think this is because QUnit.diff compares json related properties such as the toJSONString method which is added to the string prototype by json.js.
jsfiddle here : ""http://jsfiddle.net/kartik78/nK4Ev/
Regards,
Kartik",kartik78,NONE,2011-02-10T11:24:13Z,2011-02-21T21:09:13Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
87,URL-Filter ignores existing query strings,"The filter should use a key such as qunit_filter and append or replace that, but keep everything else.",jzaefferer,MEMBER,2011-02-26T22:20:56Z,2011-08-05T12:00:56Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
90,Document reordering and Hide passed tests,"Cover disabling reordering (QUnit.config.reorder = false), but more importantly, what it does and how it can make testing more efficient. Especially in combination with Hide passed tests checkbox enabled.",jzaefferer,MEMBER,2011-03-02T23:19:55Z,2012-09-29T15:14:39Z,True,2.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
93,QUnit url/extend function breaking urls in jQuery ajax test component,"http://grab.by/9ojb http://grab.by/9ojd
Ajax urls are wrapped in the url function in unit/ajax.js.  Currently, instead of constructing the correct url, many of them end up as get params with each letter of the string a different param.  You'll see in the second photo ""1=d&2=a&3=b.... because it's doing a for-each for the string.  Perhaps something got broken during the recent ?filter=* url changes.",timmywil,NONE,2011-03-10T15:25:42Z,2011-03-11T15:54:19Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
95,Leaking global variable,"The function validTest() leaks a variable not to the global scope.
https://github.com/jquery/qunit/blob/cc8460c7b44f023c4f84ab1810b72bf6c6ee4542/qunit/qunit.js#L787",Skalman,NONE,2011-03-12T12:02:37Z,2011-05-22T20:45:17Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
96,Tests that depend on session storage is broken,"I have the following code:
module(""Calendar"", {
   setup: function() {
      localStorage.clear();
      sessionStorage.clear();
   },
   teardown: function() {
      localStorage.clear();
   }
});
test(""Test loading months"", function() {
    ...
});

When I run this in FF 3.6 (Linux) I get this in my Firebug console:
Operation is not supported"" code: ""9

I even get the same error when I try to do this:
alert(typeof(sessionStorage));

My app relies both on sessionStorage and localStorage and mocking about with the localStorage works just fine.",peterbe,NONE,2011-03-20T01:25:36Z,2011-03-22T08:52:49Z,True,3.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
97,Add mockjax example to docs,Could be part of stop()/start() docs. Or add seperate async testing example.,jzaefferer,MEMBER,2011-04-02T12:41:20Z,2012-03-01T18:02:46Z,True,1.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
98,ok() outside a test() context crashes qunit.,"Example code:
test('my test', function() {
ok(true, 'works');
});
ok(true, 'outside a test?');
test('test2', function() {
ok(true, 'why is this assertion not shown?');
});
Result
'my test' is executed but then the script dies in qunit.js on line 315
Chrome: Uncaught TypeError: Cannot read property 'assertions' of undefined
Firefox: config.current is undefined
Expected result
Show an error like ""Assertion outside a test() context in file x on line y"" and continue running tests.",bfanger,CONTRIBUTOR,2011-04-03T14:03:30Z,2012-02-15T16:49:49Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
101,reordering keeps executing passing tests first,"If a test once failed, it will be reordered and executed first even after it passed.
Around lines 158 the two calls of sessionStorage.setItem and sessionStorage.removeItem should most likely use the same String as an identifier.
Further, it sounds sensible to wipe the sessionStorage sometimes to deal with renamed tests and such. This shouldn't be done after reading in all the tests' status as execution might not get to the point where status is written again. An option might be to do this in case all tests passed.",zuckel,NONE,2011-04-11T09:07:16Z,2012-02-15T16:39:55Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
103,Remove deprecated #main in favor of #qunit-fixture,,jzaefferer,MEMBER,2011-04-15T10:20:21Z,2011-04-15T10:36:10Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
104,Extract load-event handler and expose it,"The code that currently runs on window.load can't be called when that event isn't available, e.g. QUnit is loaded on a page after load. Extract and expose it as QUnit.load() or something.",jzaefferer,MEMBER,2011-04-15T10:48:23Z,2011-08-05T11:51:24Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
106,QUnit.done() called after each test (using Rhino),"Using env.js and Rhino, QUnit.done() seems to be called (twice) after each test, instead of once after all tests have been run.
This is also reported here: http://twoguysarguing.wordpress.com/2010/11/06/qunit-and-the-command-line-one-step-closer/",oyvindeh,NONE,2011-04-29T09:52:48Z,2011-06-14T08:41:56Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
108,Test are Skipped on Mobile Devices,"Hi guys,
Recently I've noticed that some tests are skipped when running QUnit on a mobile device. I've seen this issue on a few different test suites, although each test suite has 100-700 unit tests. The same issue does not happen on a mobile simulator, so it might be a race condition based on the device's speed.
I was able to fix the issue by increasing the process delay from 13 to 250 in the QUnit.start. Do you know what callbacks could be running at that time? In our test suites, we try to ensure that everything is loaded before running QUnit. We use QUnit.config.autostart = false;.
Here are a few screenshots that show the issue:


I have no problem experimenting with patches, but I could use some feedback on where to go.
Cheers,
Michael",mwbrooks,NONE,2011-05-12T22:48:58Z,2012-02-15T16:22:23Z,True,7.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
109,noglobals should run after module teardown,"If teardown cleans up globals, ignore them.",jzaefferer,MEMBER,2011-05-16T11:56:22Z,2011-05-16T18:57:27Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
114,#qunit-fixture should define a width and height,"I just ran into a lot of hell trying to test animations because the width of the element I was animating wasn't what I had defined it (in IE7):
Compare http://jsfiddle.net/HJ4ak/2/ to http://jsfiddle.net/HJ4ak/1/
Just adding width: 1000px; height: 1000px; to the #qunit-fixture in my CSS fixed the issue on my test page",gnarf,CONTRIBUTOR,2011-06-13T23:51:43Z,2012-02-15T16:20:18Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
116,Show stack traces in nodejs,"I'm running QUnit in NodeJS with some success.
One thing that bugs me is that the stack traces are not shown by default.
This patch could help in run() line 104 :
fail(""Test "" + this.testName + "" died, exception and test follows"", e.message, e.stack, e, this.callback);

thx",sylvinus,NONE,2011-06-15T18:58:01Z,2012-02-15T16:17:16Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
118,A synchronous call to stop causes tests to end before start is called it's final time.,"The delay build into start() doesn't check the semaphore before calling process(). This can cause a test that has multiple calls to stop to fail even when those calls happen synchronously with the call to start.
https://gist.github.com/1055426
That contains a simple test case that fails and a more elabore test real-world-like example.",wwalser,CONTRIBUTOR,2011-06-30T02:07:14Z,2011-08-05T11:49:43Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
120,Comprehensive state management,"State management
One of the primary issues we run into daily on the jQuery Mobile project is managing state between tests. Currently QUnit handles managing the DOM through the #qunit-fixtures wrapper but there are a myriad of other browser features that require handling.
A short list

Title
Hash
Query params
Local storage
Data objects
Event bindings

It should be noted that the last two can initially assume jQuery core as the DOM abstraction thanks to its ubiquity. This list is far from complete.
API suggestions
There will most certainly be cases that we can't think of in terms of managing and resetting state across tests. It would be nice to create the built in state management on top of an exposed api that allowed users to reset arbitrary objects and state between tests.
A an example:
https://gist.github.com/7431d5eb9226eda56168
Abstracting the state management of javascript objects into a simple API will help users create more stable tests.",johnbender,NONE,2011-07-04T17:07:13Z,2012-03-01T18:01:12Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
121,Evented/Timed test helpers,"Evented testing
DISCLAIMER:  most of the ideas here may be project specific but appear, at least from where I'm standing, to be useful in a myriad of scenarios when testing event based functionality.
Timing and event based tests in QUnit and other frameworks tend to be fragile and even dependent on execution order in practice. There are few test helpers that we've found to be invaluable in working with events and time dependent functionality.
sequence( functions, timeout )
Many tests that require a set of timeouts to verify functionality can be cleaned up by abstracting multiple calls to setTimeout into a single helper. This is just as brittle as using the timeouts themselves but at least results in cleaner code where no event is provided to guarantee the behavior.
Example:
https://github.com/jquery/jquery-mobile/blob/master/tests/unit/navigation/navigation_core.js#L49
eventSequence( event, functions )
The event sequence helper executes a list of functions based on a series of the same event firing to trigger each. The most obvious use case where jQuery Mobile is concerned is page transitions which fire the changepage event upon completion.
An example from the event tests:
https://github.com/jquery/jquery-mobile/blob/master/tests/unit/event/event_core.js#L425
An example from the navigation tests. pageSequence is just a wrapper around eventSequence that specifies changepage event as the first argument to eventSequence:
https://github.com/jquery/jquery-mobile/blob/master/tests/unit/navigation/navigation_core.js#L300
eventCascade( event, function, event, function ... )
We haven't stumbled upon a use case here yet but it seems likely that a more flexible form of the eventSequence function would be valuable. In fact this should encourage a more pluggable design since events will be the preferred way to guarantee states of execution in the code being tested!
waitFor
Jasmine has a nice helper in the form of waitFor. It holds the test suite execution until the callback returns a truthy value. Mind you this is dependent on the serialization of all the code in the tests through the run function. More information can be found at their wiki down on the bottom:
https://github.com/pivotal/jasmine/wiki/Asynchronous-specs",johnbender,NONE,2011-07-04T17:27:49Z,2012-03-01T18:00:39Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False
122,Assertions not working inside Webkit DB handling closures,"Reproduction (Chrome v12):
module(""Basic DB test"");
test(""Create DB"",function(){
db = openDatabase(""TestDB"",""0.1RC"",""Test Database"",1048576);
db.transaction(function(tx){
tx.executeSql(""CREATE TABLE testtable ('id' INTEGER PRIMARY KEY AUTOINCREMENT)"",[],function(tx,result){ok(true,""create 'testtable'"");},function(tx,error){ok(false,""create 'testtable' failed"");});
});
});
Well, as much as I figured out, this can be because of the asynchronous DB operations. If so, an error message should be helpful.",Szasza,NONE,2011-07-12T23:23:59Z,2011-07-13T00:34:32Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
123,Create configuration setting for default stop() timeout,"Rather than putting the limit hardcoded everywhere it would be nice if libraries could set something like config.timeoutDuration=5000; in their testiniit file and have stop()'s first argument default to that if it's undefined. In fact, it could simply always fallback to config.timeoutDuration if the first argument is undefined. Regardless of wether config.timeoutDuration is defined or not.",Krinkle,MEMBER,2011-07-15T22:36:46Z,2012-04-11T17:19:58Z,True,4.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
126,QUnit doesn't work in konqueror,"Konqueror 4.6.2 fails on qunit.js line 13:

return !!sessionStorage.getItem;",majek,NONE,2011-07-22T10:29:16Z,2011-07-22T10:36:25Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
127,Minimize the amount of required html for QUnit,"I think it would be great if in order to get going with QUnit the only html required was instead of
<h1 id=""qunit-header"">QUnit example</h1>
<h2 id=""qunit-banner""></h2>
<div id=""qunit-testrunner-toolbar""></div>
<h2 id=""qunit-userAgent""></h2>
<ol id=""qunit-tests""></ol>
<div id=""qunit-fixture"">test markup, will be hidden</div>

just simply
<div id=""qunit""></div>
<div id=""qunit-fixture"">test markup, will be hidden</div>

This simplifies things from the user perspective because it hides some rather non-interesting implementation details. But it's more than just cosmetic because then the library can change its markup structure without requiring the user to make a corresponding change.",rdworth,CONTRIBUTOR,2011-07-26T12:03:36Z,2016-11-01T16:28:53Z,True,19.0,,4.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
128,Add QUnit subsuite runner,"See jquery/jquery-ui@0290325#diff-1
Code a bundle with QUnit as an addon: https://github.com/jquery/jquery-ui/blob/master/tests/unit/testsuites.js",jzaefferer,MEMBER,2011-07-26T20:46:51Z,2012-05-04T09:58:52Z,True,13.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
129,deepEqual for arrays in different windows always fail,"The problem comes from testing strict equality between the constructors of two objects. If they were created in different windows then they will always have different constructors, even if they are both instances of Array, since each Array is a member of its own window.
see: https://github.com/jquery/qunit/blob/master/qunit/qunit.js#L1060
This type of problem, demonstrated: http://jsbin.com/icacur/8",micmath,NONE,2011-07-27T13:46:31Z,2011-09-20T02:59:52Z,True,9.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
130,"Tests get moved between modules, causing expect() to fail","I can't nail down the exact cause, but it seems like sometimes an assertion will ""move"" out of its current test/module into the next one. If I have an expect assertion in each of the relevant tests, the suite will fail (not enough tests run in one, too many in the other).
You can see this behaviour up at the xui tests page in Chrome or Firefox; the remoting and tween modules show this behaviour.
Other things I can tell you about the test suite:
This gets run before page load:
QUnit.config.autostart = false;
if (typeof window.localStorage != 'undefined') window.localStorage.clear();
if (typeof window.sessionStorage != 'undefined') window.sessionStorage.clear();
And the tests get triggered after the body loads.",filmaj,NONE,2011-07-27T19:51:27Z,2011-08-05T11:46:36Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
133,"[PATCH] Make sure that an initially ""hide passing test"" setting does not ignored","Hi,
thanks for QUnit.
this patch makes the QUnit ""hide/show"" test toggle more robust. I used this to ""hide passing test"" by default and now cannot toggle them on again:
$('#qunit-tests').addClass('hidepass');
diff -r 873235de9961 abc-path/js/qunit.js
--- a/abc-path/js/qunit.js  Wed Aug 03 16:11:40 2011 +0300
+++ b/abc-path/js/qunit.js  Wed Aug 03 20:11:58 2011 +0300
@@ -706,8 +706,8 @@
            if ( filter.checked ) {
                ol.className = ol.className + "" hidepass"";
            } else {
-               var tmp = "" "" + ol.className.replace( /[\n\t\r]/g, "" "" ) + "" "";
-               ol.className = tmp.replace(/ hidepass /, "" "");
+               var tmp = "" "" + ol.className.replace( /\s+/g, ""  "" ) + "" "";
+               ol.className = tmp.replace(/ hidepass /g, "" "").replace(/\s+/g, "" "");
            }
            if ( defined.sessionStorage ) {
                if (filter.checked) {",shlomif,CONTRIBUTOR,2011-08-03T17:12:55Z,2011-08-04T18:10:16Z,True,6.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
134,Add a window.onerror handler,"That would help catch errors in code running outside of tests, e.g. when doing a feature check to decide if to run a test or not. Currently these can get by unnoticed. Might also help catch errors in asynchronous code, where QUnits try/catch doesn't help anymore.
Could look something like this:
QUnit.addEvent(""error"", function(message, file, line) {
  if (QUnit.config.current) {
    ok( false, message + "", "" + file + "":"" + line );
  } else {
    test(""global failure"", function() {
      ok( false, message + "", "" + file + "":"" + line );
    });
  }
});

With that both async errors inside a test and errors outside tests are catched and handled.
Is there ever a situation where QUnit shouldn't do that?",jzaefferer,MEMBER,2011-08-05T11:53:56Z,2011-10-11T10:13:58Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
137,QUnit can't use in Dynamically load,"If i load QUnit dynamically with loadScript,QUnit can't work well.
Because QUnit depend window.onload,no onload event was trigger when ""qunit.js"" been loaded.
It's no problem in yui test.
It's very important,we want do test in production emvironment,so must load dynamically.
thank you!",yaniswang,NONE,2011-08-10T02:22:04Z,2011-08-15T10:00:03Z,True,5.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
138,QUnit log order problem,"I have 2 issues for report.
1,QUnit log event order is not same as test code order.
2,If test like this,no module define first,the log order is error:
test(""test1"", function() {
});
module(""Module A"");
test(""test2"", function() {
});
module(""Module B"");
test(""test3"", function() {
});
It's issue?or just it?
thank you.",yaniswang,NONE,2011-08-10T02:25:22Z,2012-03-10T14:25:02Z,True,11.0,,6.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
139,Allow multiple hooks to be registered for QUnit,"QUnit.begin, .end, .moduleStart etc. are all direct functions. Replacing them with hook arrays with make it easier for multiple add-ons to be used on a single client (without having them override each other).
Since it's starting to get a little full in the root of QUnit (assertions, hooks, utilities, configuration, states, etc.), and to avoid (more) (potential) naming conflicts though, perhaps move them into a new object called QUnit.hooks ?
Something like this:
QUnit.hooks = {
  begin: [],
  end: [],
  moduleStart: [],
 // etc.
}

QUnit.addHook = function( name, fn ) {
  // Something like this ?

  if ( QUnit.is( 'function', fn ) && QUnit.hooks[name] !== undefined ) {
    QUnit.hooks[name].push( fn );
    return true;
  }
  return false;
};

// Backwards compatibility
QUnit.addHook( 'begin', QUnit.begin );
QUnit.addHook( 'end', QUnit.end );
...",Krinkle,MEMBER,2011-08-12T05:43:26Z,2012-02-15T15:40:16Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
140,Make toggle system for urlParameter configurable,"QUnit has a nice little system to show checkboxes with a default state dependent on url parameters, and onchange it refreshes with only that url parameter added, removed and/or toggled.
Currently it's hardcoded but I would welcome having it available as a configurable option so that plugins can add their own boolean-triggers. I could implement this soon but wanted to know what others think of this first.
The hook where this would become available is 'begin' (since that one is called before QUnit.init()), however the reason this is currently not usable is because the config-values for and from urlParamters are generated from an IIFE rather than from QUnit.init.
I think the code to populate QUnit.urlParams shouldn't change location (since it's a general utility that may be used by plugins or clients before window.onload/QUnit.begin) but the conversion to QUnit.config should be moved to QUnit.init for this to work.
So we'd have a new config variable that is an array containing these boolean-triggers,
and in the window.load handler it looks in urlParams for current values and then create the label/input elements for each of them.
var config = {
  // ...
  urlConfig: ['noglobals', 'notrycatch'],
  // ...
};

addEvent(window, ""load"", function() {
  QUnit.init();
  /* ... */

 // loop through urlConfig and set config[val] = !!urlParams[val];
 // create label/input elements for banner.innerHTML
});",Krinkle,MEMBER,2011-08-12T05:55:03Z,2011-08-15T09:22:23Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
142,Backslash characters in messages should not be escaped,"If a backslash character appears in the message string of an assertion, then the backslash is unexpectedly prefixed with an additional backslash character on the test results screen. For example,
test(""QUnit bug test case"", function () {
    equal(""\\"", ""\\"", ""'\\\\' === '\\\\'"");
});

The message for the comparison assertion is displayed on the test results screen as '\\\\' === '\\\\' but I was expecting '\\' === '\\', which is the string that the JavaScript string ""'\\\\' === '\\\\'"" represents.
I am using qunit.js of commit 75dae0b.",,NONE,2011-08-14T14:51:25Z,2011-09-16T09:55:43Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
144,Throw error message for wrong argument types.,"Hello,
I'm wondering if you could add an option to enforce type checking for the arguments of each of the assertion functions qunit provides.
This would help beginners better understand how to use qunit properly and make finding bugs a lot easier.
I do realize that the documentation states the argument types but I misinterpreted it when first I read it.
This feature could be easily achieve this by adding a wrapper to each of assertion functions.
Here are some common problems that I had.
ok( function(){
throw new Error('example');
}, 'Test passes but the user expects for the function to be called.' );
raises( false, 'Test Passes.');

Possible type enforcement could be ...
ok( boolean, [string]);
raises( function, [ string, string ] )
equals( primitive types, [ string ] );
...
etc",LarryBattle,NONE,2011-08-15T08:28:18Z,2012-02-15T15:39:16Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
146,jsDump fails on DOM node in Safari,"See http://bassistance.de/i/1a186f.png
Fails on running the regular QUnit testsuite in Safari. With very similar results in PhantomJS.",jzaefferer,MEMBER,2011-08-15T21:18:28Z,2011-10-10T15:12:18Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
149,Rhino setInterval problem,"I faced with problem that Rhino and QUnit produce following error in case if required object is missed:
# module: wedanaMath
# test: Check whether WedanaMath exists
js: ""../../../../../../../bin/qunit/qunit.js"", line 1223: Java class ""[B"" has no public instance field or method named ""setInterval"".

The test is the following:
module('wedanaMath');
test(""Check whether WedanaMath exists"", function() {
  ok( WedanaMath, ""WedanaMath() exists"" );
});

But the module which contains WedanaMath was not loaded.
It was reproduced with the QUnit from master branch and Rhino 1.7R2. This problem was not reproduced with QUnit shipped with Env.js (unfortunatly I don't know version).
Seems the problem in the following code:
https://github.com/jquery/qunit/blob/master/qunit/qunit.js#L1223
else if (typeof obj.setInterval !== undefined && typeof obj.document !== ""undefined"" && typeof obj.nodeType === ""undefined"") {

In the old version Window object determinated by QUnit.is function.",pavlot,NONE,2011-08-17T22:55:53Z,2012-02-15T15:36:37Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
153,qunit.js errors in ie7,"Simply including the version of qunit that's currently at master in an html page throws the following javascript error:
Line: 680
Char: 1
Error: Expected identifier, string or number
Code: 0

Reduction of bug: http://jsfiddle.net/YTEwj/embedded/result/",deleteme,NONE,2011-09-14T17:08:24Z,2011-09-14T20:03:24Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
154,"IE8 and <!DOCTYPE HTML>: error ""Can't find member""","Qunit executing in IE8 (in fact, IE9, but in ""Exploration mode: IE8) throws an error if the HTML has the tag "".
The error is ""Can't find member"" and is thrown in the line 980, char 4.
Example of single HTML file:
http://pastebin.com/BCGS5BeY",lucasvc,NONE,2011-09-16T06:50:23Z,2011-10-20T12:08:07Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
155,Failing noglobals test in IEs,"In IEs, the noglobals test fails: http://bassistance.de/i/677c48.png",jzaefferer,MEMBER,2011-09-16T09:35:58Z,2011-10-12T20:51:19Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
156,Support Object.prototype extending environment,"jQuery core is against this and personally I am as well. However in a testing environment I think it should be possible to run tests in environment where frameworks exist that do extend the Object.prototype.
Currently QUnit fails in two main areas afaik:

The for ( var i in ns ) loop in QUnit.diff
** Causes exception for calling property 'length' of undefined.
** Example: ns['someprototype'].rows.length (rows doens't exist and neither does length in that case)
The for ( key in params ) loop in QUnit.url
** Causes the url to include all prototypes when clicking for example the 'notrycatch' checkbox.",Krinkle,MEMBER,2011-09-18T19:39:39Z,2011-10-10T15:10:32Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
160,Missing a defined.setTimeout check.,Missing a defined.setTimeout check at line line #914. This causes an error when running in Rhino/Node.,jdalton,NONE,2011-10-01T15:42:37Z,2011-10-10T15:01:45Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
161,compare space in firefox,"hi,may be it not a bug, but why this test failed.
equal("" "",document.createTextNode(""\u00A0"").textContent)
thanks!",xiaohulu,NONE,2011-10-05T02:58:50Z,2011-10-06T15:57:08Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
162,Add version/build information to qunit.js,Would be nice if there was a build or version number to the commetns block at the top of qunit.js so that we know what build we're pulling and using.,dmitrye,NONE,2011-10-05T05:13:19Z,2011-10-06T15:55:49Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
163,jsDump treats any object with a length property as an array,"jsDump doesn't even agree with jQuery.isArray, treating anything with a length parameter as an array, causing inappropriate output, most commonly empty arrays or arrays containing undefined for as many times as the length property value. Real Array, and possibly NodeList objects can be detected by the same means that the objectType or jQuery.isArray methods work.",trevorparscal,CONTRIBUTOR,2011-10-07T19:46:39Z,2011-10-10T14:51:03Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
165,jsDump fails on DOM node in IE9,"See http://swarm.jquery.org/?state=runresults&run_id=2156&client_id=217
This change fixed Safari, but broke IE: cf76f1a
Related discussion: f24167a#commitcomment-641598",jzaefferer,MEMBER,2011-10-10T15:17:27Z,2011-10-10T19:34:15Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
167,Wrongly detect Node as not having setTimeout,"QUnit wrongly detects defined.setTimeout as false in Node.js because it does this
(function(window) {
  // code
})(this);
instead of
(function(window) {
  // code
})(typeof global == 'object' && global || this);",jdalton,NONE,2011-10-13T23:07:22Z,2012-02-15T15:34:28Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
171,Improve exports,"Currenty exports implementation exposes QUnit as an exports property, as well as adding all QUnit property. That's probably wrong.
The Backbone approach could be a good model:
var Backbone;
if (typeof exports !== 'undefined') {
    Backbone = exports;
} else {
    Backbone = this.Backbone = {};
}",jzaefferer,MEMBER,2011-11-03T09:35:23Z,2012-02-15T15:27:17Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
172,Remove the testEnvironmentArg for test(),"Need to check if core uses that anywhere. If so, help them drop it.",jzaefferer,MEMBER,2011-11-03T09:51:18Z,2012-02-15T14:59:11Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
173,Explore Sandboxing,"Currently its pretty easy to build a testsuite that only works under certain circumstances, by having one test rely on leaks from another. Detecting and fixing those leaks can be really difficult. Some kind of sandboxing to isolate tests from each other, even if its just a temporary thing like noglobals, could at least help detect leaks, if not even be an always-on option.",jzaefferer,MEMBER,2011-11-04T00:05:19Z,2012-08-30T16:07:36Z,True,5.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False
178,Make test fail if no assertions run,"On finish(), check if number of assertions is zero, if so, add a failing assertion. Accept that only when expect(0) is called explicitly.",jzaefferer,MEMBER,2011-11-24T12:37:26Z,2012-03-05T11:52:07Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
179,Add hook for custom types output in jsdump,"Currently the output for big objects, even for passed tests, can get pretty nasty big. Customizing QUnit.jsDump is possible, but not nice at all.
There should be a way to detect and format custom types, something like this:
QUnit.jsParse.registerType(function(obj) {
    /* return true or false */
}, function(obj) {
/* return string */
})

Or make that a single function: If it matches, format it, otherwise return false/null/undefined.",jzaefferer,MEMBER,2011-11-24T15:28:39Z,2015-05-18T16:30:20Z,True,11.0,,4.0,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False
182,equal has a non-clear behaviour with JSON objects,"Hi,
I was testing my JS code with QUnit and I had a test failing like this:
Marker's location
Expected:   
{
  ""accuracy"": ""8"",
  ""lat"": ""33.389689"",
  ""lng"": ""-111.853909"",
  ""streetAddress"": ""1337 South Alma School Road"",
  ""city"": ""Mesa"",
  ""county"": ""AZ"",
  ""country"": ""United States"",
  ""org"": ""Best Buy"",
  ""address"": ""1337 South Alma School Road, Mesa, AZ"",
  ""postcode"": undefined
}
Source:     
    at Object.<anonymous> (file://localhost/Users/ale/Desktop/projects/recycleopedia.com/jsmessupfix/test.js:114:2)

The content of the two objects was the same, but I guess it's comparing them to see if they're exactly the same. In fact, if I change just one value inside the expected JSON object I get:

Marker's location
Expected:   
{
  ""accuracy"": ""0"",
  ""lat"": ""33.389689"",
  ""lng"": ""-111.853909"",
  ""streetAddress"": ""1337 South Alma School Road"",
  ""city"": ""Mesa"",
  ""county"": ""AZ"",
  ""country"": ""United States"",
  ""org"": ""Best Buy"",
  ""address"": ""1337 South Alma School Road, Mesa, AZ"",
  ""postcode"": undefined
}
Result:     
{
  ""accuracy"": ""8"",
  ""lat"": ""33.389689"",
  ""lng"": ""-111.853909"",
  ""streetAddress"": ""1337 South Alma School Road"",
  ""city"": ""Mesa"",
  ""county"": ""AZ"",
  ""country"": ""United States"",
  ""org"": ""Best Buy"",
  ""address"": ""1337 South Alma School Road, Mesa, AZ"",
  ""postcode"": undefined
}
Diff:   
 {
   ""accuracy"": ""0"",
  ""8"",
   ""lat"":  ""33.389689"",
   ""lng"":  ""-111.853909"",
   ""streetAddress"":  ""1337  South  Alma  School  Road"",
   ""city"":  ""Mesa"",
   ""county"":  ""AZ"",
   ""country"":  ""United  States"",
   ""org"":  ""Best  Buy"",
   ""address"":  ""1337  South  Alma  School  Road,  Mesa,  AZ"",
   ""postcode"":  undefined
 } 
Source:     
    at Object.<anonymous> (file://localhost/Users/ale/Desktop/projects/recycleopedia.com/jsmessupfix/test.js:114:2)

I fixed applying JSON.stringify on both the output of my function and the expected JSON object.
I think that if the behaviour here cannot be changed to compare the objects field by field, at least there should be a clearer message to point out what is happening.
Thanks,
Alessandro",aledalgrande,NONE,2011-12-08T13:44:17Z,2011-12-08T13:58:45Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
183,`push` does unnecessary serializing,"The following lines are run on every push, but seem to only be necessary if the result is not truthy. https://github.com/jquery/qunit/blob/master/qunit/qunit.js#L648-654
Is there ever a case where the result would be truthy but actual and expected would be be equal? If not, we should move that code block into the following if (!result) conditional.
My tests have some large objects that are quite slow to serialize so this change makes my tests much faster.",wagenet,CONTRIBUTOR,2011-12-09T21:48:08Z,2012-05-04T10:00:36Z,True,13.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
184,"In autorun mode, moduleDone is called without matching moduleStart","If QUnit.config.autorun = true then Qunit fires a moduleDone event after each test completes (as expected) however the moduleStart event is only fired when the first test in a module runs.
Logging moduleEnd entries without a corresponding moduleStart causes problems with some continuous integration tools (e.g., TeamCity). The attached patch ensures that moduleStart/moduleDone always happen in pairs.",niallsmart,CONTRIBUTOR,2011-12-20T07:11:00Z,2012-02-15T14:17:17Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
186,Provide a JUnit reporter,"To exercise our logging support and provide a better starting point for CI integration, a JUnit reporter, bundled as an addon, would help a lot.
Here's an XSD based on Ant's implementation for the JUnit xml: http://windyroad.org/dl/Open%20Source/JUnit.xsd",jzaefferer,MEMBER,2011-12-21T10:47:36Z,2012-09-30T11:57:34Z,True,12.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
190,"Deprecate `module`, rename to `group`","module conflicts with the one defined by CommonJS.
Would need to deprecate module and introduce group as an alias, then figure out if and when we can actually remove module.
Should encourage mocha to also use group instead of suite, as that conflicts with our use of suite.",jzaefferer,MEMBER,2012-01-14T11:50:49Z,2012-09-13T18:50:51Z,True,19.0,,9.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False
192,not*Equal shows strange result,"When I look at the passed test with notEqual assertion I can't understand why it is passed, because I can see that expected value differs from resul value. I suppose it need to be changed, because it is confusing for now.
If somebody looks at the result of your tes he doesn't know what type assertion you have used in it:ok, equal, notEqual etc. But he need to see the logical values in test view.
I would add a screenshot if it was possible.",pantuman,NONE,2012-01-24T13:48:35Z,2012-02-15T14:33:31Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
194,"On reset, fixture's properties are not cleared","The QUnit docs say:
The #qunit-fixture element can be used to provide and manipulate
test markup, and will be automatically reset after each test

In practice I have often used the qunit-fixture element directly, but have found that on reset, only the inner html is cleared, any properties added to the fixture itself, or any data persists.
See: http://stackoverflow.com/questions/8393285/qunit-strange-behavior-with-fixture-tests-alternately-failing-and-passing
Perhaps just clarifying what ""reset"" means in the documentation is the fix, but having to append a new element to the fixture on each setup to test adding properties seems to defeat the purpose of having a fixture in the first place.
Unit test for bug (QUnit tests line 313):
module(""fixture"");
test(""setup"", function() {
    document.getElementById(""qunit-fixture"").innerHTML = ""foobar"";
    /* Add property to fixture */
    document.getElementById(""qunit-fixture"").setAttribute('title','foobar');
});
test(""basics"", function() {
    equal( document.getElementById(""qunit-fixture"").innerHTML, ""test markup"", ""automatically reset"" );
   /* Fails, title is still foobar */
    equal( document.getElementById(""qunit-fixture"").getAttribute('title'), null, ""properties automatically reset"" );
});",conzett,CONTRIBUTOR,2012-02-01T15:19:46Z,2012-02-01T16:53:47Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
196,Proposing W3C test harness compatibility shim,I'm working on a project right now that requires me to write a compatibility shim that will allow my QUnit tests to run in the W3C test harness. I'd like to contribute this back to QUnit for review,rwaldron,CONTRIBUTOR,2012-02-02T14:37:13Z,2012-02-15T14:31:20Z,True,6.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
197,How do I use qunit to test code that responds to onload event?,"Hello,
I'm writing unit tests for a module that responds to load and unload events.  I'd like to test the module by firing my own onload and onunload events like so...
test('Test session load', function() {
window.sessionStorage.getItem = function(name) {
equal(name, 'foo', 'Correct sessionStorage item name used');
return [0,1,2];
};
var evt = document.createEvent(""HTMLEvents"");
evt.initEvent(""load"", true, true);
window.dispatchEvent(evt);
});
Unfortunately this doesn't work, as I think qunit is responding to the fake onload event that I've created.
Does qunit have a way to enable me to test the onload event?  Maybe I am doing something silly?
Thanks,
/t",tmaslen,NONE,2012-02-07T15:53:12Z,2012-02-15T14:30:26Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
200,Missing fail() and fail(msg) for behaviour-based testing,"As as well as ok() and equal() on the Qunit API, it would be great to have a fail() and fail(msg) function to immediately fail the test. Most mature test frameworks have such a method (see below for examples). They are useful for asserting based on behaviour (i.e., function should not have been called) rather than based on state (object.xyz must = x).
eventBus.bind(""searchFailed"", function (results) {
    fail(""this should not have been called!"");
});
They can also be useful for marking tests that have not been written yet.
test('It should render the search results dialog', function () {
    fail(""not implemented yet"");
});
Examples in other test frameworks:

NUnit's Assert.Fail(message) - http://www.nunit.org/index.php?p=utilityAsserts&r=2.2.7
JUnit's Assert.fail(message) - : http://www.junit.org/apidocs/org/junit/Assert.html#fail(java.lang.String)
Boost Test's BOOST_FAIL - http://www.boost.org/doc/libs/1_34_1/libs/test/doc/components/test_tools/reference/BOOST_FAIL.html",rdingwall,NONE,2012-02-22T11:08:45Z,2012-02-22T12:10:05Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
201,1.3.0 breaks in Narwhal JS,"You all switched to only using module.exports for serverside JS.
That is a non-standard extensions supported by some, but not all serverside JS.
The previous version 1.2.0 worked fine.",jdalton,NONE,2012-02-27T06:51:12Z,2016-11-01T16:28:55Z,True,16.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
202,Make ok(false) dump source lines,"Should behave like equal(false, true), outputting on which file and line the assertion failed.",jzaefferer,MEMBER,2012-03-01T17:26:59Z,2012-03-05T11:57:17Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
203,Make notrycatch also apply to setup and teardown,try throwing an exception in a setup with notrycatch on - it will not bubble up,jzaefferer,MEMBER,2012-03-01T17:29:11Z,2012-03-05T12:14:29Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
204,Apply noglobals after teardown,"noglobals runs before teardown, not giving a chance to remove globals introduced intentionally",jzaefferer,MEMBER,2012-03-01T17:29:37Z,2012-03-05T12:14:29Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
205,QUnit not clearing #qunit-fixture between tests,"The jQuery docs for QUnit make it sound like this should be automatic behavior.
I'm even running tests async to give it time to clear that fixture, but it seems to leave old code in there.
Qunit seems to change test execution order, so it passes every other run (really). That's only because the .clone test doesn't care if other content is in the fixture. The fixture is still polluted every run.
Here are two extensions to Zepto, the test, and the result in the test fixture. You can tell the fixture is bad because it has h2.cloneTestTitle*2 AND h2.outerHtmlTitle, even though those are added in separate tests.
Code:
$.fn.clone = function(){
    var ret = $();
    this.each(function(){
    ret.push(this.cloneNode(true));
    });
    return ret;
};

$.fn.outerHtml = function() {
    return $(this).clone().wrap('<div></div>').parent().html();
};

Test Code:
test('$().clone makes a copy of an element', function() {
    stop();

    var testClass = 'cloneTestTitle'
    ,   testContent = 'Clone Test Title'
    ,   html = '<h2 class=""'+ testClass +'"">'+ testContent +'</h2>'
    ,   $elem = $(html)
    ,   $fixt = $(_fixtureSelector)
    ;

    $fixt.append($elem);
    ok($('.' + testClass).length === 1, ""Found the test element in the DOM"");
    $fixt.append($elem.clone());
    ok($('.' + testClass).length === 2, ""Found the cloned element in the DOM"");
    debugger;
    setTimeout(function() { start();  }, 1000); //give the browser time to do the DOM manipulation
});

test('$().outerHtml returns the full html of an element, not just its contents', function() {
    stop();

    // Seems to mix up the variables between tests if I don't name them differently
    var testOutClass = 'outerHtmlTitle'
    ,   testOutContent = 'outerHtml Title'
    ,   outHtml = '<h2 class=""'+ testOutClass +'""><span class=""quiet"">'+ testOutContent +'</span></h2>'
    ,   $outElem = $(outHtml)
    ,   $parentElem = $('<div class=""parentElem""></div>')
    ,   $fixture = $(_fixtureSelector)
    ;

    $fixture.append($parentElem);
    $parentElem.append($outElem);
    ok($('.' + testOutClass).length === 1, ""Found the test element in the DOM"");
    notEqual($outElem.html(), $parentElem.html(), 'A parent element\'s .html() is not equal to the child\'s .html()');
    equal($outElem.outerHtml(), $parentElem.html(), 'A parent element\'s .html() is equal to the child\'s .outerHtml()');

    debugger;
    setTimeout(function() { start(); }, 1000); //give the browser time to do the DOM manipulation
});

qunit-fixture contents:
<div id=""qunit-fixture"">
    <h2 class=""cloneTestTitle"">Clone Test Title</h2>
    <h2 class=""outerHtmlTitle"">
        <span class=""quiet"">outerHtml Title</span>
    </h2>
    <h2 class=""cloneTestTitle"">Clone Test Title</h2>
</div>",SimplGy,NONE,2012-03-01T17:49:18Z,2012-03-01T18:49:43Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
206,Test diff output shouldn't depend on object property order,"If one uses deepEqual to compare two objects and the equality test fails, the diff output seems to depend on the order in which properties were set on the object (probably because it uses for...in). I made a trivial example using jsfiddle
I haven't quite figured out how to trick it into behaving its worst, but I've definitely seen it produce rather terrible output when property order doesn't match across objects. For more easily figuring out 'where' in the object differences occur, it would be nice if the output were improved (perhaps by sorting the properties of each object before doing a diff?).",gijsk,CONTRIBUTOR,2012-03-02T12:20:46Z,2012-03-05T11:27:07Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
207,Add option to require all tests to call expect(),,scottgonzalez,CONTRIBUTOR,2012-03-02T14:37:33Z,2012-06-07T00:20:36Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
209,expect(0) error doesn't have useful stack trace,"When a test has no assertions, QUnit throws ""Expected at least one assertion, but none were run - call expect(0) to accept zero assertions"".
Because this error is inside QUnit code and not test code, the exception information is not very useful. At first glance, it seems like it may be impossible to provide better information, but I'm opening this ticket to try to brainstorm a better solution.",wycats,NONE,2012-03-06T21:38:12Z,2012-05-04T09:56:07Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
210,"""Setup failed"" doesn't have useful stack trace","When the setup fails, the stack trace provided is inside QUnit. Unlike #209, this should be easier to fix.",wycats,NONE,2012-03-06T21:54:38Z,2012-03-07T11:02:15Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
211,equals => equal doesn't have useful stack trace,"QUnit's new equals=>equal deprecation provides a stack line inside of QUnit, not in the test.",wycats,NONE,2012-03-06T21:56:23Z,2012-03-07T10:35:46Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
212,No Globals not working in Opera,"When using qunit with opera the noglobals option is generating failures:
Introduced global variable(s): test-output6, test-output7, test-output8, test-output9Source:        ok( false, ""Introduced global variable(s): "" + newGlobals.join("", "") );
Opera version 11.61
Build 1250
Linux x64",paul999,NONE,2012-03-07T12:58:39Z,2012-05-04T09:47:47Z,True,5.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
213,Keep hide-passed state when clearing session storage,Currently the hide-passed-tests checkbox gets cleared when all tests pass. Need to exclude that particular key from clearing.,jzaefferer,MEMBER,2012-03-07T18:40:42Z,2012-03-10T14:16:00Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
215,Add possibility to add category to a test/module,"If a string category option would be added to the test and module options, it would be possible for R# and other test runners to group QUnit tests together with existing NUnit (or other) tests.",ThomasArdal,NONE,2012-03-09T08:05:29Z,2012-03-10T17:57:45Z,True,6.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
217,"raises() should call ""block"" function with `this` ","The raises() test function's first argument, ""block"", does not have the context of the test environment. This is confusing for many, if you use the setup to attach classes to this, but can not then access it from the raises() ""block"". Consider the following code:
module('My module', {
    setup: function() {
        this.myfunciton = function() {
            throw new Error('oops');
        }
    }
});

test('Test myfunction raises an error', function() {

    raises(function () {

        this.myfunction();

    },
    /Error\: oops/,
    'Myfunction raises ""oops"" error');

});
The above code will not work, because the anonymous function inside raises (the ""block"" argument) has a this of window.
Proposed Solution:
Change raises() call to block() (line 374) to block.call(config.current.testEnvironment)",keithamus,CONTRIBUTOR,2012-03-16T10:58:29Z,2012-03-21T16:37:56Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
220,"Modify ""Running..."" to display test name","When running large, long running test suites in ""Hide passed tests"" mode, it would be useful to see the current test name being run.
use case: jQuery, running tests on IE6,7,8
example:
""Running: jQuery.ajax() - success callbacks (late binding)""
If interested in this, feel free to assign to me",rwaldron,CONTRIBUTOR,2012-03-22T15:38:32Z,2012-03-27T15:15:30Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
222,Fix logo for QUnit (font inconsistency),"QUnit has had a jQuery-style logo as icon for a long time now, that's OK. But I couldn't find any with the correct text and perhaps tag line. The first time I saw the name composed next to it was on the new website, but that looks out of place:
 


Would be nice if someone could create a Vector graphic with the QUnit name next to it in the right font. And some kind of tagline perhaps, not sure if there is one (or just leave it off..).",Krinkle,MEMBER,2012-03-22T17:35:14Z,2012-07-26T14:34:39Z,True,27.0,,7.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
223,"equal(0,'0','Should not be equal!'); ","The test
equal(0,'0','Should not be equal!');
passes, which in my view it shouldn't since a string can never be equal to a number.",kbruneel,NONE,2012-03-23T22:47:25Z,2012-03-23T22:52:15Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
224,Test,,BlackflagSDKtesting,NONE,2012-03-27T18:33:45Z,2012-04-03T10:07:37Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
226,"Allow calls to ""expect"" within a single test to be cumulative","Right now it hurts modularity that it is not possible for a test function to call various subfunctions which each make their own separate calls to ""expect"" along with issuing some assertions. Forcing the user to push the ""expect"" count to top level makes test cases fragile - it would be helpful if several calls to ""expect"" within a single test case were cumulative, rather than the last one replacing the total count.",amb26,CONTRIBUTOR,2012-04-09T07:04:01Z,2012-08-17T11:50:34Z,True,13.0,,4.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
228,"Deprecate global variables, group assert methods","Many reasons:

Easier to extend by third parties (e.g. to implement a strict assertTrue, lt (less then) or gtOrEq (greater than or equal to) - no clashing names with utility functions and callback stuff.
Makes the API more mobile and environmental friendly (e.g. issue #190)
Easier to add support for in linting applications (only 1 global)

I propose something along the the lines of:

QUnit.group
QUnit.test
QUnit.assert.equal

maybe ability shorten to this.equal inside a test() ?",Krinkle,MEMBER,2012-04-11T18:00:21Z,2012-05-16T11:09:18Z,True,7.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
230,Async tests with concluding assertions,"It would be great, if i could run concluding assertions in asynchrounous tests.
Something like:
var x = 0;
stop(2);

setTimeout(function(){ x++; start(); }, 5);
setTimeout(function(){ x++; start(); }, 5);

concludeWith(function(){
   equal(2, x, ""both timeouts occured"");
});

What do you think?",lcorneliussen,NONE,2012-04-13T11:29:31Z,2012-05-04T09:36:56Z,True,5.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
233,How to test for an exception thrown in an asynchronous function,"I would like to understand if (and how) it is possible to use QUnit to test for an exception that is supposed to be thrown in an asynchronous function.
Obviously the example I prepared in http://jsfiddle.net/qHwnZ does not work as expected because QUnit executes the test before the asynchronous has invoked the error callback but would very much like to understand if this kind of test is generally possible and what the proper approach might be.",doberkofler,NONE,2012-04-16T19:37:27Z,2012-04-17T22:27:01Z,True,13.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
236,Implement event API (on/off/once/emit) ,"While working on the QUnit site and docs last week, it occurred to me that QUnit could benefit from an EventEmitter-esque API for the existing event callbacks. I'd like to open up discussion here, I have an implementation, which is actually just the EventEmitter from node tacked onto the QUnit prototype, with tests. I will push the branch for anyone to experiment with it.",rwaldron,CONTRIBUTOR,2012-04-20T14:09:20Z,2012-05-16T12:36:22Z,True,10.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
237,Incompatibility with require.js,"I notice the following lines in QUnit:
// for CommonJS enviroments, export everything
if ( typeof exports !== ""undefined"" || typeof require !== ""undefined"" ) {
extend(exports, QUnit);
}
However the require variable is also defined by the require.js specification. Thus, ""require"" can exist, but ""exports"" may not. In my code (which depends on just require.js), the above code barfs given that ""exports"" does not exist. My fix is to change the condition to:
if ( typeof exports !== ""undefined"" && typeof require !== ""undefined"" ) {",huntc,NONE,2012-04-29T10:25:41Z,2012-05-02T11:08:20Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
239,Better Phantomjs integration,"The cli-phantom integration (https://github.com/jquery/qunit/blob/cli-phantomjs/test.js) is far from useful, as it is completely unspecified when the evaluated code actually runs. Grunt does some crazy stuff with alert. PhantomJS itself still bundles code that just looks at the markup, providing no assertion-level output.
See also #183",jzaefferer,MEMBER,2012-05-04T10:02:05Z,2012-05-31T16:35:53Z,True,20.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
240,Add Rerun link to placeholders,"When debugging an async test that didn't finish, it would be useful to have the Rerun link for that.",jzaefferer,MEMBER,2012-05-04T14:42:19Z,2012-05-05T10:45:02Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
241,Make Rerun link run only a single test,"Rerun may currently match multiple tests, that's only sometimes useful. Try to change the rerun links to match the test number/id, and extend filter to handle that. That way manual prefix-filtering will continue to work.
See also https://forum.jquery.com/topic/rerunning-a-test-also-reruns-tests-with-similar-names",jzaefferer,MEMBER,2012-05-07T14:06:48Z,2012-05-17T17:38:50Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
243,raises() should use Qunit.push internally,"If QUnit.push turns out to be too inflexible for that, fix it. Might also help to avoid duplicating so much logic in ok().",jzaefferer,MEMBER,2012-05-09T20:43:53Z,2012-05-16T12:18:41Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
246,Provide a link for re-running a single Module / TestGroup.,"Often when developing I just want to focus on the module / group that I am currently writing; I know Qunit support filtering the test-suite by module name via ?filter=[module], but the Qunit runner (HTML) does not provide a direct link to this URL (instead I end up clicking on the 'Re-run' button for a given module's test and then splicing the URL.
It would be great if the Qunit runner could possibly:
a) Be redesigned to more clearly group test cases by module and provide a single 're-run module' button for each module
b) Provide a 'Re-run module' button, and rename the current 'Re-run' button to 'Re-run testcase' to remove any ambiguity.
Thanks for all the hard work on Qunit :)
Jonny.",jonnyreeves,NONE,2012-05-15T09:45:16Z,2012-08-08T12:47:48Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
247,Document assert argument to test() callback,,jzaefferer,MEMBER,2012-05-16T11:10:13Z,2012-06-09T16:47:25Z,True,1.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
249,Text output for 'notXXX' assertions,"For example, when assertion failed
notEqual(x, undefined, ""x must be initialized before using"")
then something like
x must be initialized before using
Expected:   undefined
Source:         at ...
will be output. The sense of test is quite opposite (i.e. expected x is not 'undefined').",DmitrySokolov,NONE,2012-05-22T12:31:10Z,2012-05-31T16:29:12Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
250,Expected Date value is not displayed properly,"FYI,
In the current HEAD version, the expected values are not displayed properly.
QUnit.objectType() returns the value in lower case, while jsDump.typeOf() tests for the bumpedcase version.
This causes all Date values to be seen as an 'object', and therefore be displayed as {}.",vdboor,NONE,2012-05-24T10:19:41Z,2012-05-31T17:42:52Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
251,Improve composite runner,"""Perhaps each suite (composite page) should fire a ""module""/""group"" event and make modules/groups hierarchical, e.g. Mocha's suites?""
""(And the various reporters would also need to be updated to reflect and/or account for the hierarchical changes.)""",jzaefferer,MEMBER,2012-05-27T10:08:52Z,2012-05-31T16:21:52Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
252,Filter enhancement,"filter comparison should be lowercase
a link to filter by module would be nice
group testcases by module in interface?",mihneagiurgea,NONE,2012-05-31T14:59:21Z,2012-06-08T16:00:12Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
253,Explore parallel execution,"Testsuites with a lot of async tests could profit from running tests in parallel, speeding up execution a lot. Needs ideas for implementation.",jzaefferer,MEMBER,2012-05-31T17:19:37Z,2012-08-30T16:08:12Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False
254,Include all relevant stack lines,"Currently source lines include only ever one line, while nested testing code can consist of several stack layers, all of which could be useful. For catched exceptions, the stack is just wrong, pointing at the QUnit source.",jzaefferer,MEMBER,2012-06-04T10:54:56Z,2012-06-04T11:00:37Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
255,Global failure while executing QUnit is ignored by grunt QUnit task,"Syntax errors, amongst other issues that can go wrong with a script under test, cause a ""global failure"" within QUnit and are recorded as a test failure, visibile when viewed from a browser as is any other assertion failure.
The qunit grunt task does not appear to process global failures, erroneously reporting that there are no errors.
To repeat, compare results of viewing test.html in a browser versus executing the grunt.js below (assumes latest qunit.js and qunit.css are in local directory):
grunt.js
/*global module:false*/
module.exports = function(grunt) {

  // Project configuration.

  grunt.initConfig({
    qunit: {
      files: ['*.html']
    },
  });

  // Default task.
  grunt.registerTask('default', 'qunit');
};
test.html
<!DOCTYPE html>
<html lang=""en"">
    <head>
        <meta charset=""utf-8""/>
        <title>Global Failure Test</title>
        <link rel=""stylesheet"" href=""qunit.css"" type=""text/css"" media=""screen""/>
        <script type=""text/javascript"" src=""http://code.jquery.com/jquery-latest.js""></script>
        <script type=""text/javascript"" src=""qunit.js""></script>
        <script type=""text/javascript"" src=""globalFailure.js""></script>
        <script type=""text/javascript"">
            $( document ).ready( function() {
                module( ""A module"" );
                test( ""a basic test example"", function() {
                  ok( true, ""this test is fine"" );
                  var value = ""hello"";
                  equal( value, ""hello"", ""We expect value to be hello"" );
                } );
            } );
        </script>
    </head>
    <body>
        <h1 id=""qunit-header"">Global Failure</h1>
        <h2 id=""qunit-banner""></h2>
        <div id=""qunit-testrunner-toolbar""></div>
        <h2 id=""qunit-userAgent""></h2>
        <ol id=""qunit-tests""></ol>
        <div id=""qunit-fixture""></div>
    </body>
</html>
globalFailure.js
if ( a ){
    alert( ""'a' was true"" );
}",JasonLunn,NONE,2012-06-06T22:18:44Z,2012-06-07T19:51:37Z,True,5.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
257,Globally-executed errors sneak past `raises` in Internet Explorer,"Tests introduced to the jQuery suite by jquery/jquery@7428729 utilize QUnit.raises to detect errors in code passed to jQuery.globalEval for global execution. The exceptions are always ""caught"" (in that they are processed as expected by QUnit.raises) but QUnit's window.onerror handler can still see them in Internet Explorer, causing erroneous test failures.",gibson042,MEMBER,2012-06-08T14:22:13Z,2012-06-08T15:10:50Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
260,config.current not reliable for pushing assertions,"the window.onerror handler in QUnit is using if ( QUnit.config.current ) { .. to determine whether to push an assertion (a failure in this case) directly or to create a new QUnit.test() as wrapper.
However there is two (related) issues:

Test.prototype methods only set config.current = this, it is never unset.
When assertions are pushed into a Test instance after it has finished, they are ignored

This means that in most cases when onerror is run from an asynchronous event that started some time after the test suite has started, the failure will not be recorded (only if it is triggered before the first test(), in which case config.current really is falsy and a test wrapper makes it work).",Krinkle,MEMBER,2012-06-12T14:25:57Z,2012-06-12T16:11:43Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
264,Handling for alert / confirm messages,"Maybe i get it wrong, but currently all my tests stop, if there is a confirm / alert call within the tested function. Is there a possibility to test against them - maybe by providing an object containing already popped up alerts / confirms?",theodorkrampf,NONE,2012-06-14T08:00:45Z,2012-06-14T10:10:48Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
267,"Rename ""assert.raises"" to ""assert.throws""","I  know we are famous for this and it appears justified:

QUnit's assertion methods follow the CommonJS Unit Testing specification, which was to some degree influenced by QUnit. A notable exception is throws (a reserved JavaScript identifier), which is called raises in QUnit.

But I've looked in many places and can't find a source to back this up:

ES5: http://es5.github.com/#x7.6.1
MDN: https://developer.mozilla.org/en/JavaScript/Reference/Reserved_Words

While googling I did find several lists about Java reserved words (which includes throws), but not for ECMAScript.",Krinkle,MEMBER,2012-06-26T19:28:28Z,2012-06-29T04:12:57Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
269,Use classes to collapse assertion groups,"... instead of inline styling.
That way third parties can use CSS to adjust their information according to the current display.",Krinkle,MEMBER,2012-06-26T20:38:30Z,2012-09-30T12:14:09Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
270,"Banner link should ignore ""testNumber"" and ""module""","It already filters out the filter query, but the newly added testNumber and module are not being filtered out yet.",Krinkle,MEMBER,2012-06-26T21:14:18Z,2012-06-26T21:19:12Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
273,Tests may not function correctly if your page takes over 13 milliseconds to load,"The problem
Consider a minimal test case:
QUnit.done(function (result) {
    console.log(""Done"", result);
});

var tests = function () {

    test(""Test 1"", function () {
        ok(true);

    });

    test(""Test 2"", function () {
        ok(true);
    });
};

setTimeout(function () {
    tests();
}, 50);
The .done() function should be fired once, but is in fact is fired three times, once before tests start and once after each of the two tests. This is due to a fundamental assumption that all tests will be loaded either synchronously or within 13 milliseconds, as demonstrated by qunit.js line 365:
// A slight delay, to avoid any current callbacks
if ( defined.setTimeout ) {
    window.setTimeout(function() {
        if ( config.semaphore > 0 ) {
            return;
        }
        if ( config.timeout ) {
            clearTimeout( config.timeout );
        }

        config.blocking = false;
        process( true );
    }, 13);
} else {
Now, you may be thinking this is a non-issue. Who would be crazy enough to wrap their test definitions in a setTimeout? Well, anyone that uses requirejs for a start. Before tests can begin I need to have loaded up the module to test, I need to probably load underscore and jquery, and any other helpful test modules we have created. The require call takes longer than 13 milliseconds, even loading files off a local machine.
This definitely affects the behaviour of .done() as I outline above, and may account for lots of other strange behaviours I have witnessed during my tramatic time using QUnit.
Workarounds
Thankfully there is some hope before a proper fix is found
QUnit.config.autostart = false;

var tests = function () {
    // ...
};

setTimeout(function () {
    tests();
    start();
}, 50);  
But this does mean adding some extra code to every test you write, just in case.
The solution?
Well, probably not to assume that every test file takes 13 milliseconds to run. I can a solution in one of two ways:

Create a better test runner that defaults to more user control.
Document the 13 millisecond rule by erroring whenever a test is defined after the test runner has started. ""Tests defined after x, please use foo() to compensate"".

It's very annoying for a would be developer to have to trawl through code to find this kind of bug. We need QUnit to have the maturity of JUnit, or unit testing in JavaScript is not going to take off like it should.
Related
I have found a related bug that was closed: #108 - The issue is much wider ranging, it just turns out that phones are slow enough to be susceptible for it.",sbrandwoo,NONE,2012-06-27T08:30:35Z,2012-09-30T12:18:58Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
274,Improve urlFilter API and UI,"extend that array to have a key, label and tooltip for each item, have them more self-descriptive
use label and tooltip in the UI
move the checkboxes out of the header, put them somewhere less dominant
document the API

@paulirish am I missing something?",jzaefferer,MEMBER,2012-06-28T17:01:23Z,2012-06-30T22:32:33Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
278,All qunit 1.8.0 tests fail under latest Chrome 20.0.1132.47 on Linux,"Hi
All our tests are failing under Chrome version 20.0.1132.47, on Linux.
The same tests do run fine under Chrome/19.0.1084.56 or Firefox 13.01.
The qunit output is : ""global failure (1, 0, 1)Rerun Script error. Source:  :0"".
I'm not sure why, but it seems qunit is miscounting the tests it has to run, for example, I have 6 tests, but qunit says ""6 of 7 tests passed"", the 7th one - it does not exist - causing the ""global failure (1, 0, 1)Rerun Script error. Source:  :0"".  error.
I've tried the latest git version and it seems there is the same problem.
Is it a known bug ?
Thanks",laurentbackelite,NONE,2012-07-04T14:06:35Z,2012-07-11T12:16:55Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
279,Could you add an error message for constructor differences?,"Could you add an error message for constructor differences?
Example:
test(""test constructors"", function(){
    var obj = {a:1};
    var Obj = function(){
        this.a = 1;
    };
    var Foo = function(){
        this.a = 1;
    };

    deepEqual( new Obj(), obj );
    deepEqual( obj, new Obj() );
    deepEqual( new Foo(), new Obj() );
    deepEqual( new Obj(), new Foo() );
});

All the tests fail with the same error message.
failed
Expected:
{
  ""a"": 1
}

Live Demo:
http://jsfiddle.net/bVpfU/1/
It would be nice if they failed like this.
""Constructors or prototypes are different.""
{
  ""a"": 1
}",LarryBattle,NONE,2012-07-09T01:22:42Z,2012-09-30T17:12:43Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
280,Run QUnit tests on node.js,"I wrote a small wrapper for QUnit tests so they can run on node.js using nodeunit.
Purpose here is to run the test against a js library natively on node.js, not on a headless webkit browser (phantom.js).",thanpolas,NONE,2012-07-10T07:09:48Z,2012-07-11T11:47:48Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
281,run tests in multiple frames,"I need run each test in a sandbox, such as each group of tests runs in an iframe
Benefits:

The ability to run tests in an isolated environment
The ability to run each test suite  independently
Make the test suite not too large and too complex
Easy for writing and maintaining tests by many persons

Somebody already developed this feature http://skysanders.net/subtext/archive/2010/02/26/qunit-test-runner.aspx, but not compatible with the latest version of Qunit.
Hope to support it officially.
Thanks for this great project saving my life on testing!",michalliu,NONE,2012-07-12T10:20:59Z,2012-07-12T13:27:56Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
282,Request: Fast-track npm release,"The QUnit 1.9.0 change log says this:

Change package.json name property to 'qunitjs' to avoid conflicht with node-qunit; will publish next release to npm

I currently use node-qunit in my XRegExp library, which will soon be ready for its 3.0.0 release. As part of this release, I would like to switch from using node-qunit to the official qunitjs. For largely selfish reasons (for myself and anyone else who might hold back project releases in order to switch to qunitjs), I'm hoping that QUnit can release the next version as soon as it's ready as an npm package (assuming this means that QUnit's qunitjs package will be usable on the command line, similar to node-qunit). Presumably, other changes related to better supporting npm and Node.js (such as #190) would also make it into the next QUnit release.",slevithan,NONE,2012-07-12T12:50:54Z,2012-09-30T19:52:46Z,True,11.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
283,QUnit should keep a local reference to Date,"From qunitjs/node-qunit@4252119:
Since modules like node-timekeeper can modify it, node-qunit protects against this. Right now it does that by hacking the following line into qunit.js. Perhaps we should put it in the main repo here?
    Date = window.Date;",Krinkle,MEMBER,2012-07-16T23:29:20Z,2012-07-18T21:01:23Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
284,deepEqual for RegExp should compare `sticky`,"The current implementation of deepEqual for RegExp objects is good. Specifically, it's great that it doesn't compare lastIndex properties. However, the current implementation ignores the /y flag and its corresponding sticky property, which should be added to the list of comparisons.
Aside: ES6 will add support for two new RegExp flags: /y and /u. The /y flag is already supported in Firefox 3+, and has the corresponding property RegExp.prototype.sticky. The /u flag will likely show up with the property name unicode, but since that's not in writing anywhere, at the moment, it would probably be best to wait until the first implementations for /u show up before comparing unicode properties.",slevithan,NONE,2012-07-17T13:44:25Z,2012-08-17T11:46:01Z,True,2.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
286,qunit makes yuicompressor choke (yui treats 'throws' as a reserved keyword),"The qunit API defines a function throws (http://api.qunitjs.com/throws/), but throws is a reserved keyword in JavaScript (http://bclary.com/2004/11/07/#a-7.5.3). One side effect is that qunit cannot be passed through yuicompressor:
> java -jar .../yuicompressor-2.4.6.jar .../qunit/qunit-1.9.0.js 

[ERROR] 490:8:invalid property id

[ERROR] 490:9:syntax error

[ERROR] 528:1:missing ) in parenthetical

[ERROR] 540:35:missing name after . operator

[ERROR] 1932:1:syntax error

[ERROR] 1932:29:syntax error

[ERROR] 1:0:Compilation produced 6 syntax errors.
org.mozilla.javascript.EvaluatorException: Compilation produced 6 syntax errors.
    at com.yahoo.platform.yui.compressor.YUICompressor$1.runtimeError(YUICompressor.java:154)
    at org.mozilla.javascript.Parser.parse(Parser.java:392)
    at org.mozilla.javascript.Parser.parse(Parser.java:337)
    at com.yahoo.platform.yui.compressor.JavaScriptCompressor.parse(JavaScriptCompressor.java:312)
    at com.yahoo.platform.yui.compressor.JavaScriptCompressor.<init>(JavaScriptCompressor.java:533)
    at com.yahoo.platform.yui.compressor.YUICompressor.main(YUICompressor.java:131)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at com.yahoo.platform.yui.compressor.Bootstrap.main(Bootstrap.java:21)",cberzan,NONE,2012-07-18T21:25:31Z,2012-07-18T21:57:14Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
288,Global failures can be filtered out by test-limiting URL parameters,"window.onerror calls QUnit.test to display context-free global errors. QUnit.test no-ops unless the new test passes validTest, which checks against URL parameters like module and testNumber.
This structure can result in global errors being hidden when specific modules or tests were requested, which is rare but possible. Global errors should always be considered valid for display.",gibson042,MEMBER,2012-07-20T20:38:30Z,2012-08-17T11:40:03Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
291,Repeatedly test Async assertions until they pass or the time runs out,"If you have lots of async tests in your application, running your unit tests can be slow. A big reason for this is that the delay on your async tests needs to be larger than the longest reasonable amount of time it could take for the response to arrive.
For example, If I load a list of customers and test that they show up, I need to write an async test that requests the customers, waits five seconds, and then tests to see if they're there. If I tested at 2 seconds, my test might fail 20% of the time.
Better would be a plugin or new qunit method that allows for ""keep trying until it passes or the time runs out"" functionality.
I've taken a stab at this and it works for me so far. I don't think I'll make the time to do an official pull request, but if someone wants to take this the next step, that'd be great. Here's what I have:
My 'plugin':
/*global $, define, qunit, ok, log, setTimeout, stop, start */

define([
    ]
,   function () {

    var me = 'qunit.okTimeframe'
    ,   okTimeframe
    ,   isTimeUp
    ,   tryAssertion;

    isTimeUp = function(startTime, limit){
        return (new Date() - startTime) > limit;
    }
    tryAssertion = function(a, msg, startTime, limit, tryFreq, curTry){

        if ( a() || isTimeUp(startTime, limit) ) {
            log.debug(me + ' the ""'+ msg +'"" assertion looks good or the time is up');
            ok(a(), msg); // Tell qunit about the outcome
            start();
        // Try again later
        } else {
            log.info(me + ' trying the assertion later');
            setTimeout(function(){
                tryAssertion(a, msg, startTime, limit, tryFreq, curTry)
            }, tryFreq * ++curTry);
        }
    }


    /**
     * Takes an assertion, message, and optional timeframe and repeatedly tests the assertion until it either passes, or the time runs out
     */
    okTimeframe = function (assertionFunction, message, timeframe) {
        if (!ok || !stop || !start) {
            log.error(me + ' depends on qUnit\'s methods to function');
            return;
        }

        var timeLimit = timeframe || 10000 // 10 second default
        ,   tryFreq = 500 // How often to test the assertion
        ,   curTry = 0 // Which try are we on?
        ,   startTime = new Date()
        ;

        stop();
        tryAssertion(assertionFunction, message, startTime, timeLimit, tryFreq, curTry);
    }
    return okTimeframe;
});
The tests for my plugin:
/*global $, define, test, module, ok, equal, window, setTimeout */

define([
    './qunit.okTimeframe'
    ]
,   function (okTimeframe) {

    var me = 'qunit.okTimeframe'
    ,   $fixture = $('#qunit-fixture')
    ,   testString = 'pickled peppers'
    ;

    module(me);
    test('Module defined and can check ', function(){
        ok(okTimeframe, 'The method is defined');
        equal(""function"", typeof(okTimeframe), ""It's a function"");
        okTimeframe(function() { return 3 === 3 } , ""Passes when sent '3 === 3'"")
    });

    test('Can handle dom content that changes later', function(){
        okTimeframe(
            function() { return $fixture.text().contains(testString) }
        ,   ""$fixture contains specific content after some time passes""
        );
        setTimeout(function(){
            $fixture.append(testString);
        },  1000 );
    });

    test('Can handle local variables that change later', function(){
        var a = 3
        ,   b = 1
        ;
        okTimeframe(
            function() { return a === b }
        ,   ""a === b after a delay""
        );
        setTimeout(function(){
            b = 3;
        }, 1000 );
    });
});",SimplGy,NONE,2012-07-23T21:37:35Z,2012-08-16T16:37:01Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
294,You will need to install grunt-git-authors to run grunt,I'll have a commit soonish that will clarify that.,dotnetCarpenter,NONE,2012-08-08T18:18:52Z,2012-08-29T16:13:44Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
296,Add module and test-name information to callbacks,"I think it would be useful to add the module and test-name information to callbacks.:

QUnit.log currently only reports the following information actual, expected, message, result, and source. I think it would be useful to add module and testName to this.
QUnit.moduleDone and QUnit.moduleStart don't report any information regarding the actual module that has started or finished. I think it would be useful to pass that information to the callback.
QUnit.testDone and QUnit.testStart don't report any information regarding the actual test that has started or stopped. I think it would be useful to pass that information to the callback.

I apologize if this change has already been made, or if this information can be retrieved some other way.",vivin,CONTRIBUTOR,2012-08-09T00:03:00Z,2012-08-17T12:11:16Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
301,Links to project website need updated,The links in the readme and repository description still point to the depreciated page hosted on jquery.com,admsteck,NONE,2012-08-10T02:42:46Z,2012-08-12T17:14:09Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
303,undocumented api,"notDeepEqual
notEqual
notStrictEqual

are provided by qunit, but not listed in the api documentation. I didn't search for other undocumented features.
edit: they are listed in the old docs.",aeosynth,NONE,2012-08-12T04:58:46Z,2012-08-12T16:39:44Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
304,$( window ).scrollTop( 0 ); at the end of the tests.,"I did a fast look and didn't found anything regarding this. When I am testing my projects qunit does not scroll to the top but remains with the scroll following the last test.
My suggestion is to scroll the window to the top after all tests have been completed and perhaps scroll to the next failed if there is any.",FagnerMartinsBrack,NONE,2012-08-13T20:16:21Z,2012-08-17T12:21:12Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
307,Distinguishing between failed assertions,"I previously submitted a commit where the log callback also provided information about the assertion that failed. Perhaps the way I went about implementing wasn't the best and could warrant more discussion. My rationale was as follows:

The assertion-type provides information about the type of assertion that was violated. This is pretty useful when doing automated tests with PhantomJS and QUnit.
Currently the throws assertion has an expected value of null. This is because the expected value can be a regular expression. When reporting the results of tests, we can tell whether the test failed or not by examining the result property from log. However, the decision to show expected and actual values (which don't apply in the case of throws when using a regular expression) cannot be safely made by simply examining the expected value and checking if it is null. There can be cases where null is an actual expected-value. Instead, it would be safer and more obvious if information was provided about the actual assertion that failed, and then decide whether to show the expected and actual values.
This problem also exists in the current QUnit reporting When a throws assertion that expects an exception fails (and it uses a regular expression), the expected value is shown as null, which is not correct. In this case, if we had information about the type of assertion that failed, we could examine that and decide to not show the expected and actual values if the assertion was a throws assertion.

Perhaps we don't need something like an AssertionType public property for QUnit. We could simply provide the name of the test method that failed and that should be sufficient. The reason I originally used an AssertionType public property was so that it would be easily maintainable; we could deprecate the name of a test method and not have to go through and search for all usages of that name; we could simply simply change the method name for AssertionType. Since we are using that and not raw strings, the change would be effected everywhere. Perhaps this property can be an internal/private property to QUnit.
Jörn suggested a workaround where you could simply add that information to the message returned by throws. While it works, I think the solution is slightly ad-hoc and not as robust as an actual property that provides information about the assertion that failed.
Thoughts?",vivin,CONTRIBUTOR,2012-08-16T17:43:04Z,2012-09-30T20:07:39Z,True,9.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
308,Running manual tests with grunt?,"Not very familiar with node.js or grunt, but how feasible is it to run the manual tests as part of grunt? Would some solution that uses PhantomJS (perhaps) to run the QUnit tests in ./tests be feasible? I don't mind trying to get this accomplished.",vivin,CONTRIBUTOR,2012-08-16T22:48:42Z,2012-08-16T22:51:44Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
309,QUnit.config.autostart = false and using QUnit.start() inside of $(document).ready(),"If you set QUnit.config.autostart = false and run QUnit.start() inside of jQuery's $(document).ready() the tests fire before QUnit.load() is fired.
Here's the fiddle (http://jsfiddle.net/rPGZ2/6/) and the snippet if code:
QUnit.config.autostart = false;

test(""No semaphore on sync test."", function() {
    ok(!isNaN(QUnit.config.semaphore), ""The semaphore should not be NaN"");

    $('#qunit-log').text('Semaphore: ' + QUnit.config.semaphore);        
});

asyncTest(""No semaphore on async test."", function() {
    setTimeout(function() {
        ok(!isNaN(QUnit.config.semaphore), ""The semaphore should not be NaN"");
        stop(10000);
        start();
    }, 13);
    setTimeout(function() {
        ok(true, ""This should be in context, but it's not"");
        start(10000);
    }, 1000);
});

$(document).ready(function() {
    /* QUnit's load event is also attached to the window load event.
       However jQuery's ready event is fired before QUnit's load event,         therefore this start() function is called before QUnit's load
       event fires. The semaphore variable is declared in the load event.
    */
    start();
});",DragonDTG,NONE,2012-08-23T15:58:42Z,2012-09-30T20:14:10Z,True,8.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
312,Would there be any interest in transferring/forking qunit-mock to jquery?,"Hi,
We have a repo that is no longer actively maintained for qunit-mock, which seems to have a few users.
As we don't actively maintain it, would there be interest for jquery to fork it, and we can point people to the community repo under jquery?
Cheers,
Matt",matthewford,NONE,2012-08-28T14:23:23Z,2012-08-29T16:01:35Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
313,The release 1.9.0 available from the website runs only the first test.,"If there are two tests defined as
test(""a"", ...);
test(""b"". ...);
only 'a' will run.",lokebharti,NONE,2012-09-03T07:42:44Z,2012-09-03T07:55:42Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
314,"QUnit should be semaphore-clean, config.semaphore < 0 should be an assertion error","Currently, QUnit will more than once call start while the semaphore is already 0, entering a config.semaphore < 0 branch which resets it to 0.
The issue here is that this may (and does) potentially hide test failures especially in complex async cases, where the next case may partially make up for the current one and the like, ending up with a test failure for a completely unrelated piece of code.
I just finally fixed an issue of intermittent failure of a test case, where a number of tests were not obviously incorrect but randomly failed within the suite.
The problem turned out to be in the previous test file (the tests are split by module across multiple JS files, all run through the same html file) in which a test which should have been asynchronous (and correctly tried to call start) didn't stop the runner (via asyncTest, the async argument to test or stop). While trying to understand what failed where (the first symptoms that there was something screwy in the async running was that a test started before an other one ended), I realized that although QUnit has a flag to ensure every call to stop is matched to a call to start, it also ignores start-ing an already started runner. For the case above, had QUnit generated some sort of error I'd have realized sooner that I had mismatched stop/start calls.
Now I'm not putting the fault of qunit, it was quite clearly my own oversight, but I do believe there would be value in ensuring a coherent usage of the semaphore.",masklinn,NONE,2012-09-05T15:17:46Z,2012-09-30T20:39:15Z,True,5.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
315,deepEqual should not crash on jQuery created objects,"In Firefox 15 stable release (and also in the Nightly 18 version) I get a fail message on deepEqual assertions trying to compare jQuery objects like deepEqual( $( '<h3/>' ), $( '<h3/>' ) );
The fail message is: Died on test #1 @http://jsbin.com/oqiquw/1/edit:16 : toString.call(...).match(...) is null The error source:.objectType@http://code.jquery.com/qunit/qunit-git.js:760`
That works on Chrome (canary), Safari and Opera (next).
It can be a Firefox specific error. If it isn't know yet I can try a code fix and patch it.
Example:
http://jsbin.com/oqiquw/1/edit

Updating:

It works on Firefox 12.
It's not working on FF 14 and above
It doesn´t work on Safari 5.1.7, but it works on the new version of Safari
It doens´t work on Internet Explorer 9 (neither 7 and 8 via IE9 devTools)
It doesn´t work on iPhone´s Safari Browser (newest stable release)",leobalter,MEMBER,2012-09-07T17:15:25Z,2012-10-01T10:13:21Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
316,QUnit + Require : stats fail with undefined,"Running a simple test using QUnit + Require causes the following exception.  All the tests run and the results page updates, except the following exception gets thrown.
EXCEPTION:
Uncaught TypeError: Cannot read property 'all' of undefined qunit-git.js:1102
done qunit-git.js:1102
process qunit-git.js:1285
QUnit.start.config.blocking qunit-git.js:38
CAUSED BY:
<!DOCTYPE html>  
<html>  
<head>  
  <meta charset=""utf-8"">
    <title>QUnit Test Suite</title>  
     <link rel=""stylesheet"" href=""qunit-git.css"">  
     <script data-main=""main"" type=""text/javascript"" src=""libs/require.js""></script> 
     <script src=""libs/qunit-git.js""></script>  
  <script>
    QUnit.config.autostart = false;
    //QUnit.config.stats = {};
    require(['firstUse/example_test'], function (one) {
        QUnit.start();
    });
    </script>

</head>  
<body>  
 <div id=""qunit""></div>

</body>  
</html>",franklinwise,NONE,2012-09-14T19:24:59Z,2012-09-14T19:49:06Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
317,Assertion helper for same properties but (strictly) different constructors,"There was already an issue targeting the same problem for arrays: #129
For arrays, this seems to be fixed (although there was no explicit fix mentioned in the issue) but the issue also applies for plain objects. This makes it complicated to move the test markup into an iframe for sandboxing.
I think one part of the ""problem"" is that deepEqual() suggests that only the properties of the objects are compared but in fact it also compares the functions (and they have to be identical).
It should really be document in the API documentation of deepEqual that the functions are compared because this can lead to very subtle failures. Consider this example:
function factory() {
    function F() { this.test = ""foo""; }
    return new F();
}

deepEqual(factory(), factory(), ""Similar objects fail!?!"")
I would suggest to have two functions: keep deepEqual() as it is (just extend the documentation, see above) and add another function (something like deepPropertiesEqual()) which compares only the properties (array entries).",j-ulrich,CONTRIBUTOR,2012-09-18T08:48:03Z,2012-11-15T09:45:57Z,True,15.0,,6.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
318,"Composite: Raises ""global failure"" in Opera","Running multiple test files using composite raises a ""global failure"" in Opera (I am using Opera version 12.02 on Windows):
Uncaught exception: TypeError: Cannot convert 'iframeWin.QUnit' to object
in qunit-composite.js, Line 37

To reproduce, simply run the composite-demo-test.html in Opera.
The problem seems to be that the load event is fired shortly after the iframe is inserted into the DOM but at that time, the src attribute is still empty, hence, no QUnit object exists in the iframe's window object. The load event is then fired again when the src attribute has been changed and the test file was loaded.",j-ulrich,CONTRIBUTOR,2012-09-18T21:18:08Z,2012-09-27T15:29:24Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
322,Rename `throws`,"throws is an ES3 reserved word. This line causes an error in some older engines, including NarwhalJS: https://github.com/jquery/qunit/blob/e34ffb61488459f6823ded82e19865ba4b46e2ed/qunit/qunit.js#L499
See http://mothereff.in/js-properties#throws; either rename throws into something else, or quote the property name. (Renaming is probably safest though.)
To fix this, this line will need to be changed as well: https://github.com/jquery/qunit/blob/e34ffb61488459f6823ded82e19865ba4b46e2ed/qunit/qunit.js#L549 Use ['throws'] instead of throws here, or just rename the property to something that has never been a reserved word.",mathiasbynens,CONTRIBUTOR,2012-09-20T20:38:18Z,2012-09-24T08:52:54Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
324,strictEqual should not have to exist,"I've just run into what must be a common error of using equal() when I really wanted strictEqual(). My question is, why do we even have the equal() method? Why would I ever want to assert that my code is giving /almost/ the right values out of it?
In my opinion strictEqual should be ditched, equal() should use === to actually assert what we want it to assert, and anyone who wants a fuzzyEquals() can use ok() or perhaps you can implement that instead.",sbrandwoo,NONE,2012-09-24T08:43:32Z,2012-09-26T18:12:15Z,True,13.0,,7.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
325,"When setup fails with a string exception, nothing useful is printed","Reference QUnit code:
try {
    this.testEnvironment.setup.call( this.testEnvironment );
} catch( e ) {
    QUnit.pushFailure( ""Setup failed on "" + this.testName + "": "" + e.message, extractStacktrace( e, 1 ) );
}

When setup fails due to an exception being thrown, QUnit uses the above code to print out the message and cause to the user. When the exception is of the form:
throw ""This is an error message"";

then nothing useful will be printed because e.message and e.stack will be undefined. It would be nice to check if e is a string and provide a suitable fallback, to support this form of exceptions.",sbrandwoo,NONE,2012-09-24T09:40:12Z,2012-09-26T18:11:37Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
326,Create an inconclusive assertion,"The inconclusive assert would be used as follows:
test(""My test"", function () {
          inconclusive();
          // or with message        
         inconclusive(""The submit click handler needs a test case"");
});
When run the, the test would display in (say) orange (compared to red for fail and green for pass) , with the provided message or the default ""Test pending"" message.
We've hacked this together to work for us, here is a snippet that adds a class for the styling.
li.className = assertion.result === null ? ""inconclusive"" : (assertion.result ? ""pass"" : ""fail"");
It would be great if this can be included in the API.
It has proven very useful for creating place-holders for pending tests, and also for frameworks on top of QUnit that iterate an object and flag untested methods.
Thanks.
Noel",NoelAbrahams,NONE,2012-09-24T10:06:31Z,2012-09-30T20:50:47Z,True,5.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
328,Incompatibility with latest version 2.1 of requirejs ,"The error message like this:

Called start() while already started (QUnit.config.semaphore was 0 already)

When I replace requirejs  with an old version (2.0.6), the test run ok.",,NONE,2012-10-06T09:22:37Z,2012-10-07T23:11:18Z,True,6.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
329,Minification,Can you provide a minified version of the qunit.js and qunit.css files in the repo and over the CDN? I don't like to minify qunit for myself every time a new version comes out :-).,alawatthe,NONE,2012-10-07T09:12:44Z,2012-10-08T09:55:42Z,True,3.0,,3.0,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
330,Qunit can't be minified by YUI Compressor,"throws is a keyword that needs to be in quotes, probably not the most urgent fix ever, but a nice to have =)
Diff:
         QUnit.push( expected !== actual, actual, expected, message );
     },

-    throws: function( block, expected, message ) {
+    'throws': function( block, expected, message ) {
         var actual,
             ok = false;

@@ -546,7 +546,7 @@ extend( QUnit, QUnit.assert );
  * @deprecated since 1.9.0
  * Kept global ""raises()"" for backwards compatibility
  */
-QUnit.raises = QUnit.assert.throws;
+QUnit.raises = QUnit.assert['throws'];",msinformation23,NONE,2012-10-10T21:37:01Z,2012-10-10T22:00:23Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
331,Make async testing more convenient and reliable,"Our stop()/start() API isn't the greatest. Yehuda had some ideas for making that more convenient, outlined here: https://gist.github.com/2138c7bf20da83e823e8
Worth noting as well: nodeunit passes in a test object to each test, where the test has to call test.done() in the end. Each test gets its own instance, so there's no risk of one async test bleeding into another, like it currently can happen in QUnit. We should look into providing something similar for QUnit.",jzaefferer,MEMBER,2012-10-17T15:53:30Z,2014-02-13T23:53:54Z,True,5.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False
332,"""stop the world"" assertion","Feature request from Yehuda: An assertion method that, when it fails, stops the entire testsuite, preventing any further tests to run.
Usecases:

jshint running in testsuite could stop any further tests from running
enviroment test could prevent tests to run, e.g. don't run anything if page is loaded via file: protocol",jzaefferer,MEMBER,2012-10-18T15:17:12Z,2014-02-13T22:22:45Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False
335,Show diff only when it helps,"If the length of the diff is just the length of expected.length + actual.length, its likely to be useless. Its only useful if it can reduce the input.",jzaefferer,MEMBER,2012-10-22T13:31:38Z,2015-05-15T16:46:53Z,True,1.0,,1.0,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
336,"Summary counts assertions but mentions ""tests""","""0 tests of 0 ran"" is misleading. It should either count the tests, or say ""assertions"".",jzaefferer,MEMBER,2012-10-22T16:48:14Z,2012-11-15T11:38:22Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
338,check for globals not working for alert stub,"module(""Stubbing"", {
    setup: function() {
        this.old = alert; 
    },
    teardown: function() {
        alert = this.old;
    }
});
test(""stub"", function() {
    alert = function( s ) {
        document.getElementById(""qunit-fixture"").innerHTML = s;
    }

    alert(1);

    strictEqual( document.getElementById(""qunit-fixture"").innerHTML, ""1"", ""That's it!"" );

});​
Run this code and then click in ""check for globals"", it says it introduced the global variable alert.
I am not sure if this is a bug but since I replaced the old stubbed function I suppose the expected is that qunit don't detect alert as a new variable.
I can't get this working in jsfiddle (looks like it doesn't support querystrings) http://jsfiddle.net/5aqu3/1/",FagnerMartinsBrack,NONE,2012-10-24T18:33:15Z,2012-10-24T20:01:02Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True
339,"""throws"" shows expected value as ""null"" instead of actual Error type","As a demonstration, I have the following code:
throws(
    regula.bind, 
    regula.Exception.IllegalArgumentException, 
    ""@Selected cannot be bound to a form element""
);

The method throws a custom Error object of type regula.Exception.BindException so the expected value should be regula.IllegalArgumentException. However QUnit displays null.

This is on version 1.10.0. If this has been fixed, please disregard.",vivin,CONTRIBUTOR,2012-10-25T23:58:13Z,2012-10-26T17:58:41Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
340,Wording for negated assertions is confusing,"Below is sample output from a passing notEqual() test:

key icon is visible when activeKeys is empty
Expected:
""none""
Result:
""inline""
Diff:
""none"" ""inline""

The way this is written, it implies that ""none"" was expected when in fact, we are expecting anything except ""none"".",kcgolden,NONE,2012-10-26T20:44:32Z,2015-06-18T09:33:42Z,True,8.0,,5.0,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False
341,assert should not be a global,"9491c02 refactored assertion helpers from QUnit.* into QUnit.assert.* passed as local variable in the QUnit.test callback.
But since it puts itself on QUnit before the extension of window, it itself became a global variable as well.",Krinkle,MEMBER,2012-10-29T19:44:09Z,2012-10-29T21:12:23Z,True,0.0,,1.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
342,qunit-canvas tests failing on FF 16,8 of the 16 QUnit Canvas addon tests (the ones that set the fillStyle alpha value to 0.5) fail the pixelEqual test with an actual alpha value of 128 when 127 was expected.  All tests pass on Chromium-derived 22.0.,dksmiffs,CONTRIBUTOR,2012-11-01T18:40:05Z,2012-11-06T11:29:27Z,True,1.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
344,Measure performance (duration) of each test,"QUnit shows a convenient ""Tests completed in  milliseconds"" upon suite completion, but doesn't break that down to individual tests/modules.
I'd like to get the jQuery suite completing locally in under a minute, and having timing data available on the <li> output for each test would help tremendously.",gibson042,MEMBER,2012-11-03T04:34:28Z,2012-11-17T14:52:32Z,True,1.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
346,Leaking urlParams and isLocal,"QUnit currently exports two accidental globals, urlParams and isLocal, probably in both cases due to execution ordering.",jzaefferer,MEMBER,2012-11-06T14:18:58Z,2012-11-15T09:56:46Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
347,Add assertion to run after loading source to look for globals,"Something like this:
<script src=""punycode.js""></script>
<script>QUnit.newGlobals('punycode');</script>
If punycode.js exports more than just a punycode window property, the assertion would fail.",jzaefferer,MEMBER,2012-11-06T14:23:21Z,2014-02-13T22:42:05Z,True,4.0,,2.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False
348,Confusing line breaks in object diff,"values should start at the same horizontal offset or be shown in sequence. Current visual is confusing, as it looks like the value could be a key or something.",rodneyrehm,CONTRIBUTOR,2012-11-06T15:26:58Z,2015-03-26T16:19:36Z,True,5.0,1.18.0,3.0,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
349,Alias module to suite,"In Nodejs the module variable is already taken and causes issues when using qunit. Would be nice for ""module()"" to have an alternative name like ""suite()"".
You can see an example here: qunitjs/node-qunit#65 (comment)",bendangelo,NONE,2012-11-08T15:43:47Z,2012-11-08T16:25:07Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
350,QUnit.begin should provide the total number of tests,"For tools that show test progress its useful to have the total number of tests up front. Unlike number of assertions, we can actually provide the number of tests.
See karma-runner/karma#156 (comment)",jzaefferer,MEMBER,2012-11-08T19:23:30Z,2014-05-05T17:18:26Z,True,16.0,pre-2.0,5.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
351,testDone should provide aggregated assertion results,"As far as I understand right now the only way to retrieve the list of failed asserts and stack traces for them is to access QUnit.config.current.assertions. Also, it would be nice if assertions.message would not contain HTML. This would be helpful for automated tools to report stack traces.",ilyavolodin,NONE,2012-11-10T02:43:29Z,2017-03-31T04:13:44Z,True,4.0,JS Reporter,3.0,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False
352,Unsafe JavaScript attempt to access frame with URL,"Google Chrome (Version 22.0.1229.94) produces this error when testing cross-domain iframe  (QUnit v1.10.0)
Unsafe JavaScript attempt to access frame with URL http://www.iana.org/domains/example/ from frame with URL file:///home/user/qunitbug.html. Domains, protocols and ports must match. qunit-1.10.0.js:1207

extractStacktrace qunit-1.10.0.js:1207 
sourceFromStacktrace qunit-1.10.0.js:1241
QUnit.test qunit-1.10.0.js:343
(anonymous function) qunitbug.html:20
p.event.dispatch jquery-1.8.2.min.js:2
g.handle.h jquery-1.8.2.min.js:2

How to reproduce:
Create a file with the following html code below and open it in a web-browser:
<!DOCTYPE html>
<html>
<head>
<meta charset=""UTF-8"">
<title>Demo for qunit test cross-domain iframe bug in Chrome</title>
<script src=""http://code.jquery.com/jquery-1.8.2.min.js""></script>
<script src=""http://code.jquery.com/qunit/qunit-1.10.0.js""></script>
</head>
<body>

    <div id=""qunit""></div>
    <div id=""qunit-fixture""></div>

    <script>
        $(function(){
            $(""<iframe>"", {
                src: ""http://example.com""
            }).appendTo(""body"").load(function(){
                var iframe = this;
                test(""foo"", function(){
                    ok(true);
                });
            });
        });
    </script>
</body>
</html>

This does not happen in Mozilla Firefox! On Firefox it passes without issues even when run on an http server on localhost.",gsuess,NONE,2012-11-11T02:21:32Z,2013-06-19T10:43:10Z,True,7.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
354,Deprecate QUnit.reset,"People shouldn't stuff a bunch of tests into a single one and then use QUnit.reset() inbetween. If you need the reset, use a separate test.",jzaefferer,MEMBER,2012-11-15T15:55:26Z,2013-06-19T10:06:37Z,True,2.0,1.12,1.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
356,Deprecate expect argument from test() and asyncTest(),Use expect(x) or assert.expect(x) instead.,jzaefferer,MEMBER,2012-11-25T22:39:11Z,2016-04-18T16:09:51Z,True,5.0,2.0,4.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
357,Disable try-catch for an individual test,It would be helpful to disable the try-catch logic for an individual test and not only for all tests in the given markup.,doberkofler,NONE,2012-11-26T08:17:35Z,2013-06-19T10:40:00Z,True,7.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
358,start() may happen before init(),"Using Require.js we've run into a funny issue. Apparently QUnit.init (via window.load) is triggered after reqired resource have been loaded. Since QUnit.config.autostart = false; is in play, we call QUnit.start() in the master test-file. (as suggested in this Example).
The quickest solution @jzaefferer and me found is diverting calls to start() unless QUnit is initialized. Achieve with

add QUnit._initialized = true; to QUnit.init();
prepend the following to QUnit.start():

if (!QUnit._initialized) {
    // defer execution until the thing has initialized
    setTimeout(function() {
        QUnit.start(count);
    }, 50);
    return;
}
@jzaefferer also voiced concerns this could break on headless browsers. (I have no clue what that break could be…)",rodneyrehm,CONTRIBUTOR,2012-11-28T12:12:15Z,2012-12-17T19:35:01Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
363,Diff only leafs for (big) objects,"When comparing big object structures, the current diff output has too much overhead. Comparing each leaf and showing the path, actual, expected (and diff) for just the leave would be much more useful. It won't replace the regular diff, e.g. comparing (long) strings wouldn't profit from this.
In other words, we'd have to find the properties that are different, serialize and diff those, and not output the rest, or at least compress it.",jzaefferer,MEMBER,2012-12-06T17:17:25Z,,False,5.0,,4.0,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False
364,Improve diff implementation,"Potential diff implementations:

https://github.com/kpdecker/jsdiff
https://github.com/cemerick/jsdifflib (Timo recommended this one, using it by monkey-patching already)

Related tickets: #335, #348, #478, #363, #483",jzaefferer,MEMBER,2012-12-06T17:17:41Z,2015-05-18T15:30:29Z,True,22.0,,10.0,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,False
365,oldIE don't respond to module picker selection changes,"QUnit is supposed to reload with the correct value of URL parameter ""module"" when I interact with the upper right drop-down, but this isn't working in IE6-8.",gibson042,MEMBER,2012-12-10T03:52:06Z,2012-12-10T09:24:15Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
369,oldIE don't respond to urlConfig checkbox changes,"This is the same as #365, but for the checkboxes.",gibson042,MEMBER,2012-12-16T16:47:21Z,2012-12-16T22:39:09Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
371,Indicate test suite progress,"It'd be nice to have some indication (however imprecise) of test suite progress. My idea is to turn the banner into a progress bar, but other options would be equally valuable.",gibson042,MEMBER,2012-12-17T01:11:25Z,2014-02-13T22:57:00Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False
374,Implement Assertion constructor with test context,"To fix #331, and generally make our code more scaleable and flexible.
Each test() will be given an instance of Assertion which has an internal reference back to the Test object, so that they can easily be called asynchronously.
In addition to the assertion helpers, it could have the following built-in to the context based system as well:

async()
done()
expect()
.not (instance of itself with internal reversal)",Krinkle,MEMBER,2012-12-17T16:54:14Z,2014-06-24T15:27:10Z,True,3.0,2.0,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
375,Better stack traces for exceptions in async tests,"Currently, if an exception happens after stop() was called in a test (but before start()), QUnit is smart enough to associate the error with the test.
However, the output associated with the test does not provide file/line of the test itself.",tomdale,NONE,2012-12-17T22:42:08Z,2014-02-13T22:49:50Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False
376,testing a series of events,"It would be nice to have a more semantic declaration of asnyc tests, that are comprised of multiple async tests. What I'm doing right now:
test(""foo"", function() {
  stop(3);

  foobar.on(""first"", function(data) {
    // some assertions
    start();
  });

  foobar.on(""second"", function(data) {
    // some assertions
    start();
  });

  foobar.on(""third"", function(data) {
    // some assertions
    start();
  });

  foobar.trigger();
});
what I would like this to change to is something along the lines of
stepTest(""foo"", function() {
  steps(3);

  foobar.on(""first"", function(data) {
    // some assertions
    step(1, ""first step"");
  });

  foobar.on(""second"", function(data) {
    // some assertions
    step(2, ""second step"");
  });

  foobar.on(""third"", function(data) {
    // some assertions
    step(3, ""third step"");
  });

  foobar.trigger();
});
steps() would pretty much work like stop. step(num, message) works like start, except that it additionally asserts the sequence (1, 2, 3). This allows better error messages than ""test xyz timed out"" (and you have to figure out which step failed yourself).",rodneyrehm,CONTRIBUTOR,2012-12-18T09:52:39Z,2014-02-13T22:50:56Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False
377,Update to grunt 0.4,Maybe this is something @JamesMGreene wants to help with?,jzaefferer,MEMBER,2012-12-18T12:35:14Z,2013-03-08T15:37:53Z,True,2.0,,3.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
378,Split the codebase,"Up for discussion: Currently the QUnit code base is just a single js file (with companion css). That makes it possible to include QUnit as a submodule, from tag or latest, no need to build anything. It also makes maintenance kind of a pain, as we're now dealing with 2k+ LoC in a single file. Finding things isn't easy. A good bunch of code lends itself to be moved to separate modules, like QUnit.eqiv or QUnit.jsDump. That would make cleanup of the remaining pieces a lot easier.
When working on QUnit, we could use grunt watch to trigger a build for every change, similar how development on jQuery Core works.
As for usage of the QUnit ""binary"":

jQuery Core uses QUnit as a submodule: That could be replaced by npm install qunitjs and referencing node_modules/qunit/ directly or copying the files to whereever they're supposed to live. npm modules can contain ""binaries"", so whatever the build outputs can be published through npm, without commiting it to Git.
jQuery UI and jQuery Mobile include QUnit as copies in its externals folder. That is updated manually by copying over the files, so that shouldn't be a problem at all.

What else is there that we need to take into account?",jzaefferer,MEMBER,2012-12-18T12:43:50Z,2013-10-25T17:09:54Z,True,12.0,2.0,6.0,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
379,Escape text,There's a whole bunch of places where we build html strings by hand and don't escape test names or module names.,Krinkle,MEMBER,2012-12-20T02:04:54Z,2012-12-20T02:11:33Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
380,Show contents of text nodes in jsDump.node,"While writing unit tests for dom traversal I noticed that text nodes get dumped as <#text></<#text> (based on the nodeName for TextNode's [spec]).
The nodeValue (text content) is not dumped. This can make it rather difficult to figure out what went wrong as the jsDump outputs are the same for ""Actual"" and ""Result"" (whereas equal, comparing them by reference, returns false)",Krinkle,MEMBER,2012-12-20T06:02:33Z,2012-12-20T06:24:00Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
381,"Show attributes besides id, name, class in jsDump.node","The way we dump nodes hasn't changed since 2008 (when jsDump was first introduced, in 4c7c688). It hardcodes 3 attributes, which it then reads from the properties (not attributes).
None of that makes any sense. We should instead use the attributes property, loop through and dump those.
IE6 has the odd behaviour of including all supported attributes (even ones not explicitly set) through this.
Though it doesn't matter for the test result, to keep the diff clean we'll want to filter out empty values for the above case.",Krinkle,MEMBER,2012-12-20T06:05:41Z,2012-12-20T06:24:00Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False
383,Fixed markup,"I've got into a situation where events are bound to certain element 'onDOMReady' without using delegate. I want to test some event behavior by triggering the event in the input.
I am not sure how wrong I am by relying on this kind of behavior, but I can't find another way around so:

I create a custom markup <div id=""custom-markup""></div>.
Set the same #qunit-fixture styles.
Create the needed markup, let's say an input <input type=""button"" id=""myInput"" />
The event 'onDOMReady' binds a click event to the element
I create a custom resetMarkup to be called on each required teardown which resets the modifications that any test could be done in the HTML

With that use case in mind I would suggest a feature that:

Allows a custom markup (maybe #qunit-fixed) to be permanent (not to be removed as #qunit-fixture)
Allows this custom markup to be atomic and any event/modifications to be removed (except events set before the first module call)

Any thoughts?",FagnerMartinsBrack,NONE,2012-12-24T13:16:41Z,2013-01-03T22:21:00Z,True,7.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False
385,Implement multi-value support for urlConfig UI,"For testing the jquery-migrate plugin we wanted this:

At the moment it's implemented by the jquery-migrate unit tests injecting the markup into the QUnit toolbar after it initializes.
Is there a clean way to do this as a QUnit plugin, or would it perhaps make sense to add to QUnit itself?",dmethvin,NONE,2012-12-27T17:34:26Z,2014-01-29T15:44:06Z,True,7.0,,5.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
386,html entities,"If equal method's first argument or second argument is html text, equal method put html.
For example, result equal($(""#a"").html(),true,""ok"") submit.",pandanoir,NONE,2012-12-30T14:52:08Z,2013-02-08T07:01:50Z,True,7.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False
388,Incorrect code in documentation,"On this page in the documentation: http://api.qunitjs.com/QUnit.moduleDone/
The code snippet looks like this;
QUnit.moduleStart(function( details ) {
    console.log( ""Finished running: "", details.name, ""Failed/total: "", details.failed, details.total );
});

Shouldn't it be this:
QUnit.moduleDone(function( details ) {
    console.log( ""Finished running: "", details.name, ""Failed/total: "", details.failed, details.total );
});",aeisenberg,NONE,2013-01-03T17:32:59Z,2013-01-03T19:33:22Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
391,Modules can be out of order,"I noticed in a project i was working on that sometimes that module names would appear out of order in their drop down.
Can't rely on key ordering in objects. Pull request to follow.",jaredwy,CONTRIBUTOR,2013-01-09T10:42:46Z,2013-02-02T14:15:39Z,True,25.0,,4.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
393,junitlogger report xml file content not correctly generated,"Hello
Please assume that I have the following test :
test( ""AccountsView"", function() {
    ""use strict"";
    ok( 1 === 1, ""Passed!"" );
    ok( 2 === 2, ""Passed!"" );
    ok( 3 === 3, ""Passed!"" );
});

Running junitlogger generate the following xml report :
<?xml version=""1.0"" encoding=""UTF-8""?>
<testsuites hostname=""localhost"" tests=""3"" failures=""0"" errors=""0"" time=""0.515"" timestamp=""2013-01-16T16:21:17Z"">
    <testsuite id=""0"" name=""undefined"" hostname=""localhost"" tests=""0"" failures=""0"" errors=""0"" time=""0""
               timestamp=""2013-01-16T16:21:17Z"">
        <testcase name=""AccountsView"" tests=""3"" failures=""0"" errors=""0"" time=""0"" timestamp=""2013-01-16T16:21:17Z"">
        </testcase>
    </testsuite>
</testsuites>

I expect the testsuite tag to have a name ""AccountsView"" instead of undefined and I have only one testcase whereas I expect 3. The report content do not seem to be correctly built.
Please correct me if I'm wrong
Best regards",lauterry,NONE,2013-01-16T16:34:11Z,2013-04-25T15:11:13Z,True,23.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False
394,"QUnit.diff throws TypeError if object contains property ""constructor""","Please have a look at http://jsfiddle.net/qEdGD/ for a minimal test case.
I was making some test cases to see how my tool would behave if the user would give some build-in function as input. QUnit itself however seemed to have trouble.
The error occurs at this line (line 2025 in the current git code):
ns[ n[i] ].rows.push( i );
The cause is that qunit splits the content on whitespace characters when making the diff, and when the spaces are stripped, it'll say 'constructor' which of course will trigger an error.
I guess a quick fix would be adding a space behind each line.",Famlam,NONE,2013-01-18T21:40:31Z,2013-01-18T22:17:30Z,True,2.0,,2.0,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False
395,Fix test duration/runtime,"Originally added in #344, but has some shortcomings. Should use ""runtime"" instead of ""duration"", to make it consistent with the property passed to the done callback.
Should also be provided for modules, not just tests.
See also de2353a#commitcomment-2414467",jzaefferer,MEMBER,2013-01-20T23:52:23Z,2014-01-03T10:45:38Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
396,QUnit.load not firing when loaded using requirejs,"I can't understand why no one else has reported this so I am willing to concede that I am doing something wrong but I don't think so.
I am using requirejs to load qunit. The issue I am encountering is that QUnit initializes itself in a window.load event handler (window.addEventListener(""load"", QUnit.load, false);). However, when loading QUnit.js using require, the ""window.load"" event fires before the addEventListener call gets executed. Then when the listener gets registered, nothing happens.
I have worked around this by adding a call to QUnit.load into my run() method but this seems like a poor way to handle the issue.",MrBigDog2U,NONE,2013-01-23T18:53:03Z,2013-01-31T16:14:18Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
397,QUnit.equiv will erroneously declare that objects with circular references compare equal to those without,"If the circular reference holds the only path where there is a difference between actual and expected, QUnit.equiv will incorrectly return ""true"" - for example, the following test should succeed, but it fails:
test('compare self-referent to tree', function () {
   var circularA = [0];
   circularA[1] = circularA;
   var treeB = [0, null];
   equal(QUnit.equiv(circularA, treeB), false, ""Should not consider circular equal to tree"");
});
Personally I don't mind much if ALL comparisons performed on circularly linked objects fail, assuming we don't get false positives like this - I lost a lot of time believing that a test had succeeded when really it had failed as a result of the misleading equality testing. The solution could be as simple as bailing out with ""return false"" at all the points where we currently just assign ""loop = true"", but this will result in a significant change in policy. For example, all those tests listed in deepEqual.js which are listed as (""ambigous test"") (spelling error here) after line 1372 which currently return true, should return false.
However, the general task of correctly comparing all circularly linked structures with all others is, I think, out of scope for QUnit.equiv, and it would be a lot more straightforward and consistent if we simply considered it a test failure when presented with any circularly linked structure - or else, if we simply declared that no circularly linked structure can compare equal to any other structure. The current system, where two structures which are straightforwardly different can compare the same, seems undesirable.
Opinions on the best way out of this?
Cheers",amb26,CONTRIBUTOR,2013-01-25T06:39:47Z,2013-02-01T17:33:12Z,True,5.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
398,QUnit Cookbook issue,"Hi, in QUnit cookbook there is an error in documentation at ""http://qunitjs.com/cookbook/#asserting-results"" equal section. At the end of the paragraph it appears ""When you need a strict comparison (==), use strictEqual() instead."" and it should be ""When you need a strict comparison (===), use strictEqual() instead."" Three equals strict comparison.",betitoglez,NONE,2013-01-25T10:10:05Z,2013-01-25T20:40:08Z,True,1.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
400,Add non-browser tests to Jenkins,"Should run at least against nodejs. Maybe others, if already available or installable in our CI environment.
Whatever the actual issue in #399, would be nice to know that we're having some test coverage.",jzaefferer,MEMBER,2013-01-28T23:43:06Z,2014-01-02T17:11:25Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
403,Latest qunit with phantomjs swallows exceptions from other scripts,"When running qunit (1.11.0) under phantomjs (1.8.1), exceptions in scripts that are not qunit test files are swallowed. They do not show up in phantomjs' console output.",ashwinr,NONE,2013-01-31T18:49:00Z,2015-10-16T20:52:05Z,True,23.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
404,Abstraction for switching jQuery versions,"Various projects have code in place to switch various jQuery versions for a given testsuite (migrate plugin, UI, mobile, validation etc). Should look into providing a better abstraction and UI to implement that.",jzaefferer,MEMBER,2013-01-31T19:33:29Z,2014-02-21T17:45:52Z,True,6.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
405,Implement reporter interface,"We have JUnit, which can be improved a lot. Is there a difference to XUnit?
There's a plugin for TAP output ( https://github.com/twada/qunit-tap ), which we should at least link to, though maybe that could become an official add-on.",jzaefferer,MEMBER,2013-01-31T19:35:47Z,2017-03-31T04:09:57Z,True,13.0,JS Reporter,5.0,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False
406,Provide qunit-logging as an offical add-on?,This looks like it would be useful in various places: https://github.com/keithamus/qunit-logging,jzaefferer,MEMBER,2013-01-31T19:50:14Z,2013-05-07T05:17:09Z,True,3.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
407,assert.equal: Order of expected and actual output,"Hi there,
is there a reason for choosing another order of expected and actual values as opposed to the existing xunits like JUnit or phpunit? If not, I think it would make sense to align it with the ""standard"". I sure tripped over this  :-)
Cheers,
Daniel",drosowski,NONE,2013-01-31T21:34:41Z,2013-02-04T13:00:26Z,True,8.0,,6.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
411,assert.propEqual not guarded against circular structures,"As a result of #343 we got a new ""propEqual"" method which is usefully capable of comparing object trees in a ""constructor-blind"" manner, using a weaker semantic than QUnit.deepEqual. However, this method is not up to the standard of the rest of the framework - in particular, QUnit.deepEqual itself offers support for

correctly comparing cyclic structures without bombing the stack (#100 - recently improved  by #397)
not being confused by primitive arguments such as strings - these are compared properly and highlighted in the difference output.

""propEqual"" was implemented using a utility function ""objectValues"" which performs a clone of the arguments before they are dispatched to QUnit.deepEqual, and it is deficiencies in this algorithm which are responsible for deficiencies in propEqual as compared to deepEqual.

is caused by the cloning operation itself bombing out on cyclic structures, and
is caused by the lack of a check for primitive arguments before copying - strings are copied as if they were arrays. The comments at the head of objectValues are clear about the latter restriction, but this contract limitation is not clear when passed up to propEqual itself.

I enclose a screenshot of the results of comparing two string using propEqual. deepEqual by contrast shows a suitable result.",amb26,CONTRIBUTOR,2013-02-04T07:07:20Z,,False,3.0,,5.0,True,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False
412,Document browser support,"Once agreed on, also to be put on jquery/qunit.js.com.
See also #368 (comment)",Krinkle,MEMBER,2013-02-04T19:25:31Z,2013-06-19T10:29:06Z,True,4.0,,3.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
413,List authors and verify CLA signing,"Use grunt-git-authors to list authors, then verify each one has signed the CLA (or is on the team, therefore signed our CAA). Ask authors without signed CLA to sign it.",jzaefferer,MEMBER,2013-02-05T11:25:40Z,2013-04-29T18:38:19Z,True,13.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
414,QUnit.config for auto-scrolling to top,"Would it be possible to get a QUnit.config value to disabled the auto-scrolling to top of the page when a test is run? I'm running some tests asynchronously, and want to be able to turn off the auto-scroll feature.",gsaliba,NONE,2013-02-12T19:12:26Z,2014-01-29T16:06:50Z,True,1.0,,2.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
419,Move composite addon with all issues to standalone repo,"@JamesMGreene is this something you could take care of? Follow what @Krinkle did for the JUnit addon, except for issues. Those should be filed with all details in the new repo and closed here.",jzaefferer,MEMBER,2013-03-03T14:58:03Z,2013-03-18T21:28:13Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
420,Improve or drop phantomjs add-on,"We should either remove the phantomjs addon and refer to other solutions like https://github.com/gruntjs/grunt-contrib-qunit or move the add-on to a standalone repository and work with for example the grunt guys to make this add-on useful to them, so that they can actually use it instead of maintaining their own integration. Even if that doesn't happen, it should at least replace the bundled example, which is really bad: https://github.com/ariya/phantomjs/blob/master/examples/run-qunit.js
Maybe we can just contribute the add-on to phantomjs and help them maintain that copy, instead of our own repo.
@JamesMGreene @Krinkle what do you think?",jzaefferer,MEMBER,2013-03-03T15:03:02Z,2014-01-29T15:56:04Z,True,9.0,2.0,4.0,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
422,Implement QUnit callbacks event listener style,"Open for discussion!
I would like to change the QUnit core logging callbacks (e.g. QUnit.done, etc.) to utilize [theoretical] on, off, and emit methods.
Although we can leave the current callback functions around temporarily for deprecation's sake, the new preferred usage would be as follows (using suggested names):

QUnit.begin(fn)

QUnit.on('run.start', fn)


QUnit.moduleStart(fn)

QUnit.on('module.start', fn)


QUnit.testStart(fn)

QUnit.on('test.start', fn)


QUnit.log(fn)

QUnit.on('assert', fn)


QUnit.testDone(fn)

QUnit.on('test.done', fn)


QUnit.moduleDone(fn)

QUnit.on('module.done', fn)


QUnit.done(fn)

QUnit.on('run.done', fn)



This change would bring with it all of the usual benefits of an EventEmitter-style setup:

on:

Listeners can be added — current
Listeners for custom events can be added, e.g. for use in QUnit addons — new


off:

Listeners can be removed — new


emit:

Listeners can be manually triggered, e.g. for use in QUnit addons — new



One more important functionality I would prefer to add is the equivalent of a stopPropagation method (or flag, or return value) that would allow a listener to prevent subsequently added listeners from being triggered.  The use case here would again be primarily for QUnit addons.
For example, in QUnit Composite, I would like to do something like the following:
(function(QUnit) {

// Custom event for QUnit Composite
QUnit.on('suite.start', function(data) {
    // log data about a SUITE starting rather than confusing it with a test starting
});

// Custom event for QUnit Composite
QUnit.on('suite.done', function(data) {
    // log data about a SUITE ending rather than confusing it with a test ending
});

QUnit.on('test.start', function(data) {
    if (executingCompositeSuite) {
        QUnit.emit('suite.start', data);
        // Prevent all subsequently added 'test.start' listeners from being triggered
        return false;  // example of a ""stopPropagation"" functionality via return value
    }
});

QUnit.on('test.done', function(data) {
    if (executingCompositeSuite) {
        QUnit.emit('suite.done', data);
        // Prevent all subsequently added 'test.done' listeners from being triggered
        return false;  // example of a ""stopPropagation"" functionality via return value
    }
});

// For illustration only; this code already exists [in better form] in PR #408
var executingCompositeSuite = false;
QUnit.extend(QUnit, {
    testSuites: function(suites) {
        // When the first `test` in this set of `suites` starts (i.e. in `setup`), set:
        // executingCompositeSuite = true;

        // Run tests
        // ...

        // When the last `test` in this set of `suites` ends (i.e. in `teardown`), set:
        // executingCompositeSuite = false;
    }
});

})(QUnit);",JamesMGreene,MEMBER,2013-03-06T21:01:56Z,2017-03-31T04:15:32Z,True,17.0,JS Reporter,4.0,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False
424,Remove jQuery.trim optimization,via @JamesMGreene from IRC,jzaefferer,MEMBER,2013-03-07T22:53:53Z,2013-06-12T07:02:31Z,True,1.0,1.12,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
426,Allow selecting multiple modules,"Hi,
This is a feature request, not a bug.
I'd love the ability to be able to select multiple modules at once.
In my test suite, I always have different modules like ""domains (valid)"" and ""domains (invalid)"". If I make a change to the part of the code that handles the (in this example) domains, I'd love to see both modules (but no other modules). Currently, I need to run those two modules individually, or I have to run all tests/modules (which takes pretty long).
Kind regards,
Famlam",Famlam,NONE,2013-03-12T10:36:06Z,2014-01-03T10:28:18Z,True,6.0,,3.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
427,Expose testNumber (or testId) when calling testStarted and testDone,"The notion of testNumber already exists and it will be great to expose it in testStarted and testDone.
Furthermore, since QUnit.init( ) is used for (re)initializing and it is useful to be used when running multiple batches of tests(run one batch, reinitialize, run another, etc.), it sounds logical to reset Test.count and testId back to 0.",ispasov,NONE,2013-03-15T12:59:01Z,2014-02-13T23:13:00Z,True,8.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False
429,Allow for error margin in floating-point calculations ,"I have a function which performs some floating-point calculations (Math.cos and the like) which means that a simple
var actual = myfunction();
equal(actual, 0.5, true);

won't work, as the actual value was in fact 0.5000000000000001 (in other words has a tiny error), not exactly 0.5.
Would it be possible to either allow test writers to specify a max acceptable error margin for a float-based equality test (and default to a sane low value if none is specified)?
I quickly threw the following together, but it could be improved upon:
var maxFloatingPointErrorMargin = 0.000001; (might be a bit high for some uses)

function floatingPointEqual(actual, expected) {
  var delta = Math.abs(actual - expected);

  ok(delta < maxFloatingPointErrorMargin, ""floating-point actual value was acceptably close to the expected value"");
}

and in the test replace equal with floatingPointEqual(result, 0.5).",chriskilding,NONE,2013-03-20T21:13:19Z,2013-03-20T22:29:23Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
431,"Typo in ""@deprecated""","@deprecate since 1.8.0
Kept assertion helpers in root for backwards compatibility.
extend( QUnit, assert );

missing a d :)",jsgoupil,NONE,2013-03-22T17:20:04Z,2013-03-22T18:03:08Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
432,Using a setTimeout stub can stop test suite from continuing,"If you replace the global setTimeout function with a stub (like sinon's useFakeTimers), it can permanently stop the test suite.
When QUnit stops processing the queue to let the browser update, it calls the global setTimeout to schedule the next block of queue processing. If you are unlucky the test currently running may have stubbed setTimeout and its teardown step could still be on queue waiting to run. In this case, QUnit will end up using the stubbed setTimeout instead of the real one, and the entire test suite will stop running.",qxjit,CONTRIBUTOR,2013-03-25T12:31:06Z,2013-05-14T15:50:20Z,True,0.0,1.12,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
435,Ignored tests should not have a 'log' event emitted,"When working on grunt-saucelabs I encountered an odd problem where there was one test failure reported through the log callback, yet both the 'done' callback report and the in-browser report showed no such failure.
Turns out that there is one scenario in which assertions happen outside the normal boundaries (between Test.init / testStart and Test.finish / testDone). Namely QUnit.reset.
In our own code test suite there is one test where this occurs:
(function() {
    var reset = QUnit.reset;
    module(""reset"");
    test(""reset runs assertions"", function() {
        expect(0);
        QUnit.reset = function() {
            ok( false, ""reset should not modify test status"" );
            reset.apply( this, arguments );
        };
    });
    test(""reset runs assertions, cleanup"", function() {
        expect(0);
        QUnit.reset = reset;
    });
})();
As expected, when Test.prototype.finish is called for the test named ""reset runs assertions"", it calls the QUnit.reset that is defined there.
There is a log event emitted for the ok() assertion.
However, because the DOM update is already done for this test, it is never displayed.
I'm not sure what the point of this test is and why we are purposely ignoring assertions within QUnit.reset, but it makes it hard to write a reporter that doesn't fail for QUnit's own test suite as this failure always shows up.
To work around it I made the reporter in qunit-saucelabs keep a buffer of assertions, and from the testDone callback, clear and ignore the buffer if obj.failed is 0.",Krinkle,MEMBER,2013-03-28T22:48:17Z,2014-03-11T15:09:56Z,True,3.0,pre-2.0,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
436,Integrating Node.js with QUnit to Jenkins,"I'm trying to create a XUnit xml file for Jenkins from QUnit tests for a Node.js application.  I don't have the ability to run a browser or even a headless browser, also don't understand why I'd need one since the Node.js code doesn't deal with the browser.
I've been searching all over and have only been successful using qunit-tap and 'prove' to create an XML file.  Prove required downloading a formatter which was a perl file.  We are trying to prevent using perl stuff.
My system is an Ubuntu VM. This is a task for work and my boss is asking for the minimal amount of packages and dependencies.  Our Node.js server is accepting web socket requests and passing messages back and forth with a legacy system written in php.
QUnit's output seems to be a pretty print format, in a table, when I run my tests in the console.  It would be amazing to just get that into a flatter form with a flag!",ecokeley,NONE,2013-03-29T17:06:14Z,2013-03-30T14:23:58Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
437,It doesn't work with Modernizr.load (yepnope),"Hello,
This code makes nothing:
<!doctype html>
<html>
    <head>
        <meta charset=""utf-8"" />
        <title>test</title>
    </head>
    <body>
        <div id=""qunit""></div>

        <script src=""./libs/modernizr/modernizr.min.js""></script>       
        <script src=""test.js""></script>
    </body>
</html>


Modernizr.load([{
    load: [
        './libs/qunit/css/qunit.css',
        './libs/qunit/qunit.js'
    ],
    complete: function() {
        test('test', function() {
            var expected = true, result = true;
            ok(result == expected, 'test');
        });
    }
}]);

If I put the qunit files in the script tag it's OK. I really need for a project to load and execute qunit with yepnope.
Any ideas please?
Regards",sylouuu,NONE,2013-03-30T14:23:57Z,2013-03-30T19:01:30Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False
439,Update JSHint options to jQuery baseline,See jquery/jquery#1219 and http://contribute.jquery.org/style-guide/js/,JamesMGreene,MEMBER,2013-04-09T12:56:56Z,2014-01-03T10:26:00Z,True,1.0,,3.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
440,pushFailure giving wrong error?,"Greetings,
I'm setting up a project that uses QUnit 1.11.0 to test modules loaded in via RequireJS and is run via TestSwarm. During my debugging of getting all the components to play nice with each other, I kept seeing error messages pop up saying ""pushFailure() assertion outside test context"", which didn't make any sense to me since I was only testing incredibly simple assertions like ok(true, 'true'); without QUnit modules
Debugging into it, I found that every time I was getting these errors, it didn't actually seem to be the correct error. Since I'm using RequireJS to load test modules, I need to defer the running of QUnit, so I had to set QUnit.config.autostart = false; and call start manually after all the modules were loaded.
What was actually happening was the start function did its semaphore check, and found that the condition config.semaphore < 0 was true (for various reasons while getting things in order: because I had incorrectly set QUnit.autostart = false; instead of QUnit.config.autostart = false; or by having accidental double callback execution, etc) so it calls pushFailure with ""Called start() while already started..."", but the first thing pushFailure does is see that there is not a config.current and throw the new error telling me I have an assertion in the wrong place.
Can someone enlighten me as to why this is? It seems to me to be a bug because after I get my start calls in order, everything works, so I'm not sure why in these conditions it thinks that the assertion being out of context error is more important than the  ""I'm already running"" error.
If there is a reason for this, awesome, but if there isn't, it could have saved me a bit of debugging time if the error message was actually correct.",rzurad,NONE,2013-04-12T21:57:57Z,2014-02-13T23:17:28Z,True,3.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False
441,Expected and Result output for equals are reversed,"It looks like Expected and Result are being reversed at line 896 in version 1.11.0. The screencaps attached show the result displaying the expected value and the expected value displaying the result.  When I reverse the order of the variables for expected and result in the function call, everything seems to straighten out.
I hope this is as simple as it looks to me. : )",cmstead,NONE,2013-04-17T19:16:34Z,2013-04-17T19:25:23Z,True,2.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
442,Selecting a Module from the ModuleFilter pull-down menu does not always consistently run the tests in that module.,"Steps to Repro:

Open a test suite with more than two modules so the module filter pull down menu appears
Click the ""re-run"" link on any test so only that test runs (testNumber= will be appended to the QueryString)
Select a module from the module filter.

Observe that only one test is executed, not the entire suite of tests in the selected module.
This is caused by the testNumber= value not being removed the QueryString.",jonnyreeves,NONE,2013-04-18T13:03:43Z,2013-04-18T13:10:34Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
444,QUnit Basic Example on Home Page,"I think there is some problem in the QUnit Basic Example.
Can you improve the details provided in the home page?
Instructions should include folder and file creation.
Steps should be defined

Create a folder as ""QUnit_Example""
Under it create ""resources"" folder
Download qunit.js and qunit.css
Copy then under the resources folder as qunit.js and qunit.css
Create a file as qunit_example.html and enter below code

<!DOCTYPE html><html><head>  <meta charset=""utf-8"">  <title>QUnit Example</title>  <link rel=""stylesheet"" href=""/resources/qunit.css""></head><body>  <div id=""qunit""></div>  <div id=""qunit-fixture""></div>  <script src=""/resources/qunit.js""></script>  <script src=""/resources/tests.js""></script></body></html>
Your code for example case.
There should be modification in the html code /resources/qunit.js, /resources/qunit.css and /resources/tests.js should be either replaced by ./resources/... or resources/...
<!DOCTYPE html><html><head>  <meta charset=""utf-8"">  <title>QUnit Example</title>  <link rel=""stylesheet"" href=""./resources/qunit.css""></head><body>  <div id=""qunit""></div>  <div id=""qunit-fixture""></div>  <script src=""./resources/qunit.js""></script>  <script src=""./resources/tests.js""></script></body></html>
When I first followed the instructions I was not able to get the expected result so just wanted to report the same.
At the end you guys are decision makers
Thanks",iwx1,NONE,2013-04-29T07:16:16Z,2013-04-29T08:59:09Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
446,Move addons/themes out of core,I'll take ownership of these in separate qunit-theme-{name} repositories.,Krinkle,MEMBER,2013-05-01T17:12:02Z,2013-05-07T00:37:20Z,True,3.0,1.12,3.0,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
447,"Move addons/canvas, addons/close-enough, addons/step out of core","This is how I created the other repository:

Create new repository
Import all related files from the repository in core to the new repository. Be sure to include a reference to where they came from.For example: JamesMGreene/qunit-reporter-junit@e1101b6:Initial import from 'jquery/qunit.git:addons/junitlogger'.Tree: https://github.com/jquery/qunit/tree/43f4c94497/addons/junitloggerDon't forgot to also add in this commit: .gitignore, .jshintignore, .jshintrc, AUTHORS.txt, Gruntfile.js, MIT-LICENSE.txt, package.json
After verifying that npm install && npm test gives all green, create this first initial commit.
Tag this first commit as v1.0.0
git push origin HEAD:master && git push origin --tags
Enable Travis CI service hook in repository settings
Bump post-release version (v1.0.1-pre)
Create commit adding .travis.yml and add Travis CI badge to readme
Create commit adding NPM badge to readme
Create commit releasing v1.0.1
Tag it in git and publish to npm
Bump post-release version (v1.0.2-pre)
git push and push tags

And finally, a commit to jquery/qunit removing the files and referring to the new username/repo and link to v1.0.0 tree of the new repository (example: 67585c7)",Krinkle,MEMBER,2013-05-01T17:24:01Z,2013-05-06T04:00:27Z,True,18.0,1.12,4.0,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
448,QUnit fails tests inconsistently/alternatelyTest failes ,"I have a simplified QUnit test which consists of 2 simple tests that fails randomly/alternately for no good reason (They are both atomic, meaning that one test doesn't change anything of the other element)
Please see this jsfiddle try to run multiple times
module(""Basic actionBind"");
//two simple tests
test(""action1"", function() {
    ok(ele2.trigger(""click"").hasClass(""clicked""), ""basic click action"");
});

test(""action2"", function() {
    ok(ele1.click().hasClass(""clicked""), ""basic click action"");
});

http://stackoverflow.com/questions/16444561/qunit-inconsistency-alternately-fails-tests/",adardesign,NONE,2013-05-09T01:11:01Z,2013-05-09T02:30:23Z,True,5.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
449,Show the qunit-fixture div,"It would be really handy if there were a button that let us view the qunit-fixture div. At the moment, it is always hidden. Viewing the fixture div can make debugging a little easier.",KevinSheedy,NONE,2013-05-09T10:56:45Z,2014-02-13T23:58:04Z,True,2.0,,4.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False
451,Miscategorisation of QUnit.init and QUnit.reset,You list QUnit.init() and QUnit.reset() on the callbacks page (http://api.qunitjs.com/category/callbacks/) but they are not callbacks.  Perhaps they deserve their own page or this one gets renamed to something more all encompassing?,kagemusha,NONE,2013-05-16T00:28:33Z,2013-05-20T17:29:46Z,True,6.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
453,Remove QUnit.reset from the public API,To be deprecated (issue #354).,Krinkle,MEMBER,2013-06-12T16:57:02Z,2016-04-19T15:31:01Z,True,3.0,2.0,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
455,Simplify release process,Use something like grunt-version to replace the manual editing. Or grunt-bump.,jzaefferer,MEMBER,2013-06-19T11:12:05Z,2013-06-22T08:41:00Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
456,Documentation missing hidepassed option on config ,"I could not find the documentation to add this in, but the docs appear to be missing the hidepassed option that is exposed on the config option.",jaredadobe,NONE,2013-06-27T05:06:25Z,2013-06-27T05:38:52Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
457,Deprecate config.hidepassed,"I don't think we should have this as a configurable at the test suite level.
It makes sense as a urlConfig and makes sense to be persisted for the user/viewer, but we shouldn't have setup configuration for the UI state. This is the only one left of its kind (the others are all urlConfig and/or cookies with a sensible default).
I propose we straighten this out by deprecating it and subsequently removing it.
If we think it is best for UX to change the default (enable by default), then we should do so in core.",Krinkle,MEMBER,2013-06-27T05:37:49Z,2014-10-10T11:20:02Z,True,9.0,pre-2.0,4.0,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
459,Deprecate/remove triggerEvent?,"QUnit has a triggerEvent function that isn't used internal. Need to test if it gets exported anywhere, if so, if it's used anywhere. Depending on the result, deprecate or just remove it.",jzaefferer,MEMBER,2013-07-09T15:23:53Z,2014-01-02T17:11:25Z,True,1.0,,1.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
460,Effectively deprecate raises,"Formally deprecated since 1.9, need to change it to throw a useful exception in the next release. Completely remove it afterwards.",jzaefferer,MEMBER,2013-07-09T15:30:45Z,2014-01-03T10:10:10Z,True,1.0,,1.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
461,Add bower.json,"Install bower globally and use bower init to create a bower.json.
See sizzle's for an example.",timmywil,NONE,2013-07-10T15:28:30Z,2013-07-15T11:18:00Z,True,15.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
464,Cannot find test when the test's title contain a space in the end,"When the title contains a 'space' in the end of the title, the test suite runs fine, but when click on 'rerun' to run only that test, the filter will show no test found.",kidphys,NONE,2013-07-23T04:09:52Z,2014-07-30T15:03:20Z,True,2.0,pre-2.0,4.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,False
466,Update the `deepEqual`/`notDeepEqual` functions (or similar) to support an optional `compareFn` argument,"Based on an email conversation earlier today with @stephanb2:
Update the deepEqual/notDeepEqual functions (or create similar) to support an optional comparerFn argument, such that said function would be used instead of === to compare values inside of QUnit.equiv.
Example usage:
// Normal usage
QUnit.test(""test1"", function(assert) {
  var expected = [0, 1, 2];
  var actual = [0, 1, 2];
  assert.deepEqual(actual, expected, ""Items are deeply equal"");
});

// Extended usage
QUnit.test(""test1"", function(assert) {
  var expected = [0, 1, 2];
  var actual = [0.1, 1.1, 2.1];
  var comparerFn = function(actual, expected) {
    // After comparing the item types and length, use the `qunit-assert-close` plugin's
    // `close` function to verify that an array/object's items are all deeply ""close enough""
    // rather than ""strictly equal""
    assert.close(actual, expected, 0.11);
  };
  assert.deepEqual(actual, expected, comparerFn, ""Items are deeply close enough to equal"");
});
@jzaefferer @Krinkle What do you think of this idea?",JamesMGreene,MEMBER,2013-08-05T05:48:43Z,2015-05-18T16:24:51Z,True,8.0,,5.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
467,Enhancing stracktrace for grunt-contrib-qunit,"In PhantomJS (~1.9.0), the returned value for extractStacktrace is simply the type of error (ReferenceError, TypeError). It could be much more helpful if it gave more details, such as line numbers in files.
From digging around, the problem seems to be on line 1379, in regards to fileName. Now, in Chrome, this is not an issue - but for PhantomJS, ""fileName"" returns ""Error :"" This seems to be causing the method to jump down to ""stack[offset],"" thusly returning a vague stack trace.
I wasn't sure how to fix it up to account for the PhantomJS case, but for now it's been working to comment out lines relevant to fileName. As more and more people use grunt-contrib-qunit, however, it might be helpful to catch this case.
Thanks!",shaqq,NONE,2013-08-05T19:41:01Z,2014-11-06T13:26:08Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
472,QUnit.done should provide aggregated results,"Similar to #351
Any test runner that doesn't need live updating shouldn't have to aggregate results manually.",jzaefferer,MEMBER,2013-09-26T15:41:01Z,2017-03-31T04:17:24Z,True,8.0,JS Reporter,4.0,True,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False
473,Asynchronous QUnit.done,"Hi, would it make sense to support asynchronous callback inside QUnit.done?
My use case is the following,

the first test script adds a callback to submit code coverage results to a remote server
the last test script adds a callback to shut down the browser killing it.

I'd like to pause the callback executions until my request is done.
What do you guys think? Is it worth doing it?
It would make runLoggingCallbacks asynchronous, so I don't know if your cool with that.
An alternative is to redefine the Q.done method, but this comment scares me
// Supports deprecated method of completely overwriting logging callbacks

Does that mean that one day this code will disappear?
function runLoggingCallbacks( key, scope, args ) {
    if ( QUnit.hasOwnProperty( key ) ) {
        QUnit[ key ].call(scope, args );
    } else {",piuccio,NONE,2013-09-27T02:20:49Z,2014-02-13T23:32:53Z,True,8.0,,4.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False
475,deepEqual fails on identical non recursive maps,"deepEqual fails with the compared objects at the following link:
http://tlrobinson.net/projects/javascript-fun/jsondiff/#%7B%22d%22%3A%7B%22a%22%3A%22%5B%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%204%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%202%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%203%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%204%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22WebAdmin%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaPublisher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%202%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22WebAdmin%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%202%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%203%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaPublisher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%203%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaPublisher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%205%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaDispatcher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%206%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22WebAdmin%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%2033%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22KeecastWeb%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%2033%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecast%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%2033%5Cn%20%20%7D%5Cn%5D%22%2C%22b%22%3A%22%5B%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecast%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%2033%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%204%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%202%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%203%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Keecoach%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%204%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22WebAdmin%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaPublisher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%201%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%202%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22WebAdmin%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%202%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22Director%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%203%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaPublisher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%203%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaPublisher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%205%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22MediaDispatcher%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%206%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22WebAdmin%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%2033%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20%5C%22agent%5C%22%3A%20%5C%22KeecastWeb%5C%22%2C%5Cn%20%20%20%20%5C%22user_id%5C%22%3A%2033%5Cn%20%20%7D%5Cn%5D%22%7D%7D",iongion,NONE,2013-10-08T14:40:31Z,2013-10-08T16:54:27Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False
476,assert.throws doesn't handle exception object,"This fails:
throws(function() {
    My.sqrt(-1);
}, new Error(""sqrt can't work on negative number""), ""should throw an exception if given a negative number"");
The instanceof check causes an exception itself: ""Uncaught TypeError: Expecting a function in instanceof check, but got Error: sqrt can't work on negative number""
We don't test that case. We should fix that.",jzaefferer,MEMBER,2013-10-10T16:20:52Z,2014-01-29T15:17:30Z,True,7.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
477,"Fix  test ""testEnvironment reset for next test""","There's a problem with test ""testEnvironment reset for next test"".
It passes when run on a clean sessionStorage, but if one of the tests failed earlier, this particular test will now fail because we change the execution order.
This test relies on being run after the previous one in the test suite.
I tried hacking around it with callbacks (e.g. deferred) but it doesn't work because when the 2nd one runs first, as it will wait forever (we change order, but we don't run in parallel, can't yet because of global state).
Looks like something we need to rethink, perhaps solvable by allowing them to run in parallel after we refactor Assertion.",Krinkle,MEMBER,2013-10-10T16:53:42Z,2014-11-06T16:04:41Z,True,0.0,,1.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
478,Backslash in string inconsistency in diff,"Hi,
Please have a look at http://jsfiddle.net/qEdGD/3/ .
The strings I compare contain both an escaped "" and an escaped \.
The diff shows the escaped "" as \"", but the escaped \ as \. Thus: '\"" versus \\' becomes ""\"" versus \"". I think this is confusing (especially if there is another character behind the escaped \), and it would be better to also show the \ as \\ due to it's special meaning within strings.
Kind regards,
Famlam
test(""A failing test"", function () {
    deepEqual('\"" versus \\', """", ""A test that fails"");
});",Famlam,NONE,2013-10-12T13:11:50Z,2015-05-15T16:56:36Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
482,Using qunit-fixture may cause memory leaks in scenario with jQuery data,"Currently, the qunit-fixture is restored after each test as following:
fixture.innerHTML = config.fixture;
This causes memory leaks when using jQuery, because cleanData is not called for fixture content. Thus subscriptions and jQuery data won't be cleaned. To fix it we should use jQuery( ""#qunit-fixture"" ).html( config.fixture ) instead.
Although, it worked correctly before following commit:
f853685",tabalinas,NONE,2013-10-23T14:25:40Z,2013-10-23T14:36:51Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
483,QUnit.diff should be given dumped values before html escape,"The parameters can be serialised by jsDump, but they shouldn't be escaped yet so that a diff library can diff the real values instead of something that is already harder to work with.
Afaik nothing relies on this, we should be able to move the escapeText call from around the values from jsDump to around the diff() call.",Krinkle,MEMBER,2013-10-23T19:28:26Z,2015-05-18T15:29:48Z,True,7.0,,3.0,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False
485,"semaphor, start, stop","Is there/or can we have a variable/method....
to check the status of the semaphor?
is it stopped? has it started?
on ajax calls, you can have success,complete, error, you may want to stop/start
but if it's already started then I don't need to worry about it....",valtido,NONE,2013-11-04T13:53:01Z,2013-11-04T14:54:22Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
487,CDN CSS and JS URLs on QUnit's homepage are not read only!,"Trivial, yes. Bug, i believe so.
On QUnit's home page - http://qunitjs.com/ - you are displaying CDN URLs to the latest JS and CSS. But those are not in read only text-boxes. One can select the text and delete the URL! Not that editing it causes any harm, but it is not necessary. Not the least expected by a user.
Easily reproducible on: Google Chrome 30.0.1599.101 m",techfoobar,NONE,2013-11-12T10:40:05Z,2013-11-12T11:04:51Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
488,Try to use WebDriver API for testing real events,"This probably won't ever get any code landed in QUnit, but we want to explore if we can trigger real events when running tests with the WebDriver API. Anyone familiar with that is welcome to participate in the discussion here.
Eventually we may document how to use QUnit together with the WebDriver API, if it works out.",jzaefferer,MEMBER,2013-11-13T19:24:45Z,2014-11-06T13:05:24Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
489,Checking primitive-like objects againts each other with deepEqual fails.,"Checking primitive value against primitive-like object runs smooth
assert.deepEqual( 1, new Number( 1 ), 'Test 1' );
But checking primitive-like object against the same one fails:
assert.deepEqual( new Number( 1 ), new Number( 1 ), 'Test 2' );
Rare situation, but nevertheless.",FarSeeing,CONTRIBUTOR,2013-11-14T13:22:52Z,2014-11-06T13:04:42Z,True,6.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False
490,Move QUnit.expect to QUnit.assert.expect,"This will probably be covered in the PR for Issue #374 but I wanted to be more explicit about this.
Currently, the expect function is a property on the QUnit object.  I'd like to see it moved to the QUnit.assert (or similar Assertion class, per #374) so that I can use it as such in my testing.  If it is indeed moving onto the Assertion class via #374, then I'd like to see this in place ahead of time for an easier transition.
Currently, I've been using the following boilerplate in all my tests:
(function(module, test, expect) {

  module(""blah"");

  test(""blah"", function(assert) {
    (assert.expect || expect)(1);  // ← Pertinent snippet
    assert.ok(true);
  });

})(QUnit.module, QUnit.test, QUnit.expect);
But this is getting annoying. Alternatively, I could have made a polyfill-esque ""custom assertion"" (that doesn't really assert but rather just delegates to QUnit.expect) to get the method in place... but that is semi-annoying also if I need to include it as an extra script. 😉
if (!QUnit.assert.expect) {
  QUnit.assert.expect = QUnit.expect;
}",JamesMGreene,MEMBER,2013-11-20T17:27:53Z,2014-05-15T16:23:56Z,True,11.0,,4.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
491,Incorrect module name in moduleDone callback when testing single module,"If you have multiple modules, but run tests from a specific module, the moduleDone callback may have the wrong module name in the details object.
For example, if you run the following suite with query string ?module=foo, only the tests in module ""foo"" are executed, however, moduleDone details reports the name to be ""bar"":
QUnit.moduleDone(function(details) { 
    console.debug(details.name);
});

module(""foo"");

test(""test1"", function() {
    ok(true);
});

module(""bar"");

test(""test2"", function() {
    ok(true);
});",cuperman,CONTRIBUTOR,2013-12-02T23:08:10Z,2014-01-02T17:32:29Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
495,Update jshint config,"Should match the options in the style guide: http://contribute.jquery.org/style-guide/js/#linting (not sure if there's anything missing right now, need to check)
Should add maxlength:100 and implement that.",jzaefferer,MEMBER,2013-12-17T19:48:52Z,2014-01-02T17:54:00Z,True,1.0,,2.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
496,[QUnit.only] Add support for source-based test filtering (aka exclusive tests),"I think it would be handy to be able to filter tests right in the source code. This feature is essential when Karma is used and the test suite is large.
Mocha and Jasmine already support this feature via '.only' and 'iit' respectively.
What do you guys think?",ftokarev,NONE,2013-12-24T16:55:07Z,2015-10-25T16:17:26Z,True,32.0,,9.0,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False
499,Provide 'runtime' property on moduleDone callback,See #395 and #344.,jzaefferer,MEMBER,2014-01-03T10:45:30Z,2014-11-06T15:49:09Z,True,1.0,pre-2.0,1.0,True,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,False,False
500,Remove `duration` property on testDone callback,Follow-up to #395.,jzaefferer,MEMBER,2014-01-03T10:45:32Z,2016-04-18T16:09:51Z,True,0.0,2.0,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
501,Remove expected argument from test() and asyncTest(),See #356,jzaefferer,MEMBER,2014-01-03T10:57:48Z,2016-04-18T16:09:52Z,True,2.0,2.1.0,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
502,"Tests fail in IE6/7, ""security restrictions""?","The last two TestSwarm builds failed in IE6 and IE7, each with a timeout. That's reproducable in BrowserStack, where the page just throws an error on load.
After digging into that for a while I found that I was unable to load dist/qunit.js directly. When attempting to do so, IE would show an alert with ""Your current security settings do not allow this file to be downloaded."" This also seems the cause for the testpage to fail: dist/qunit.js doesn't get loaded at all, though without any errors, then the first attempt to use one of the exports in test/test.js throws an actual script error.
I've googled a bit of that particular error message, even check the settings in the security tab, but there's nothing that looks like its restricting any file downloads. Even then, its not supposed to actually download the file (for storing on desktop or something), just to load it as a script.
Looking for ideas how to resolve this. /cc @Krinkle @JamesMGreene @scottgonzalez @gnarf",jzaefferer,MEMBER,2014-01-06T13:59:22Z,2014-01-06T16:48:49Z,True,7.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
504,Support for standard performance unit testing?..,"Does QUnit have an option to perform performance testing?
Which means: Run each unit X times, show the AVG, MIN and MAX duration for the test.
If there's a ready-to-use plugin for QUnit - I'd love to hear about it. Because it's almost useless without the performance part.
Thanks!",danielgindi,NONE,2014-01-17T10:05:24Z,2014-01-29T15:20:48Z,True,9.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
509,Wrong path on package.json,"Package.json says that the main path is dist/qunit.js, but once installed, this path doesn't exists and instead it is qunit/qunit.js. Bower.json has the correct one instead.",piranna,CONTRIBUTOR,2014-01-27T17:58:32Z,2014-12-01T19:45:17Z,True,8.0,2.0,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
510,Implement assertContains,"I was interested in writing a PR for an assertContains or assertIn method but before I was just curious if there was a reason this already doesn't exist?
I didn't want to conflict with any design decisions within the library.
Thanks.",taddeimania,NONE,2014-01-27T18:23:02Z,2014-01-29T14:51:19Z,True,3.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
517,"PhantomJS runner link on ""Plugins"" tab on qunit website does not work","Hey there, the link to the PhantomJS runner on this page does not seem to be working.",justinj,NONE,2014-01-29T23:28:52Z,2014-01-30T10:55:44Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
518,excessive trailing comma in js object,"Version 1.13.0
There's an excessive trailing comma at line nr 1378.
Commas at the end of object definition are not allowed (it's not valid JSON).
It may cause problems with older web browsers and also it reports errors when compiling with google's Closure Compiler.",mateuszf,NONE,2014-01-30T14:18:30Z,2014-01-31T16:27:52Z,True,2.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
519,Refactor QUnit.diff,"QUnit.diff is uncovered yet.
https://coveralls.io/files/127181586#L2137 :)",leobalter,MEMBER,2014-01-30T16:07:32Z,2014-01-31T17:06:04Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
520,"Remove version from bower.json, update release script to write that",See also jquery/jquery-release#31 (comment),jzaefferer,MEMBER,2014-01-31T17:16:54Z,2014-11-06T12:50:26Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
521,Missing CommonJS exports,"QUnit 1.12.0-1.14.0 fail to work in CommonJS environments because of its faulty UMD.
It checks for modules.exports but some CommonJS environments may not have it, only having exports, so then it extends what it thinks is the global object but its just the module scope, so QUnit is never exposed.
See here and here for examples of working UMD.",jdalton,NONE,2014-02-01T19:38:03Z,2014-12-03T11:32:23Z,True,15.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
528,There is no visual indication when you're focused on a single test,"When you double-click on a test to run only that test, there is no indication that you are only running a single test except for the URL. As you can see from the popularity of this StackOverflow ticket, this is confusing for more people than just myself.
I propose that the page offer some indication that you're running a single test and show a link to go back to the full suite.",mimshwright,NONE,2014-02-08T00:15:38Z,2015-10-20T17:51:36Z,True,9.0,,6.0,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False
530,Deprecate QUnit.init,"This requires some research on how QUnit.init() is currently used. By examples like the one described in #427 should be discouraged.
If we decide to deprecate QUnit.init(), we should update code and docs to do that formally, then set this ticket to the 2.0 milestone to replace the public method with a warning, along with a separate ticket to remove the method completely in 2.1.",jzaefferer,MEMBER,2014-02-13T23:12:52Z,2014-07-30T15:21:24Z,True,0.0,2.0,2.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
531,Standard reporter interface,"We want to provide a reporter interface that we can share with other testing tools like Jasmine and Mocha, to make it easier for integration tools - like Karma, browserstack-runner, grunt plugins - to hook into QUnit and other tools. Anyone writing a new JavaScript testing tool should be encouraged to provide the same interface, making it more reasonable to support these tools.
This requires a bunch of research. So far we identified two components that need to be standardised:

needs a data format ala JUnit XML (here's an unofficial xsd to validate the output) or TAP, that is flexible enough to support QUnit and others. Specifically, Jasmine and other BDD styles support (more or less) infinite nesting, which QUnit doesn't
need a list of events that provide this data. Something like done should provide the full datastructure, other events should help to output progress

Related tickets:

(#351) testDone should provide aggregated assertion results
(#405) Implement reporter interface
(#422) Implement QUnit callbacks event listener style
(#472) QUnit.done should provide aggregated results",jzaefferer,MEMBER,2014-02-13T23:42:06Z,2017-03-31T04:12:02Z,True,16.0,JS Reporter,6.0,False,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False
532,Cleanup assertions,"In order to reduce our API surface and encourage good testing practices, we want to review existing methods and their usage and probably make some changes.
Ideas so far:

Make equal() and notEqual() strict by default, removing strictEqual() and notStrictEqual() along the way.
Remove ok(), suggesting better alternatives, for example replace ok(array.indexOf > -1) with notEqual(array.indexOf, -1)",jzaefferer,MEMBER,2014-02-13T23:45:12Z,2014-06-24T15:29:58Z,True,9.0,,4.0,True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False
533,Improve support for writing custom assertions,"Currently custom assertions can't delegate to existing assertions like equal() without messing up the stack trace we display for failed assertions. Always having to use QUnit.push isn't the best API for writing custom assertions.
Ideas so far:

at least expose the traversal of QUnit.equiv, related to #466
maybe expose an API for custom assertions that fixes stack traces when delegating to other assertions?
or try to have the assertion wrapper/constructor keep track, so that it doesn't matter on what level you call assertions, it'll unwrap correctly
or try and see what happens if we simplify the stack trace handling - a few more lines might be worth removing the complexity",jzaefferer,MEMBER,2014-02-13T23:48:15Z,2015-05-18T15:58:03Z,True,4.0,,4.0,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
534,Implement async/done callback system,"We still want to provide better support for async testing. We have several options for implementing this, though they all come down to getting rid of methods within the test context.
Some ideas:
// async() returns done callback
test(..., function(assert) {
  // async() can be invoked multiple times, each callback has to be invoked
  var done = assert.async();
  setTimeout(function() {
    done();
  });
});
// this makes integration of Promises very easy
test( ..., function( assert ) {
    /* ... */
    APP.foo().always( assert.async() ).done( function () {
        assert.ok(true);
    } );
    APP.bar().always( assert.async() ).done( function () {
        assert.ok(true);
    } );
});

// all tests are async, always have to explicitly end the test, async or not
test(..., function(assert) {
  assert.end();
});

// expect sets up async test, finishes when number of assertions ran
test(..., function(assert) {
  // makes this test async
  expect(1);
  setTimeout(function() {
    // expected 1 assertion, continue with other tests
    // any other assertions will fail this test
    assert.ok(true);
  });

// return a promise from the test
[...]
For the last one, see #634
Frameworks that are good references: mocha, nodeunit. We could force calling done like nodeunit, always or depending on configuration.
Related: #374
This replaces #331, to have a fresh start on this discussion.",jzaefferer,MEMBER,2014-02-13T23:53:46Z,2014-09-11T20:52:18Z,True,35.0,2.0,10.0,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
535,Deep equal objects from different frames,"Hello
In my application I pass objects from an iframe to the parent window and I'd like to write a test for that, but because the object is created inside another frame deepEqual return false even if they're actually equal.
Here's a test case
index.html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""utf-8"">
  <title>QUnit Example</title>
  <link rel=""stylesheet"" href=""http://code.jquery.com/qunit/qunit-1.14.0.css"">
</head>
<body>
  <div id=""qunit""></div>
  <div id=""qunit-fixture""></div>
  <iframe src=""iframe.html""></iframe>
  <script src=""http://code.jquery.com/qunit/qunit-1.14.0.js""></script>
  <script>


  test(""data coming from iframe"", function () {
    deepEqual(data, {
        banana: true
    }, ""Serialized from iframe: "" + JSON.stringify(data));
  });
  </script>
</body>
</html>
iframe.html
<script>
window.top.data = {
    banana: true
};
</script>

Workaround is
 test(""data coming from iframe"", function () {
    var copy = jQuery.extend(true, {}, data);
    deepEqual(copy, {
        banana: true
    }, ""Serialized from iframe: "" + JSON.stringify(copy));
  });
The above code passes the test",piuccio,NONE,2014-02-19T08:54:22Z,2014-11-06T12:45:46Z,True,1.0,,3.0,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False
537,Inconsistent paddings/margins,"@DarkPark wrote:


the left side alignment is messy
the right side has no indentations at all
there are some problems with vertical alignment as well


Moved from qunitjs/qunitjs.com#64",Krinkle,MEMBER,2014-02-20T03:31:44Z,2014-02-21T17:24:51Z,True,0.0,,1.0,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
538,"loading tests asynchronsly results in unpredictable execution of test via the rerun button or the url parameter ""testNumber=x""","Hello,
I tried to look to see if this issue has already been reported, but didn't find anything that specific to the issue.
If your loading tests via require like the example code found on the QUnit documentation http://api.qunitjs.com/QUnit.config/
QUnit.config.autostart = false;
require(
  [ ""tests/testModule1"", ""tests/testModule2"" ],
  function() {
    QUnit.start();
  }
);
requirejs does not provide any gaurentee the order of tests/Module1 or test/Module2 retrieval or executions. Thus it's possible to have Module2 to run first than Module1 to run second. Order doesn't usually matter except if you hit the rerun button which puts the testNumber=x argument in the url. If the load order changes, test x is possibly a different test than you had expected. If your running test over a network it's not too hard to reproduce.
Daniel",dgeorges,NONE,2014-02-27T03:09:54Z,2014-09-22T14:05:42Z,True,20.0,,9.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
539,QUnit closeEnough with percentage,"I've been doing some comparisons and an epsilon difference is not always desired. So a percentage error based comparison function might be useful.
could we have a closeEnoughPct ? my rough and ready function below has worked so far but there's probably float dragons I haven't hit yet. Also I've not written a qunit plugin so...
// check if result and expected values are nearly equal values within a percentage of each other
// https://github.com/jquery/qunit/tree/v1.11.0/addons/close-enough
function shouldBeNearlyEqualValue(result, expected, percent) {
  if (expected) {
    return Math.abs(100 * (result - expected) / expected) <= percent ? true : (result + ' is not nearly[<=' + percent + '%] of ' + expected);
  }
  else {
    // expecting zero here be dragons: (Epsilon Comparisons) http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/
    return !result;
  }
}
I use it like this:
equal(shouldBeNearlyEqualValue(result, expected, Plan.percent), true, '.constrainZoom(>max) should be max ' + expected);
So on a failure it gives all detail of what's wrong. But it would be cool to use it as a proper test and have the result/expected explain that they differ my more than a percent.
If you think it's worth adding to qunit I can figure out how to make a plugin.",bcowgill,NONE,2014-02-27T14:39:00Z,2014-03-07T18:44:15Z,True,3.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
542,Determine testing strategy,"IE6/7, Opera 12.1x & Safari 5.1 have been removed from the popular browser set and moved to the weekly job together with Android browsers. Since QUnit also uses this browserSet, it's now not tested fully as it should. There are three possibilities to fix it:

Create a popular-qunit browser set with contents previously in the popular browser set - especially good if QUnit doesn't plan to drop IE6/7, Opera 12.1x & Safari 5.1 when jQuery Core does.
Add a ""QUnit weekly"" Jenkins job and test it on the weekly browser set.
Create separate popular-qunit browser set as in (1) and weekly-qunit containing only Androids. Then add a ""QUnit weekly"" Jenkins job and test it on the weekly-qunit browser set - better than 2. if QUnit doesn't plan to drop those browsers.

While the first option is the quickest, QUnit should be tested on Android browsers, especially that jQuery Core runs tests on them using QUnit. Therefore, I'd opt for (2) if you plan to drop IE6/7, Opera 12.1x & Safari 5.1 when jQuery Core does (in 1.13/2.3) or (3) if you want to keep supporting them longer.
cc @jzaefferer",mgol,MEMBER,2014-03-12T09:27:10Z,2014-05-05T20:04:41Z,True,15.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
543,Allow nested suites (modules)?,"A personal sore point for me when using QUnit is the lack of nested suites (modules) that are offered by other popular frameworks like Mocha and Jasmine.
I've given it some cursory thought and, if we agree it adds value, I don't foresee any major roadblocks to implementing that capability.  It would give us some options for richer reporting outputs as well, e.g. Mocha's sleek nested HTML report:",JamesMGreene,MEMBER,2014-03-12T18:06:30Z,2015-10-08T00:49:24Z,True,15.0,2.0,6.0,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
544,Use Date.now when possible and normalize calls otherwise,There's a mess with getting current time methods: Date.now is not used even when available and the code is either new Date().getTime() or +new Date().,FarSeeing,CONTRIBUTOR,2014-03-19T13:35:34Z,2014-05-05T19:45:28Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
547,throws() fails for typed error with custom message on IE8,"Edited for accuracy:
I'm not entirely sure if you'd call this a bug, but it's certainly undesirable from my point of view.
The following tests fail in IE8 and any later version of IE that is running in compatibility mode with it's document mode set to IE8.
assert.throws(function() { throw new TypeError('Bad'); }, TypeError);
assert.throws(function() { throw new RangeError('Bad'); }, RangeError);
assert.throws(function() { throw new SyntaxError('Bad'); }, SyntaxError);
assert.throws(function() { throw new URIError('Bad'); }, URIError);
assert.throws(function() { throw new ReferenceError('Bad'); }, ReferenceError);
assert.throws(function() { throw new EvalError('Bad'); }, EvalError);
The result is shown as something like:
Expected:  function URIError(  a ){
  [code]
}
Result:  {
  ""message"": ""Bad"",
  ""name"": ""URIError""
}
The above tests work in IE 9+ (in edge mode), Firefox, Safari and Chrome. The following tests also work on IE8:
assert.throws(function() { throw new Error('Bad'); }, Error);
assert.throws(function() { throw new TypeError(); }, TypeError);
assert.throws(function() { throw new RangeError(); }, RangeError);
assert.throws(function() { throw new SyntaxError(); }, SyntaxError);
assert.throws(function() { throw new URIError(); }, URIError);
assert.throws(function() { throw new ReferenceError(); }, ReferenceError);
assert.throws(function() { throw new EvalError(); }, EvalError);
So the problem is specifically when you throw an error object of a specific type AND with a custom message on Internet Explorer 8 or a later version emulating that browser.",wwarby,NONE,2014-03-27T00:11:01Z,2014-06-30T13:20:27Z,True,4.0,pre-2.0,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
548,QUnit.log doesn't report expected value for throws that checks to see if thrown error is an instance of a custom error,"Here is a fiddle (http://jsfiddle.net/xQg4r/1/) that shows what I am talking about.
The following code:
QUnit.log(function (result) {
    document.getElementById(""results"").innerHTML = JSON.stringify(result, null, 3);
});

var CustomException = function (message) {
    this.name = ""CustomException"";
    this.message = message;
};

CustomException.prototype = new Error();
CustomException.prototype.constructor = CustomException;

module(""One"");

test(""Throws Instance Test"", function() {
    throws(function () {
        throw new CustomException();
    }, CustomException, ""Exception must be instance of CustomException."");
});

Only logs this:
{
   ""module"": ""One"",
   ""name"": ""Throws Instance Test"",
   ""result"": true,
   ""message"": ""Exception must be instance of CustomException."",
   ""actual"": {
      ""name"": ""CustomException""
   }
}

When using throws in other scenarios there is always an expected value.
I can fix this, but I'm having a hard time figuring out where logging is done. If someone can point me in the right direction, I can try and submit a patch for this.",vivin,CONTRIBUTOR,2014-04-04T14:59:20Z,2014-04-04T15:11:52Z,True,2.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
549,"when notEqual, notDeepEqual, notPropEqual, notStrictEqual fails the explanation is confusing.","test('QUnit notDeepEqual test', function()
{
    expect(1 + this.extraTests);
    var shouldnotbe = { 'name': 'JO DOE FAIL', 'mode': 'failure', 'age': 32 },
        result = this.oTest.deep();
    notDeepEqual(result, shouldnotbe, 'deep() should not be ' + JSON.stringify(shouldnotbe));
});
Produces on failure:
deep() should not be {""name"":""JO DOE FAIL"",""mode"":""failure"",""age"":32}
Expected:
{
  ""age"": 32,
  ""mode"": ""failure"",
  ""name"": ""JO DOE FAIL""
}

It would make more sense for 'Expected' in the result to be Did Not Expect or Should Not Be. When reading the test failure there is no language to indicate what the problem is.",bcowgill,NONE,2014-04-10T10:00:50Z,2014-04-11T18:49:57Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
550,Semaphore check uses pushFailure with wrong argument order,"In https://github.com/jquery/qunit/blob/e1c3191294440eeafe8a4918bad62373d34418c1/src/core.js#L159 null, should be dropped, since source is the second argument, not the third.
See http://jsbin.com/xazepozu/1/edit",jzaefferer,MEMBER,2014-04-12T09:06:32Z,2014-04-14T16:21:59Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
554,Expose version in API and display in html reporter,"It would be helpful when working on a project to more easily identify what version of QUnit is being used (e.g through a property on the QUnit object).
While at it, maybe also display it somewhere in the html reporter (near where we dump the user agent).",Krinkle,MEMBER,2014-04-26T13:16:47Z,2015-03-11T14:10:28Z,True,2.0,1.18.0,3.0,True,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False
557,Development instructions missing steps,"At least on Ubuntu, I had to do a couple of extra steps to get grunt to run on a newly cloned repository. I don't know if this is too specific to be included in your README file, but it made it harder for me to contribute a patch.
Summary
The two commands I needed to add were:
sudo apt-get install nodejs-legacy
sudo npm install -g grunt-cli

Background
When running the npm install command, I got the following error:
sh: 1: node: not found
npm WARN This failure might be due to the use of legacy binary ""node""
npm WARN For further explanations, please read /usr/share/doc/nodejs/README.Debian

Some searching brought me to a Stack Overflow answer that says Ubuntu has broken backward compatibility by renaming the node command to nodejs. To support packages like npm that still depend on the old command, you have to install the nodejs-legacy package.
Once I got npm install to work, I still couldn't run grunt. Looking at the Grunt documentation, I saw that I also need the grunt-cli node package.",donkirkby,CONTRIBUTOR,2014-05-05T21:06:34Z,2014-05-05T21:18:16Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
558,TypeError doesn't display actual value in throws test,"If I write a test using throws(), and the code under test throws a TypeError that doesn't match the expected message, the actual error message is not displayed.
For example, here's a test that fails with an unhelpful description:
test(""TypeError"", function() {
    throws(
            function() {
                throw new TypeError(""the wrong description"");
            }, 
            /right description/, 
            ""wrong description of explicit TypeError"");
});

The unhelpful description of the failed test is:
Expected: /right description/
  Result: {}

For comparison, here's a test that fails with a helpful description:
test(""CustomError"", function() {
    function CustomError( message ) {
        this.message = message;
    }

    CustomError.prototype.toString = function() {
        return this.message;
    };

    throws(
            function() {
                throw new CustomError(""the wrong description"");
            }, 
            /right description/, 
            ""wrong description of CustomError"");
});

The helpful description of the failed test is:
Expected: /right description/
Result:   {
              ""message"": ""the wrong description"",
              ""toString"": function( ){
                [code]
              }
          }

It looks like the problem is in jsDump.parsers[""object""]. It tries to iterate through the TypeError's keys and doesn't find any.",donkirkby,CONTRIBUTOR,2014-05-05T23:22:37Z,2014-05-13T09:30:52Z,True,8.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
561,"qUnit overwrites global variable ""log""","qUnit appears to define/overwrite a global variable named log. This is causing issues with certain other libraries for logging purposes such as : https://github.com/pimterry/loglevel
It would be nice if Qunit didn't do that and use a namespaced variable, ie. QUnit.log.",webberig,NONE,2014-05-07T07:59:21Z,2014-05-08T19:22:12Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
563,Global scope clean-up,"I would like to remove the assertion methods from the global scope.
We may probably check this for the 2.0.0 milestone or even earlier.
That would require some big changes on other projects and documentation/cookbook, but I still think it's always better to not pollute the global scope.
We talked a little about this on #561 and can also extend this discussion on removing other global methods that can already be seen on QUnit namespace.",leobalter,MEMBER,2014-05-08T19:46:03Z,2016-04-18T16:09:51Z,True,5.0,2.0,4.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
565,Modules not run on Chrome if file is not specified in URL,"In the latest versions of Chrome & Chromium seems there's a bug that when a URL doesn't end with a file (blah.html, for example) it append a slash. I have my tests in a index.html file inside a test folder, so I can run them just pointing the browser to localhost/test. Problem is, when adding some arguments to the query of the URL Chrome add a slash at the end, and while for individual tests it works (it's just a number, and parsing ignore the slash), for modules or other params the slash is added, making an unrecognized module name so they can't run. Due to this, I propose to check that corner case and remove the slash to prevent that bug.",piranna,CONTRIBUTOR,2014-05-09T08:24:17Z,2014-08-06T18:59:17Z,True,6.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
566,Trying to install this repo with npm results in a folder without the qunit build files,"Hi,
I was just trying to get the latest version of qunit to be installed using npm -not the one in the registry, but directly from github- and if resulted in an empty folder with just the package.json file and the LICENSE.txt.
It seems that the folder names have changed from qunit/ to dist/ and that was not yet updated in your gruntfile.
I was trying to install directly because the current github version contains a fix for the issue described here:
https://groups.google.com/forum/#!searchin/karma-users/qunit/karma-users/or-gWh7cjZc/W8t4zB5vl20J",royriojas,NONE,2014-05-11T22:02:14Z,2014-05-12T08:34:55Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
569,Validate testId and module parameters,"When specifying an invalid testId or module parameter, QUnit just runs an empty testsuite. It should validate the parameters instead:

testId must match an existing test
module must match one of the existing modules

When one of these parameters is present and invalid, the testrunner should display something appropriate. A ""global failure"" might work fine, by simply throwing an exception that QUnit then displays. May need some experimenting.",jzaefferer,MEMBER,2014-05-15T08:36:08Z,2018-03-02T05:29:55Z,True,0.0,,3.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
570,Improve default message for ok assertion,"Assuming that we actually keep it, we should look into improving the default message a bit. This is based on a brief discussion I had on Twitter:

“expected <result> to be ok, instead was <result>” for stuff like QUnit.ok. Usually with QUnit.ok you just get “failed”",jzaefferer,MEMBER,2014-05-15T11:04:44Z,2014-05-15T15:15:54Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
571,"Removal of raises, same and equals","Considering that raises, same and equals are not in the Global scope anymore, can we get rid of them?
At this moment, who updates QUnit should be aware that they doesn't exist anymore in new versions.
Refs #562 and #568",leobalter,MEMBER,2014-05-15T13:07:49Z,2014-05-15T14:48:24Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
574,jshint not checking for trailing comma on test/*,"We fixed JSHint checking for trailing comma on #502/#503 but forgot to set the es3: true option on tests/.jshintrc.
I'll wait for #568 to land, with that we can just remove tests/.jshintrc in order to use ./.jshintrc file as a single and default.
PS: we need to choose if we add QUnit to the globals list or import QUnit from the global scope in all the tests.",leobalter,MEMBER,2014-05-15T16:19:39Z,2014-05-16T08:57:18Z,True,10.0,,6.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
576,Output results to console,"I would like to make an implementation of outputting the test results to the console when it's present in the global scope.
That would make QUnit more connected to Node environments and also to many browsers without removing the HTML output we currently have (that can still be omitted by not having a div#qunit).
It would also be great having this made after #531 with the standardized reporter interface.",leobalter,MEMBER,2014-05-16T18:29:38Z,2014-10-01T14:35:08Z,True,5.0,,4.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
581,Add method for defining custom assertions,"We currently suggest adding function properties to QUnit.assert, though considering the plans in #374, this might actually be a bad idea. If we make the assert argument an instance with a prototype, we may want to remove the global QUnit.assert and instead offer a method for defining custom assertions. Can be a very simple signature like this:
QUnit.addMethod( ""closeEnough"", function( ... ) {
  QUnit.push( ... );
});
We really need a prototype for #374 to see if that is feasible and evaluate this and some other discussions.",jzaefferer,MEMBER,2014-05-30T09:10:39Z,2014-07-31T11:11:50Z,True,4.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
582,Build improvements,"A few things I noticed recently that we should fix or improve in our build.

 Use jscs with jQuery preset (and additional settings if still necessary)
 Simplify jshint configuration to use a single source set, speed up execution
 Make watch task run the default task immediately before starting to watch for changes (I have no clue why that isn't the default)
 Update test-on-node task to remove the globals except for QUnit",jzaefferer,MEMBER,2014-05-31T10:42:41Z,2014-08-06T17:38:23Z,True,6.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
587,Simplify ok assertion,"I'm playing around on the Assertion obj refactoring and I'm thinking about simplifying the ok assertion to use push as other assertions.
For instance I did this commit you can consider as an example: @f7589a9
Let's do this?",leobalter,MEMBER,2014-06-03T00:37:53Z,2014-06-06T20:28:39Z,True,5.0,,4.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
590,Support source maps (Browserify),"When using a build tool like Browserify, it's required to build a bundle even on development. In this environment QUnit will show the line numbers according to the build file which is confusing.
It would be great if QUnit could parse the related source map and reference real source files when an error occurs.",vahdani,NONE,2014-06-10T11:40:22Z,,False,7.0,,7.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
592,Move QUnit.jsDump to QUnit.dump,The implementation has diverged quite a bit from the original jsDump project.,scottgonzalez,CONTRIBUTOR,2014-06-10T14:19:16Z,2014-06-10T14:42:14Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
593,throws: Support callback to assert error,"We should support specifying a callback for the throws assertion to assert the error object.
For example like this https://github.com/scottgonzalez/debt/blob/master/tests/unit/lib/field.js#L21-L24",jzaefferer,MEMBER,2014-06-11T16:14:14Z,2014-06-30T13:20:28Z,True,5.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
594,Test/document usage with Browserify,We should put together an example or actively test using QUnit with Browserify. There may be other issues besides the one reported in #590.,jzaefferer,MEMBER,2014-06-16T10:43:05Z,,False,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
595,assert.throws() doesn't detect TypeError in IE8,"Source code:
function example() {
    throw new TypeError( 'Something' ):
}

assert.throws(
    function () {
        example();
    },
    TypeError,
    'Example something'
);
Passes in Chrome, but fails in IE8:
Example something
Expected:  function TypeError(  a ){
  [code]
}
Result:  {
  ""message"": ""Something"",
  ""name"": ""TypeError""
}",Krinkle,MEMBER,2014-06-18T08:05:17Z,2014-06-18T18:46:13Z,True,3.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False
599,Add option to hide passed tests by default,It is possible to have an option to hide passed tests by default?,chinhodado,NONE,2014-06-22T14:58:21Z,2014-06-23T14:51:24Z,True,3.0,,4.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,False,False
600,Move start/stop to assert,"As a follow-up to #374 and #588, we want to move the stop and start methods to the assert object. As before, this needs to be backwards compatible, so the existing methods need to stay for now.",jzaefferer,MEMBER,2014-06-24T15:33:19Z,2014-07-30T12:08:22Z,True,6.0,,4.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
604,Remove the string comparison signature from the `throws` assertion,"In v2.0, we should remove the string comparison signature from the throws assertion type.  It is an awkward signature because it requires that there is also a message string provided in order for the assertion to work correctly.",JamesMGreene,MEMBER,2014-06-29T02:35:05Z,2016-04-19T15:31:01Z,True,1.0,2.0,2.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
606,Allow calling test() from within loop.,"If you want to generate tests in a loop only one of the will pass the internal validTest() function.
Why not allow creation of tests like this?
  var a, item, i, len;

  a = [1, 2, 3];

  for (i = 0, len = a.length; i < len; i++) {
    item = a[i];
    QUnit.test(""Generated "" + item, function() {
      ok(true);
    });
  }",kasbah,NONE,2014-07-09T17:37:17Z,2014-07-09T17:55:27Z,True,6.0,,6.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
609,assert.throws should support expecting arbitrary objects,"Right now when passing an object that isn't an instance of (a constructor that inherits from) Error, the case falls straight through into the default assumption of a failure with no clear indication of what happened.
Aside from that being bad error handling, I think we can just simply remove the requirement that the expected object be an instance of Error. The method signature wouldn't become ambiguous.
See also qunitjs/api#59. Our documented example has been broken for a while (if it ever worked):
function CustomError( message ) {
    this.message = message;
}
assert.throws(
    function () {
        throw new CustomError(""some error description"");
    },
    new CustomError(""some error description""),
    ""thrown error object is similar to the expected object""
);",Krinkle,MEMBER,2014-07-26T14:17:28Z,2014-07-28T19:17:02Z,True,0.0,pre-2.0,2.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
613,Provide an asyncThrows function,"There are situations where you call a function that does some action and then, at a later time, throws an exception in a callback function outside the scope of any try/catch in the test function. I propose adding either QUnit.asyncThrows or assert.asyncThrows, which lets you indicate that this function will, somewhere down the chain at some other location, throw an exception.
See this jsfiddle for an example of the problem.
http://jsfiddle.net/TwitchBronBron/2fLUb/2/",TwitchBronBron,NONE,2014-07-30T15:03:21Z,2014-07-30T15:38:58Z,True,2.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False
614,Fixture is not being set,"I did run the last QUnit-git agaist jQuery Core tests and noticed a bug.
On @113a9d5f3d89a70cc2907b2adfd042f72838e8c1 I broke the fixture system by removing this line: 113a9d5#diff-f6c2ded91c9881cdc31b5bfcabb54c3bL262
I'm going to repair this and submit a PR with a patch.",leobalter,MEMBER,2014-07-30T20:01:48Z,2014-08-01T20:28:17Z,True,3.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
616,Output timestamps for tests and assertions,"Follow up for #583 (comment)

I wonder if outputting timestamps for tests and assertions could help identify this oddity, along with helping elsewhere. Where ""timestamp"" would be time in milliseconds since the test started running. So the expect would be some millisecond after it started, the passed assertion would be some milliseconds after the test finished.
As for helping elsewhere: For async tests with multiple timeouts, it might be useful to see where the delays actually are, instead of only seeing the total runtime of a test.",leobalter,MEMBER,2014-07-31T13:19:31Z,2014-08-29T21:52:54Z,True,13.0,,3.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
617,Improve fixture clean-up,Running jQuery Core and UI tests with the git build of QUnit are revealing that we need to improve our html fixture clean-up as it is done on jQuery.fn.empty(),leobalter,MEMBER,2014-07-31T21:26:41Z,2014-12-08T20:19:10Z,True,8.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
618,Improve/restore reference errors report,"Reported by @scottgonzalez on jquery/jquery-ui#1301 (comment)

The new version of QUnit does a worse job of reporting reference errors.
Old:

New:

In both cases, the first error that's actually thrown is the one reported in the old version.",leobalter,MEMBER,2014-08-01T16:57:49Z,2014-08-06T18:43:53Z,True,5.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
619,HTML Reporter: expose fixture reset api,"Ref jQuery UI changes like leobalter/jquery-ui@1d438c8 and leobalter/jquery-ui@9a2b345
jQuery UI needs to clean-up html fixture data bindings like events, etc. It does it by hacking QUnit.reset.
I don't like the idea to bring back the fixture resetting to the QUnit's core code, that would make the html reporter detaching worthless.
My idea is to make the html reporter extend QUnit.api to have a fixture resetting handler, like:
QUnit.fixtureReset(function() {
    $( ""#qunit-fixture"" ).empty();
});
Doing so, every fixture call would trigger the callback method before reseting the html fixture.
I proposed the use of module teardown but that might be too much granular.",leobalter,MEMBER,2014-08-01T17:30:46Z,2014-08-05T19:08:36Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
621,HTML Reporter: Only output number of passed assertions for green tests,"This display can be improved:
1. accordion/accordion.html (0, 320, 320)

I suggest only outputting one number, in green, for passed tests:
1. accordion/accordion.html (320)",jzaefferer,MEMBER,2014-08-05T15:37:10Z,2014-08-06T16:34:39Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
625,callbacks[i].call is not a function,"I don't now if is a particular case, but I found the follow error:
TypeError: callbacks[i].call is not a function
callbacks[ i ].call( scope, args );
qunit.js (línea 1168)
The code solution is check if callback is a function before do a .call (line 1167):
if(typeof callbacks[ i ] == ""function"")
   callbacks[ i ].call( scope, args );
I'm using QUnit version 1.14.0. and QUnit.config.autostart = false;",favio41,NONE,2014-08-08T12:51:29Z,2014-08-28T18:17:05Z,True,9.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
630,Fixture cleanup does not cleanup jQuery binds,"Hi,
I'm working on a university project using QUnit. Our team stumbled upon a bug in the cleanup of qunit-fixture.
I recreated the bug using a very small testing project given below. But description first:  Let's have a View which creates elements in the DOM and binds (mouse) events on them. We would like to test whether the clicks are actually forwarded to a given listener. So we created two tests, one that checks if the DOM has been created, and one which tests the click event handling.
// The View
var View = (function(wrapper, receiver) {
    var clickable = wrapper.append('<div id=""clickable""></div>');
    clickable.on(""click"", function() {
        receiver.invoke();
    });

    return {};
});

// The tests
QUnit.test(""testViewDom()"", function(assert) {
    var shouldNotReceive = {
        invoke: function() {
            assert.ok(false, ""Should have not been invoked"");
        }
    }
    var viewInstance = new View($('#qunit-fixture'), shouldNotReceive);

    assert.strictEqual($('#clickable').length, 1);
});
QUnit.test(""testViewClick()"", function(assert) {
    expect(1);
    var receiver = {
        invoke: function() {
            assert.ok(true, ""Should be invoked"");
        }
    }
    var viewInstance = new View($('#qunit-fixture'), receiver);

    $('#clickable').click();
});
The receiver in the first test is actually just to show that it is being invoked in the second test although it should not. What happens is, that this test succeeds and fails in an alternating manner. If it fails, both invoke methods from shouldNotReceive and receiver have been called.
The only quick and dirty resolution to this we could find was unbinding all events in the DOM in the setup function of a QUnit module using $(document).add('*').off();. But that should not be the way to go. If I have missed anything please just let me know",ckuepker,NONE,2014-08-18T08:58:23Z,2014-08-28T11:41:43Z,True,6.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
631,Bad typeof test in src/dump.js,"In src/dump.js#L75, we have
} else if ( typeof obj.setInterval !== undefined && typeof obj.document !== ""undefined"" && typeof obj.nodeType === ""undefined"" ) {
Since typeof obj.setInterval always evaluates to a string, the first test trivially yields true, even if obj.setInterval is undefined.
It should be typeof obj.setInterval !== ""undefined"", like the other two.",xiemaisi,NONE,2014-08-20T09:35:30Z,2014-08-28T16:44:00Z,True,1.0,,3.0,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False
632,Allow tests to return a Promise,"Split out from #534.
Details:

Return a promise from a test
That promise should be automatically asserted to fulfill
Automatic async start/stop

Usage:
QUnit.test(""promises promises..."", function(assert) {
  assert.expect(1);
  return $.ajax(""/api/blah"");
});
Plan is to use a similar patch to what @domenic mentioned doing for Mocha: #534 (comment)
CC: @stefanpenner @domenic",JamesMGreene,MEMBER,2014-08-23T18:12:14Z,2014-09-11T21:54:54Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
633,Support global test-level setup/teardown callbacks,"As originally discussed in #471, it is useful to have setup and teardown callbacks for each test that can be defined globally. For example, in ember the monkey-patching of QUnit.module could be replaced.
As an API I'm suggesting a simple property assignment. This ensures that there is only one place to do this (avoid scattering global setup/teardown across files) and it can be disabled (set to null):
QUnit.config.setup = function() {};
QUnit.config.teardown = function() {};
This would be simple to document as part of QUnit.config.",jzaefferer,MEMBER,2014-08-25T15:38:20Z,2014-09-01T15:07:56Z,True,13.0,,4.0,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
636,Should use `Error#stack` without throwing when available,"In Chrome, at least, a newly created Error instance already has its stack property set, so there is no need to throw it in that situation.  Moreover, throwing it results in both a performance hit as well as debugging hell for any devs with the ""Pause on all exceptions"" setting enabled in Chrome's Dev Tools.
I am doing this in another open source library (polyfill) of mine... works well: JamesMGreene/document.currentScript@dist/document.currentScript.js#L124-137
Basics:
var e = new Error(),
    stack = e.stack;
if (!e.stack) {
  try {
    throw e;
  }
  catch (err) {
    stack = err.stack;
  }
}
// Use `stack`....
I've also used this technique in non-open source projects as well.
cc: @stefanpenner",JamesMGreene,MEMBER,2014-08-26T16:21:39Z,2014-08-29T23:20:50Z,True,4.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
637,Add ability to mark a Test as skipped or incomplete,"Past discussion: #434

Would a PR adding the ability to skip tests be a welcome change? On a custom fork of TinyMCE we're modifying the functionality and as such certain tests are failing. We want to keep the tests in the codebase and are currently forced to comment them out. Having the ability to skip tests would be the best solution in this case.
The syntax would be test.skip(func...).
I'll gladly make a PR for this, just looking for approval before I start working.",es,NONE,2014-08-26T17:24:25Z,2014-09-11T22:00:13Z,True,21.0,,5.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
639,Support for valid XHTML is broken because used tags like br and input aren't closed.,There are lots of places in the code where tags like <br> are used without actually caring for closing them correctly. This breaks XHTML validity and the test runner won't run on TV devices.,SargoDarya,NONE,2014-08-28T12:47:41Z,2014-09-04T16:15:10Z,True,8.0,,4.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
645,Add runtime property to moduleDone event data,"The done/run-end, testDone/test-end, and log/assert logging callbacks all already have a runtime property in their details object. We should add the same kind of property to the details object for the moduleDone/module-end logging callback for consistency.
The api.qunitjs.com docs will need to be updated afterward as well.",JamesMGreene,MEMBER,2014-08-31T14:51:02Z,2014-09-04T14:03:04Z,True,1.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
647,Global `beforeEach`/`afterEach` should synchronize before module `beforeEach`/`afterEach` run,"As noted in #634 (comment) and #634 (comment), there is a bug in the newly introduced beforeEach/afterEach hooks: the global beforeEach/afterEach hooks should be allowed fully synchronize before the module-level beforeEach/afterEach hooks are run.  If they don't, it easily leads to race conditions.",JamesMGreene,MEMBER,2014-09-03T14:17:18Z,2014-09-04T15:53:46Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
651,Make filter feature discoverable in HTML reporter,"We still support adding ?filter=[something] to the URL to run a subset of tests. This is useful when a selection of tests across modules should run. Unfortunately, this is almost impossible to discover, we don't even document it on the page for QUnit.config.
One idea I had when talking about how to make this coverable with Yehuda was to put a search icon in the header, next to the module select. Clicking that would bring up an input that maps to the filter query string, just like selecting a module or clicking a Rerun link does.",jzaefferer,MEMBER,2014-09-03T21:20:10Z,2014-12-23T15:12:09Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False
654,"Build: Remove jscs linelength exception, fix or ignore deepEqual tests","Disabling the line length check in jscs for everything is bad. We should try to only exclude the deepEqual tests for that check, or exclude that file (we never touch it anyway). Its much important to have the line length check for src/ in place.",jzaefferer,MEMBER,2014-09-04T18:55:40Z,2014-11-21T17:32:32Z,True,0.0,pre-2.0,1.0,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
655,"Remove QUnit.stop, update QUnit.start to only work globally","Related to #653.
In QUnit v2.0.0:

QUnit.start will be updated to only affect the run's initial blocking state as controlled by QUnit.config.autostart. It will no longer control asynchronous flow inside of Test callbacks.
QUnit.stop will be removed completely. It will no longer control asynchronous flow inside of Test callbacks, nor be allowed to affect the run's blocking state.",JamesMGreene,MEMBER,2014-09-05T16:01:34Z,2016-04-18T16:09:51Z,True,8.0,2.1.0,5.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
656,Remove QUnit.asyncTest,"Related to #653.
In QUnit v2.0.0, QUnit.asyncTest will be removed as it doesn't mesh with the new assert.async API.",JamesMGreene,MEMBER,2014-09-05T16:03:37Z,2016-04-18T16:09:51Z,True,1.0,2.1.0,2.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
657,Remove private async parameter from QUnit.test,"Following #653, we need to remove the private [and undocumented] async parameter from QUnit.test in v2.0.0.
Having the framework mark a test as async no longer makes much sense, at least not without further changing the API (e.g. to provide the associated ""done"" callback returned from an initial framework call to assert.async as a new callback argument, for example).",JamesMGreene,MEMBER,2014-09-05T16:16:59Z,2016-04-18T16:09:51Z,True,1.0,2.0,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
658,"Specify env requirements, maybe make them stricter","We had several recent pull requests that we're dealing with the setTimeout support checks in the source itself and in various tests. I'm currently wondering if we can make support for setTimeout a requirement for using QUnit. If we did that, we could remove a bunch of duplicate branches and simplify our tests.
This probably affects #540. But just as I don't know what ""features"" the new envs have that that is supposed to support, I don't know what we currently support that doesn't have setTimeout.
Considering other efforts to standarize across frameworks, it might be good to research what other frameworks support, e.g. what options exists in, let's say, Ringo.",jzaefferer,MEMBER,2014-09-05T20:26:31Z,2015-10-16T20:48:29Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
659,"Defer ""begin"" callback until test run actually starts","Currently in QUnit.load, we immediately invoke the logging callbacks for ""begin"" (a.k.a. ""runStart"") when the page loads, even if QUnit.config.autostart is set to false and thus won't actually begin yet: src/core.js#L404-L406
This seems inaccurate both from a timing perspective (for reporters marking the time of events) as well as from a Test.count perspective: if the run hasn't begun yet, it may be because there are still tests loading asynchronously, and thus their count would not be included in the data sent with the ""begin"" event.
This logging callback should be called from somewhere inside the QUnit.start execution stack [and only fired once, when the test run actually begins] instead.",JamesMGreene,MEMBER,2014-09-09T13:59:19Z,2014-09-11T20:52:18Z,True,5.0,pre-2.0,3.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
660,Investigate removing QUnit.config.autorun,"From a cursory glance through the codebase, I'm pretty sure that QUnit.config.autorun really isn't necessary if we make some other updates.
It is also not officially documented, though you can definitely find a few blog posts about people leveraging it to make their QUnit tests work on Rhino. As such, I'd suggest we leave it in till v2.x.",JamesMGreene,MEMBER,2014-09-09T14:38:00Z,2016-04-19T15:31:01Z,True,3.0,2.0,3.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True
662,HTML Reporter should get module names from moduleStart/moduleDone events,"The HTML Reporter currently get all of the module names by creating an object called QUnit.config.modules (which contains key-value pairs of module name to true mappings) and having module names added to it during the QUnit.module calls.
Instead of adding its own object into QUnit.config, the HTML Reporter should create its own object independent of QUnit core and get the module names by listening for the moduleStart event instead.
Such a change would be 100% backward compatible, other than in the possible edge case of QUnit somehow experiencing systemic failure and being unable to run all of the modules.",JamesMGreene,MEMBER,2014-09-11T02:51:06Z,2014-12-01T18:42:30Z,True,2.0,JS Reporter,2.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True
663,Bring back assert.raises,"This is something that came up in #540. throws is problematic in some environments, which the raises alias avoids. We could just add assert.raises = assert['throws']; in the source and add a note about the alias in the documentation for throws. Very little effort to provide a simple workaround when throws can't be used.
For some history, #323 got rid of parsing errors due to QUnit using throws in the first place. The same workaround is still need to use the method in tests.
It would be useful to have a list of environments affected by this. From the PR linked above, I know of Closure Compiler and Narwhal. @jdalton do you know of others?",jzaefferer,MEMBER,2014-09-13T16:28:09Z,2014-10-06T20:41:36Z,True,11.0,pre-2.0,4.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
664,Collapse failed tests in HTML reporter,"Often when I have many failing tests I like to collapse the failed tests with something like
$('.fail .qunit-assert-list').addClass('qunit-collapsed');

This let's me quickly scan and find the simplest failing tests that I should be working on first.
It would be great if this feature were officially added somewhere in the UI.",mmun,NONE,2014-09-13T17:35:25Z,2015-10-08T00:48:06Z,True,11.0,,6.0,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False
665,Make QUnit.config.beforeEach/afterEach functions rather than setters,"As I discussed with the rest of the QUnit core team in Chicago, I think that QUnit.config.{beforeEach|afterEach} should be changed to be functions rather than setters.
This is beneficial in the following ways:

Allows consumers to easily supply more than one beforeEach/afterEach callback.
Allow plugins such as custom assertions that currently have to use hacky hooks via the QUnit.testStart/QUnit.testDone logging callbacks to achieve global beforeEach/afterEach behavior to get a proper extension point with access to the correct Test and Assert contexts rather than needing to rely on QUnit.config.current. Clear evidence of this can be seen in the JamesMGreene/qunit-assert-step @ qunit-assert-step.js#L21-L26.
Will be required for API consistency-sake anyway [in v2.x] if my forthcoming PR proposal for Issue #543 (nested suites) is accepted.",JamesMGreene,MEMBER,2014-09-16T15:53:47Z,2014-10-17T15:09:12Z,True,15.0,pre-2.0,4.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True
666,Deprecate assert.expect?,"@Krinkle expressed an opinion that, with the assert.async() addition, we no longer need assert.expect() whatsoever.  At first I was a bit skeptical of this statement as I have grown into the habit of always using assert.expect() but I later realized he was correct.
For example, take this ""synchronous callback"" example from the Cookbook page:
QUnit.test( ""a test"", function( assert ) {
  assert.expect( 2 );   // `assert.` added

  function calc( x, operation ) {
    return operation( x );
  }

  var result = calc( 2, function( x ) {
    assert.ok( true, ""calc() calls operation function"" );
    return x * x;
  });

  assert.equal( result, 4, ""2 square equals 4"" );
});
While this setup can be effectively replaced with the assert.async() approach as well, I would argue that that is semantically invalid as the operation is intended to be synchronous (@Krinkle disagrees, FYI).
However, there are still at least 2 other ways to easily test this without using assert.expect, as @Krinkle demonstrated in a gist:
Simple call counter:
QUnit.test( ""a test"", function( assert ) {
  var calls = 0;

  function calc( x, operation ) {
    return operation( x );
  }

  var result = calc( 2, function( x ) {
    calls++;
    return x * x;
  });

  assert.equal( result, 4, ""2 square equals 4"" );
  assert.equal( calls, 1, ""calc() calls operation function"" );
});
Sinon spies:
QUnit.test( ""a test"", function( assert ) {
  var multiply = sinon.spy(function( x ) {
    return x * x;
  });

  function calc( x, operation ) {
    return operation( x );
  }

  var result = calc( 2, multiply );

  assert.equal( result, 4, ""2 square equals 4"" );
  assert.equal( multiply.callCount, 1, ""calc() calls operation function"" );
});
@jzaefferer @leobalter @gibson042 @scottgonzalez et al: Thoughts? Do you see any other use cases were assert.expect is important to keep around? Does it provide enough convenience over the two alternative approaches above that we should keep it around anyway?",JamesMGreene,MEMBER,2014-09-17T18:44:19Z,2014-09-24T16:01:58Z,True,20.0,pre-2.0,6.0,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
668,Fail assertions that run after done() is called,"This test currently passes no matter where the start() call is placed (verified with 1.14 and master):
test(""x"", function() {
    expect( 2 );
    stop();
    setTimeout(function() {
        ok( true, ""y was invoked"" );
    });
    setTimeout(function() {
        ok( true, ""z was invoked"" );
        // would also work with the call being in the other timeout, or
        // before this callback's preceding `ok` assertion
        start();
    });
});
This came up in #666, where it was argued that it's fine as long as it is in the same event loop iteration. This shows that anything that runs before QUnit resumes execution is accepted. Which makes sense when looking at the relevant code.
I consider this a bug, but considering the amount of existing testsuites a fix is likely to break, we should lang this in 2.0, where the failure message can be very explicit about the likely cause.",jzaefferer,MEMBER,2014-09-22T13:42:23Z,2014-11-06T11:52:18Z,True,8.0,pre-2.0,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
671,Consider adding .npmignore file,"Hey,
I am a happy user of your library, but as my project grows we have a lot of dependencies.
We could save a lot of space if you added .npmignore file to your project.
I even found tool that can help you with it: https://github.com/inikulin/dmn
Thanks!",hakubo,NONE,2014-09-27T14:10:13Z,2014-10-02T20:23:35Z,True,4.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
672,propEqual for TypedArrays (was deepEqual for TypeArrays),"I've notice that qunit gives incorrect results when using typedArrays (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays).
I think it will be a great improvement if it will let you compare standard array and typedarrays like for example:
var ta = new Uint8Array(4);
deepEqual(ta, [0, 0, 0, 0], ""Typed array and array equals"");
I was checking the code and I guess one solution could be to change core.js, in the line when you know that the typeof is an object, and do something like:
...
if ( typeof obj === ""object"" ) {
    if ( obj instanceof Int8Array ||
        obj instanceof Uint8Array ||
        obj instanceof Uint8ClampedArray ||
        obj instanceof Int16Array ||
        obj instanceof Uint16Array ||
        obj instanceof Int32Array ||
        obj instanceof Uint32Array ||
        obj instanceof Float32Array ||
        obj instanceof Float64Array ) {
        return ""typedarray"";
    }
    return ""object"";
}
And then on equiv.js returns a new function for the new type.",fernandojsg,NONE,2014-09-29T18:24:38Z,2017-04-09T15:03:00Z,True,11.0,,6.0,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
673,QUnit and Sinon causes lib not to load,"So, I was making tests for an app that I'm developing, using QUnit and Sinon, but my tests all began to fail.
It was because one my libs, iScroll, was not found for my tests cases, even though in the application it was used normally.
Basically, I was testing the render and load of several views, and I was instantiating iScroll on mostly of them
After some brute force tests to try to discover why this library was not found (at first, I really thought that was a requirejs problem), I found that if I put a plain html with:
    <script src=""../test/libs/qunit.js""></script>
    <script src=""../test/libs/sinon.js""></script>
    <script src=""libs/iscroll/build/iscroll.js""></script>

IScroll function will be undefine.
If I do
    <script src=""libs/iscroll/build/iscroll.js""></script>
    <script src=""../test/libs/qunit.js""></script>
    <script src=""../test/libs/sinon.js""></script>

or
    <script src=""../test/libs/qunit.js""></script>
    <script src=""libs/iscroll/build/iscroll.js""></script>

or
    <script src=""../test/libs/sinon.js""></script>
    <script src=""libs/iscroll/build/iscroll.js""></script>

The problem goes away, and IScroll is defined.
This is not a hard problem to find an workaround for, I could easily stub iScroll or something.
But why this could happen?",rafaelrabeloit,NONE,2014-10-01T20:33:28Z,2014-10-02T11:27:50Z,True,3.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
674,"HTML reporter regression, output order depends on runtime order","Check out this test page: http://jsbin.com/leyela/1/edit?html,output
Run this once, everything is green. Then change the second expect call to a different number, rerun. B fails. Rerun, now B is listed first. Fix the test, rerun. B still listed first. Rerun, B back at the bottom.
This is broken since 1.15, in 1.14 it works fine: http://jsbin.com/beyude/1/edit",jzaefferer,MEMBER,2014-10-02T11:42:57Z,2014-12-01T18:42:30Z,True,12.0,pre-2.0,3.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
676,"assert.equal( 'foo', [ 'foo' ]) passes","Apologies if this has already been raised, I couldn't find it. If you use assert.equal to compare a value to an array containing that value, the test passes! Surely this isn't intended behaviour?
http://jsfiddle.net/rich_harris/f7f77w0h/",Rich-Harris,NONE,2014-10-02T16:31:51Z,2014-10-02T16:40:44Z,True,5.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
677,List modules and tests names on QUnit.begin,"Requisite for #674.
This is necessary to set the tests and modules order for loggings, specially our detached html reporter.
Relates to #662 and #472",leobalter,MEMBER,2014-10-03T23:03:12Z,2014-12-01T18:42:30Z,True,1.0,pre-2.0,2.0,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
683,Qunit not finishing on Mac OS X,"Hi,
I'm using ember-cli for my project. There we got some tests. For testing the existens of models we use for example:
import {test, moduleForModel} from 'ember-qunit';

moduleForModel('user', 'User', {
  // Specify the other units that are required for this test.
  needs: ['model:session', 'model:otherOne', 'model:billing']
});

test('it exists', function() {
  var model = this.subject();
  // var store = this.store();
  ok(model);
});
then it runs all tests but stops at the last test and doesn't show the stats.
when I change the needs line to:
...
needs: ['model:session', 'model:otherOne']//, 'model:billing']
...
then naturally the test fails. with this output
not ok 98 PhantomJS 1.9 - User: it exists
    ---
        actual: >
            null
        message: >
            Died on test #1     at http://localhost:7357/assets/test-support.js:418
                at test (http://localhost:7357/assets/test-support.js:284)
                at :18
                at http://localhost:7357/assets/vendor.js:77
                at http://localhost:7357/assets/test-loader.js:14: No model was found for 'billing'
        Log: >
    ...

And it also prints the stats correctly like this:
1..101
# tests 101
# pass  100
# fail  1

What am I doing wrong?
Seems to me that the helper doesn't get killed correctly.
btw: in the browser everything works great.",spruce,NONE,2014-10-12T13:37:31Z,2014-10-12T14:06:42Z,True,1.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True
684,Module filter (select#qunit-modulefilter) not visible/in DOM,"The module filter (select#qunit-modulefilter) in the toolbar sometimes doesn't appear. I've experienced this after:

Loading test files dynamically through RequireJS (with callbacks).
When using QUnit.stop() and QUnit.start() several places, e.g. with Qunit.asyncTest() (where Qunit.stop() and QUnit.start() are necessary).

One fix could be to allow users to reload the toolbar once all tests have concluded:
QUnit.reloadToolbar = function(){
    var toolbar = id(""qunit-testrunner-toolbar"");
    if (toolbar) {
        toolbar.parentNode.removeChild(toolbar);
    }
    var userAgent = id(""qunit-userAgent"");
    var toolbar = document.createElement('div');
    toolbar.id = ""qunit-testrunner-toolbar"";
    userAgent.parentNode.insertBefore(toolbar, userAgent);
    appendToolbar();
};
var whenTestsAreDone = function(){
    QUnit.reloadToolbar();
};",kafoso,NONE,2014-10-27T10:33:09Z,2014-11-06T11:55:55Z,True,4.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,False
685,Various regressions,"In test/setTimeout.html, the suite finishes, but the second test is shown as still running.
In test/headless.html, the done log reports 6 failures, also shown in the document title. Which begs another question - should the document title be updated when the HTML reporter isn't used?
In test/stack.html, there are three unfinished tests. Might be intentional, but I can't tell. Looks wrong, like in the timeout test above.

Need to also make it easier to run these manually. Grunt/phantom doesn't run some of them at all, some errors are only apparent on visual inspection.
@leobalter could you look into these?",jzaefferer,MEMBER,2014-11-06T11:23:05Z,2014-12-01T18:42:30Z,True,4.0,pre-2.0,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
688,Need to deep-copy test environment to keep tests atomic,"The third usage example here doesn't work: http://api.qunitjs.com/QUnit.module/
The first test adds a property to this.parts, which is still there in the second test, since the parts array isn't deep-copied. The test mentioned in #477 verifies that behaviour, but its wrong, which is why I'm removing those tests in #687.
There's another issue with that example, see qunitjs/api#90
To fix this, we should deep-copy the test environment properties.",jzaefferer,MEMBER,2014-11-06T13:24:51Z,2014-12-01T18:36:31Z,True,0.0,pre-2.0,1.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False
689,Adjust stack trace to include line numbers in front of URLs (or wrap stack output in CSS).,"I'm not sure this warrants inclusion into core, but I thought I should ask. If it does, I am happy to send you a pull request.
The issue I am experiencing:

I am testing using qunit and phantomJS headless browser (w/capybara+poltergeist driving it)
When a qunit test error occurs, the only way I can get a look at the error message (the entire qunit page) is by getting a print screen of the page from phantomjs - I can't view the actual html
This is an issue because, when testing very long URLs, I cannot see the line number where the qunit test failed:

The headless browser has a finite window width, the screen print cuts off long URLs. The CSS of the qunit page does not line break the stack output.



I wrote a personal patch to fix this, simply by moving the line number in front of the URL in the output.
My fix is to simply add two lines above this line:
https://github.com/jquery/qunit/blob/f2d790683682607f48ad97473499c823f8635c28/src/core.js#L499
var regex = /^(.*)(https{0,1}:\/\/.*):(\d+)$/;
stack[i] = stack[i].replace(regex, ""$1$3:$2"");

The main reason not to include this, I think, is that some people might be relying on the exact formatting of these stack outputs?
The other alternative to fixing this issue for headless users like me, would be to adjust the CSS on the output page to wrap the output of these lines rather than have them scroll off the edge of the screen. My css/html skills are pretty bad so I'm not sure I can figure out how to do that. Any tips/direction on that solution would be great - I'd be happy to try to implement that with a little guidance, alternatively.",science,NONE,2014-11-09T06:29:37Z,2014-11-18T18:28:00Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False
690,"rename tag ""1.15.0"" to ""v1.15.0""","initially thought ""v1.14.0"" was the latest (as its listed on top in github), but when following documentation and setting up tests, the latest documentation does not mach ""v1.14.0"" .. tag ""1.15.0"" needs to be renamed to ""v1.15.0"" which is the latest and matches documentation.",farinspace,NONE,2014-11-09T21:37:19Z,2014-12-01T17:42:07Z,True,10.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
693,Make it more obvious why test execution order changes,"When QUnit.config.reorder is enabled and previously failed tests run first, we should show ""Rerunning failed tests:"" or something like that in the summary of the HTML reporter, replacing the default ""Running tests:"". This text will also be readable when async tests take long enough or the testrunner stops. In the context of confusion about non-atomic tests suddenly failing, this may still help.",jzaefferer,MEMBER,2014-11-19T14:44:33Z,2015-03-16T11:27:29Z,True,0.0,1.18.0,1.0,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False
694,Can we get a release?,https://github.com/jquery/qunit/blob/2e994be16587f2525b4e4225a6d83c2806757cba/src/core.js#L524-L533 + built in promise support would be killer..,stefanpenner,CONTRIBUTOR,2014-11-25T02:33:52Z,2014-12-01T01:23:54Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
695,Add first year to copyright note in addition to the current year,"The copyright note for QUnit should contain the first year for the copyright in addition to the current year, see https://github.com/jquery/foundation/issues/337",agcolom,CONTRIBUTOR,2014-11-26T14:02:51Z,2014-12-01T18:09:52Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
696,Fix long-running tests in our testsuite,"This is about our own testsuite. There are several tests that, on my machine, take more than 250ms to run. Whatever they're doing, I don't think we need long timeouts like that. Optimizing those tests could shave off more than a second of the 3s runtime.",jzaefferer,MEMBER,2014-12-01T01:13:48Z,2014-12-01T18:23:58Z,True,0.0,,2.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
697,Restore QUnit.reset,"In #617 we decided to revert QUnit.reset back to ""core"". This issue is for that revert, while we still need to implement something better to address #617.",jzaefferer,MEMBER,2014-12-01T17:14:51Z,2014-12-01T18:22:53Z,True,0.0,pre-2.0,1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
703,test/headless.html regression,"Leftover from #685:
In test/headless.html, the done log reports 6 failures, also shown in the document title. Which begs another question - should the document title be updated when the HTML reporter isn't used?
At least one of these is caused by the fixture test also accessing #qunit-testresult. We can probably just drop that assertion, it has nothing to do with testing fixtures.",jzaefferer,MEMBER,2014-12-01T18:43:53Z,2014-12-01T19:17:06Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
706,Show source location of passed tests,"Every now and then I'm looking at a green suite and want to know where the source for a specific test is located. We capture that information already, for all tests, but only output it when a test fails. We could always output for non-collapsed tests, or only for non-collapsed passing tests (since failing tests will output it already in some way).",jzaefferer,MEMBER,2014-12-01T21:02:47Z,2015-05-18T15:34:56Z,True,6.0,,4.0,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False
707,Discussion: Move to es6 modules to build QUnit,"We should consider using es6 modules to build QUnit, moving from source concatenation to a standard format. The biggest issue with transpiling to es6 are dependencies, but since QUnit bundles its dependencies anyway, we don't have to care about that. There shouldn't be a difference for users either, since the built files would look mostly the same as they do now.  If that works out, we could also use other es6 features in the QUnit source.
Currently our tests don't need a build step, which we may want to keep. If compilation is fast enough, we could move those to es6 as well, if there are obvious benefits.
Some background and examples: https://medium.com/@brianleroux/es6-modules-amd-and-commonjs-c1acefbe6fc0 (which mostly uses a transpiler and browserify, not exactly what we'd want)",jzaefferer,MEMBER,2014-12-04T11:42:23Z,2016-08-05T18:12:53Z,True,20.0,,8.0,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False
708,ReferenceError: Faye is not defined,"I have been using faye in my Emberjs application and seems to work fine as expected. But my test (qunit) suite crashes with faye is not defined.
Link to Stack question",chetang,NONE,2014-12-04T15:14:37Z,2014-12-04T15:25:33Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
712,HTML reporter mishandles skipped tests,"The HTML reporter gets a couple of small things wrong with skipped tests, resulting in their suppression by ""hide passed"" and their invisibility when not autorun: http://jsfiddle.net/85rw2Lr3/",gibson042,MEMBER,2014-12-09T03:11:13Z,2014-12-09T17:43:31Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
716,Uncaught TypeError: Cannot set property 'innerHTML' of null at qunit:2638,"I've just updated from 1.15 to 1.16 and one of my tests fail with:
Uncaught TypeError: Cannot set property 'innerHTML' of null at qunit.js:2638
At line 2638 in qunit.js I see:
if ( tests ) {
  id( ""qunit-testresult"" ).innerHTML = html;
}
Until now I've used markup template like:
<body>
    <h1 id=""qunit-header"">Wicket Ajax tests</h1>
    <h2 id=""qunit-banner""></h2>
    <div id=""qunit-testrunner-toolbar""></div>
    <h2 id=""qunit-userAgent""></h2>
    <ol id=""qunit-tests""></ol>
       <div id=""qunit-fixture""></div>
Looking at http://qunitjs.com/ I see that now the template should be just:
<body>
  <div id=""qunit""></div>
  <div id=""qunit-fixture""></div>
This fixed my test !
Problem 1) I didn't see a HEADS UP about this change in a minor release
Problem 2) Now the header says ""All tests"". Is there a way to use ""Wicket Ajax tests"" as before ?
Problem 3) The qunit-header is no more a link. qunit-banner contains a link but it is not clickable because it doesn't have text child element:
<h2 id=""qunit-banner"" class=""qunit-pass""><a href=""http://localhost/ajax-tests/test/js/all.html""></a> </h2>",martin-g,NONE,2014-12-11T09:17:22Z,2015-01-19T11:03:42Z,True,5.0,,4.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
717,Config hidepassed,"The QUnit.config.hidepassed value set before page load used to affect the UI. In recent versions it no longer does with its value paved by the UI checkbox value. I'm currently doing something like:
QUnit.begin(function() {
  QUnit.config.hidepassed = true;
  document.getElementById('qunit-tests').className += ' hidepass';
  document.getElementById('qunit-urlconfig-hidepassed').checked = true;
});
Is there a better way?",jdalton,NONE,2014-12-15T04:55:49Z,2014-12-23T14:59:53Z,True,5.0,1.16.1,3.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
718,1.16.0 release lacks GitHub release description,The entry for 1.16.0 on https://github.com/jquery/qunit/releases lacks a description/summary.,cvrebert,NONE,2014-12-15T05:33:41Z,2014-12-17T15:40:26Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
721,HTML Reporter Failure Assertion Source Location Regression On File System,"In QUnit 14, the HTML reporter would list the failed test assertion source location at the point in the user's test when run from the file-system. In QUnit 15 it seems to have disappeared, and in 16 and edge, it reports it in the QUnit infrastructure code. For an example, see qunit-code-fail.html. The following versions have the following source outputs:



Version
Assertion source output




1.14.0
@file:///JSCover-maven-plugin/plugin-parent/data/src/test/javascript/spec/qunit-code-fail-spec.js:3:1


1.15.0
No source is reported


1.16.0
applyCurrent/<@file:///JSCover-maven-plugin/plugin-parent/data/src/test/javascript/lib/qunit/qunit-1.16.0.js:1951:5


git-current
applyCurrent/<@file:///JSCover-maven-plugin/plugin-parent/data/src/test/javascript/lib/qunit/qunit-git.js:1933:5",tntim96,NONE,2014-12-24T01:29:19Z,2015-01-19T11:43:11Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
723,Don't ignore bower.json in bower.json,"bower.json includes important metadata about the package, namely the main entry point.
Can you remove bower.json from the ignore list?
This will enable things like RaveJS, StealJS, and other module loaders to know how to load QUnit without configuration.
Thanks!",justinbmeyer,NONE,2014-12-29T02:47:49Z,2015-01-02T11:49:57Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
726,I would like a run once at very beginning right before Qunit starts testing,"Setup:
My specific case has to deal with the unit testing of HTML5 custom elements.
When I create a HTML5 custom element I typically have some javascript backend that handles some functionality.  For example lets say I have a custom element that have a custom element to take in a number does some fancy math and changes some html internally.
here is what the js side would look like.
function CustomElement1() {
}
CustomElement1.prototype = Object.create(HTMLElement.prototype);
CustomElement1.prototype.fancyFunction = function(number) {
 // do fancy stuff here and interaction with some shadow DOM
};

I am using HTML imports to load and register the custom elements so it will be set up and ready to use with one line of import code
I am also using a code coverage library (http://blanketjs.org/) that works in tandem with QUnit.
Blanket modifies the javascript file to perform code coverage.
But I think it can only modify code in a QUnit instance.  By that I mean only js code run inside a QUnit code is registered by blanket.
tl;dr using custom elements and code coverage library.
Constraints:
Registering a custom element can only happen once per a page and must happen before any tests make use of the element.
To make blanket work I must register the element inside of a Qunit method
Problem:
Right now I use the Qunit setupOnce inside modules to initialize the element and it works great!
BUT as a result I can only use one module in my test code instead of multiple modules.  (Or add some other setup that makes it call only once regardless of test order)
I noticed that you guys are moving to a 2nd version of QUnit to so it would be really nice if you could either support custom element registration that can occur after reporters do some tooling.
Or if you had some advice on the best way to mitigate this problem with the best coding style.
Thanks!  I love your library!",dtracers,NONE,2015-01-10T03:06:23Z,2015-01-19T11:39:17Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
732,1.17.0 & phantomjs,"Heads up, I'm seeing tests hang when using phantomjs as phantomjs test.js. It looks like things are getting exported correctly and the QUnit.load() is getting called. I'll know more this evening when I dig-in fully.",jdalton,NONE,2015-01-19T21:21:40Z,2015-01-20T18:31:06Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
733,1.17.0 breaks phantomjs,"Hi,
just updated qunit and my phantomjs gets stuck in:
PhantomJS 1.9.8 (Linux) ERROR: 'TypeError: 'null' is not an object (evaluating 'toolbar.appendChild') - http://localhost:9876/base/node_modules/qunitjs/qunit/qunit.js?0db9af2b5ad31c46fe2cfa82bbe2761c44bb36f8'",vampolo,NONE,2015-01-20T01:27:26Z,2015-01-20T05:53:29Z,True,6.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
736,"Use jquery-release changelog, integrate into build/release.js","Currently we use git changelog via git-extras, which doesn't work that well anymore and has no ticket or commit references. Updating that manually is annoying, too. Would make future releases easier to integrate the changelog generated by jquery-release into our custom release, somewhere prepending it to History.md, or just removing that file and only using the generated changelog on the repo's release page.",jzaefferer,MEMBER,2015-01-20T19:04:11Z,2018-12-29T02:33:25Z,True,2.0,,3.0,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False
738,Provide link to commit or issue in changelog,Not a real issue but it would be great if you can add a link to the commit or the issue in the change log. It may provide further information for guys looking in the source code.,crissdev,NONE,2015-01-21T14:59:13Z,2015-01-21T15:02:20Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
739,async in beforeEach support,"I'm trying to use 'async' in 'beforeEach' to wait for promise to finish.
I see that QUnit.start() and QUnit.stop() were deprecated and 'beforeEach' does not get 'assert' as its parameter.
How this can be done ? And if not, why ?",mateuszf,NONE,2015-01-21T16:16:53Z,2015-01-21T16:47:33Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
740,return QUnit.url on QUnit < 2.0.0,Ref d86d6c3#commitcomment-9471316,leobalter,MEMBER,2015-01-28T03:41:03Z,2017-04-18T04:24:56Z,True,16.0,,7.0,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False
741,Collaboration with Intern,"We have a ticket to document integration with CI tools, including intern, though I wonder if that is really a good investment of our time. Elsewhere @csnover wrote:

I’ve actually got a mostly-working branch with a full* QUnit API compatible interface so, with only a small amount of work to address the TODOs (probably only a day or two of work?), you should be able to drop existing QUnit tests into Intern by wrapping them with define([ 'intern!qunit'], function (QUnit) { }) and have them Just Work.
(And then, fingers crossed!, I can convince team QUnit to come over & help me get cool new stuff into Intern more quickly :)))

I still haven't gotten around to actually trying out Intern myself. We're going with Intern to test PEP, but otherwise there's nothing happening, as far as I know.
@leobalter @JamesMGreene @Krinkle did one of you have more exposure to Intern? Or do you have interest and time to look into that?
@csnover apart from what I quoted above, is there something we could or should work on asap for better QUnit into Intern integration? What do you have in mind beyond that?",jzaefferer,MEMBER,2015-01-28T14:07:56Z,2015-10-16T20:44:51Z,True,10.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
742,Invalid filter comparison results in no tests being run.,"In qunit/src/test.js on line ~346 there is this code:
if ( fullName.indexOf( filter ) !== -1 ) {
    return include;
}

Which is doing a comparison of an unmodified filter var against a lower cased fullName var:
fullName = ( this.module.name + "": "" + this.testName ).toLowerCase();

Thus tests with capital letters can't be matched.
Two options for fixes...
Case Sensitive filters:
fullName = ( this.module.name + "": "" + this.testName );

Case Insensitive filters:
filter = config.filter.toLowerCase();",lobacten,NONE,2015-02-03T17:10:55Z,2015-03-01T07:30:10Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
743,"All Test Results are not showing in test window, Only 1st and last appearing","Hi Team,
I have used qunit to write the API Tests. However, when i run all tests in that case it will show only 1st and last test case result. For others it simply show empty containers. However, i am getting results for all tests. I have attached screen shot for your reference.  Kindly, let me know if i am doing any thing wrong some piece needs to be updated.


Thanks,
Rahul",rahulsahay19,NONE,2015-02-04T05:52:46Z,2015-02-06T05:36:39Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
744,Add assert.notOk() function,"The same way that equal(), deepEqual(), propEqual() and strictEqual() has their negative versions, ok() should have a notOk() negative version to check for falsy values, in a more clean and explicit way that by adding a negation operator in front of the value to check.
assert.ok(!value)
assert.notOk(value)",piranna,CONTRIBUTOR,2015-02-04T12:04:20Z,2015-03-04T15:58:52Z,True,12.0,1.18.0,6.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
748,test filter input fails without any module,"Steps to reproduce:

Open http://jsfiddle.net/gj6hudry/ sample.
Type 'testname' in 'Filter' input and click 'Go'.
Error ""Cannot read property 'options' of null"" will be occurred at:
selection = decodeURIComponent( selectBox.options[ selectBox.selectedIndex ].value ),",San4es,NONE,2015-02-11T11:47:33Z,2015-03-04T18:02:30Z,True,1.0,1.18.0,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
749,1.17.1 - Filter does not work correctly with upper case letter in test name,"Steps to reproduce:

Open http://jsfiddle.net/nxrLcppq/
Type ""Test Name"" in ""Filter"" input and click ""Go""
No any tests will be run

Compare results with ""test name"" filter string.
Seems, this issue was appeared after 1d44eb3 , where
filter = config.filter && config.filter.toLowerCase(),
was replaced by
filter = config.filter,",San4es,NONE,2015-02-11T12:15:31Z,2015-03-01T06:45:20Z,True,1.0,1.18.0,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
750,Dump: .name/.message-property doublettes,"If an Object has the properties .name and/or .message the dump of the object contains a doublette of said properties.
Example: http://jsfiddle.net/c50ndqhq/1/",bubens,CONTRIBUTOR,2015-02-11T22:41:10Z,2015-03-05T19:25:42Z,True,2.0,1.18.0,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
754,`testIds` are invalidated when using toolbar options,"Version: 1.17.1 / 1.17.2-pre
Steps to repro:

Specify two (2) testId (e.g. http://localhost:3003/?testId=1a9c4dda&testId=f0342ae5)
Click/select 'Check for Globals'

Result: Test refreshes and the URL is encoded http://localhost:3003/?testId=1a9c4dda%2Cf0342ae5 and none of the tests run.
Expected: Same are repro step 1 but with option flag(s) set.
Related to: #569",lamchau,CONTRIBUTOR,2015-02-27T05:29:26Z,2015-03-04T01:42:16Z,True,3.0,1.18.0,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
757,assert.greaterThan() and assert.lesserThan() needed?,"Is there a need for assert.greaterThan() and assert.lesserThan() function??
I know we can implement them using assert.ok(a > b, message), but according to me its better to have a seperate function for it as many other unit testing frameworks have.
assert.lesserThan( first, second, message );
assert.greaterThan( first, second, message );
I can apply the change if needed.",gauravmittal1995,CONTRIBUTOR,2015-03-03T00:25:43Z,2015-03-03T13:01:33Z,True,4.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
765,Failed assertions throws an AssertionError ,"based on http://wiki.commonjs.org/wiki/Unit_Testing/1.0, we could change QUnit to throw an AssertionError for failed assertions.
new assert.AssertionError({message: message, actual: actual, expected: expected})
assert.AssertionError instanceof Error
This way, we would not only be closer to a standard but we would be able write proper tests for failed assertions, which we don't have today.
The other side of doing this is not running the following assertions in the same test block. This might be considered as a bad thing, but regarding a test block should more specific, this is not that bad, IMHO.",leobalter,MEMBER,2015-03-06T17:38:11Z,2015-03-09T19:22:30Z,True,3.0,1.18.0,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
766,QUnit.only to test only a single test block,"Based on feedback from other developers, I'm proposing QUnit.only to run just a single test block.
QUnit.only implementation would be similar to QUnit.test but when registered to the tests queue, it would be flagged as the only valid test to run.
The behaviour should be like the rerun feature, but instead of using a browser interface, it would allow QUnit to run that single flagged test on other interfaces, like headless browsers (PhantomJS) and Node-like environments.",leobalter,MEMBER,2015-03-06T17:43:56Z,2015-03-09T16:58:20Z,True,5.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
771,HTML reporter regression: Failed test display messed up,"Looks like bc9dfd3 (from #737) caused a regression in the HTML reporter when showing failed tests. Here's QUnit's testsuite with two failing tests before the change:

Here's the same testsuite with the same failures after the change:

/cc @insin since you wrote #737, could you take a look at this regression?",jzaefferer,MEMBER,2015-03-09T15:32:38Z,2015-04-01T12:56:52Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
774,QUnit - Better diff output,"For the GSoC project ""QUnit - Better diff output"", what are the requirements and details??
Any other issues apart the ones mentioned in #364 ???
@leobalter @jzaefferer Please advice.",gauravmittal1995,CONTRIBUTOR,2015-03-10T19:18:18Z,2015-05-18T15:30:58Z,True,9.0,,3.0,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False
775,Warning test authors?,"Reading #411 one can see that it might be sometimes necessary to warn test authors about what they might be doing wrong. After inspecting the codebase, I couldn't find any mechanism used in QUnit to do this useful task.
Facebook's react offers this functionality through the warning function. It also offers an invariant violation warning whenever necessary with the invariant function. In order to make our warning system more powerful, it should be great if these warnings could be shared with reporters, so that they could be shown to the test author more naturally.
Do you guys think that something like this could be useful?",BraulioVM,CONTRIBUTOR,2015-03-11T01:57:21Z,2015-04-01T15:20:01Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
777,"Method call and returning error ""Assertion after the final `assert.async` was resolved""","Hi, I am trying to test javascript method as below,
var spyPostRender = sinon.spy(proxy, ""postRender"");
var done = assert.async();
proxy.init();
done();
assert.ok(spyPostRender.calledOnce, ""postRender() function was called."");
where init() internally calls an ajax service, however when I do this, I am getting below error. Can anybody help me in resolving this issue?
Assertion after the final `assert.async` was resolved@ 85 ms
Source:     
    at Object.QUnit.assert.Assert.ok (http://code.jquery.com/qunit/qunit-1.17.1.js:1296:8)

FYI - I am using QUnit-1.17.1
Thanks in advance",settysreekanth,NONE,2015-03-11T16:05:41Z,2015-03-11T19:40:54Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
778,Toolbar checkboxes and selects don't work in IE <9,The page just reloads with the same URL.,scottgonzalez,CONTRIBUTOR,2015-03-12T18:46:30Z,2015-03-13T09:56:51Z,True,0.0,1.18.0,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
781,Refactor test/ folder,"By now we have too many files in a single directory and its getting hard to find specific files when I don't know the exact name. We should refactor the test/ folder.
I suggest moving files referenced from index.html into a default/ folder (or some other name). The remaining files should be .html files with their matching .js test file. We can then see from there if we need other changes.
Should probably land some more PRs first, at least those making changes to tests.",jzaefferer,MEMBER,2015-03-16T08:55:16Z,2015-03-26T16:29:51Z,True,0.0,1.18.0,2.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
782,Splitting core.js into smaller components?,"Inspecting the source code, it's possible to see that core.js involves several independent components. We could split the file into several other files like:

core/utilities.js: in which we could have functions like hasOwn or objectType.
core/config.js: in which we could have the config object.
core/reporter.js: with the logging callbacks...

I think this could help removing the circular dependencies in the project, and that would help to accomplish things like #707 and #735",BraulioVM,CONTRIBUTOR,2015-03-16T10:57:15Z,2015-07-15T21:53:56Z,True,6.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
787,Pendings tests,"Something that came out of a discussion with Yehuda: During a big refactoring they have hundreds of failing tests. They turned them off using QUnit.skip, but that doesn't tell them which of the skipped tests starting passing again at some point. To quickly test changes in passing tests, they ended up with this:
QUnit.skip = QUnit.test;
There's probably a better way to deal with that situation. One idea is to have something like a QUnit.pending method, that has the same signature as QUnit.test(), but will reverse the result. So if all assertions pass, the test fails, if at least one fails, the test passes.
The HTML reporter could use a similar marker as QUnit.skip.
Thoughts?

Update 2015-04-15:
After some discussion, we came up with this:
// This test will show up with a ""todo"" badge, with a similar style as the ""skipped"" badge
// It will show as passed when at least one assertion fails, or fail when all assertions pass
QUnit.todo( ""this isn't implemented, yet"" function( assert ) {
  assert.ok( featureTest(), ""waiting for feature"" );
} );

QUnit.testDone( function( details ) {
  console.log( details.name, details.todo );
  //> ""this isn't implemented, yet"" true
} );

QUnit.log( function( details ) {
  console.log( details.message, details.todo );
  //> ""waiting for feature"" true
} );",jzaefferer,MEMBER,2015-03-17T14:22:55Z,2017-02-18T04:07:17Z,True,30.0,,7.0,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,False,False
788,improve grunt watch task,"In a private chat I saw @jzaefferer's will to improve speed on our grunt watch task.
Current options to try (not exclusive):

grunt-contrib-watch spawn and interrupt options.
grunt-concurrent
grunt-newer

Some goals:

grunt watch needs to be faster
don't rebuild src files when only test files are modified
can we use those tools to run jshint/jscs only at the modified files (src or each test files)
run tests in parallel (if this goes faster)",leobalter,MEMBER,2015-03-18T15:36:08Z,2015-12-09T16:09:25Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
789,Async module hooksy,"When needing to use some asynchronous setup, on QUnit 1.x you can be able to call to QUnit.stop() inside the module setup hook, but since in QUnit 2.0 it will be deprecated, seems there no posibility to do it. How could it be possible to have an async setup on QUnit 2.0?",piranna,CONTRIBUTOR,2015-03-18T15:38:19Z,2015-10-16T20:41:53Z,True,16.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
793,Diff is not shown even when two objects are different,"For the following deepEqual comparison, no diff is displayed. Is this an expected behavior?
assert.deepEqual(
    {
        d: {
            c: {
                g: {
                    j: {
                        k: {
                            n: {
                                r: ""s"",
                                s: [ 1, 2, 3, 4 ],
                                t: undefined,
                                u: 1,
                                v: {
                                    w: {
                                        x: {
                                            y: ""Hola!"",
                                            z: ""1""
                                        }
                                    }
                                }
                            },
                            q: [],
                            p: 1 / 0,
                            o: 99
                        },
                        l: undefined,
                        m: null
                    }
                }
            }
        }
    },
    {
        d: {
            c: {
                g: {
                    j: {
                        k: {
                            n: {
                                r: ""p"",
                                t: undefined,
                                u: 0,
                                s: [ 1, 2, 3 ],
                                v: {
                                    w: {
                                        x: {
                                            z: null,
                                            y: ""Yahoo!""
                                        }
                                    }
                                }
                            },
                            o: 99,
                            p: 1 / 0,
                            q: []
                        },
                        l: undefined,
                        m: null
                    }
                }
            }
        }
    }
, true);
Output:

Diff is also not show in various other complex object assertions too.",shivamdixit,CONTRIBUTOR,2015-03-21T12:29:18Z,2015-03-22T02:18:42Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
798,Invalid test for autostart,"test/autostart.html currently contains an invalid test for the autostart feature. The QUnit.load() override is implemented incorrectly, resulting in a false positive. The method isn't actually overloaded and QUnit.load() is actually called instantly.",scottgonzalez,CONTRIBUTOR,2015-03-23T13:22:30Z,2015-05-15T15:30:53Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
805,Run test/amd.html through PhantomJS,"See #791 (comment)
Waiting for asciidisco/grunt-qunit-istanbul#43 to be merged and released.",jzaefferer,MEMBER,2015-04-01T15:15:48Z,2015-04-03T09:42:11Z,True,0.0,,1.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
806,Integrate website update into release script,"Related to #736, we should automate updating the website as part of the release script. At the end we should be able to remove most of this: https://github.com/jquery/qunit#releases",jzaefferer,MEMBER,2015-04-01T15:23:38Z,,False,0.0,,2.0,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False
807,QUnit 1.18.0 error with karma-qunit and requirejs.,"I get this error when testing my application with QUnit 1.18.0:
PhantomJS 1.9.8 (Linux) ERROR
  Error: Mismatched anonymous define() module: function () {
        return QUnit;
    }
  http://requirejs.org/docs/errors.html#mismatch
  at /home/travis/build/ccnmtl/dmt/node_modules/requirejs/require.js:141
PhantomJS 1.9.8 (Linux): Executed 0 of 0 ERROR (0.044 secs / 0 secs)
npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0

Build log is here:
https://travis-ci.org/ccnmtl/dmt/builds/57026820
Downgrading to 1.17.1 fixes the issue.",nikolas,NONE,2015-04-03T13:40:46Z,2015-04-09T17:38:41Z,True,21.0,,12.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
808,Warning qunit not compatible with node >= 12,"npm WARN engine qunit@0.7.5: wanted: {""node"":"">=0.6.0 < 0.12.0""} (current: {""node"":""0.12.0"",""npm"":""2.5.1""})",dhowe,NONE,2015-04-04T10:54:44Z,2015-04-05T01:43:32Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
814,Filter does not match exact case,"If you search for a test using the exact case instead of lower case, the filter doesn't match.",4thex,NONE,2015-04-24T12:18:33Z,2015-04-24T12:22:01Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
815,browserstack-runner improvements,"Currently we run all our testsuites against most of our supported browsers for PRs and commits to master. With plenty of failures due to timeouts, this doesn't provide near as much value as it should. I'd like to use this issue to discuss some options for getting more values from this setup.
One idea: Only run the main tests for ""all"" commits, then set up a separate browserstack.json (or browserstack.js, might work) that runs all suites in (more|all) browsers, but only for some commits, e.g., all commits to master. The latter could also do multiple runs, each running just one of the testsuites, if that helps avoid the timeouts.
Meanwhile we should use https://browserstack.com/automate to track failing tests, check which ones take forever to run (causing later suites to time out, since the 5 minute window is over), along with any other failures, and consistently report those back to support@browserstack.com. If we keep ignoring these issues, we won't make any progress.",jzaefferer,MEMBER,2015-04-25T14:01:01Z,2015-09-10T18:46:48Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
816,"Allow assert.async callback to ""wrap"" actual async callback and handle errors?","It would be really excellent if there was an easy way to have inadvertent exceptions from async callbacks be noted in an assertion and the test runner restarted, much like what is already done in the synchronous and promise pathways. (As it is, the test runner chokes completely in these cases because QUnit.start(), or equivalent, is not called.)

Synchronous pathway: https://github.com/jquery/qunit/blob/1.18.0/src/test.js#L106-L120
Promise pathway: https://github.com/jquery/qunit/blob/1.18.0/src/test.js#L326-L341

What I would like to see is something similar for when an asynchronous callback throws an error and the async callback doesn't have anything QUnit on its call stack.
I think this could be implemented with a generic callback-wrapping function that basically has a try/catch in it and handles errors in a similar way as the two sections of code I've outlined above. I'll write up a pull request in the next few days to outline what I'm getting at, but here's a very rough API:
// In Assert.prototype
async: function () {
    // do the usual setup of async
    var done = function () {
        // do the usual cleanup of async
    };
    done.wrapError = function (asyncCallback) {
        return function wrapError () {
            try {
                asyncCallback.apply(null, arguments);
            } catch (e) {
                // Get the current test object using QUnit.config.current or similar
                // Call QUnit.pushFailure() if we have a test object
                done();     // Equivalent to QUnit.start()
            }
        };
    };
    return done;
}

Usage:
QUnit.test(""Wrapping an error callback"", function (assert) {
    var done = assert.async();
    setTimeout(done.wrapError(function () {
        throw new Error();
        // Previously would halt the test runner, but now would allow tests to continue running
    }), 50);
});

One could easily envision a similar API which would just invoke the done() callback on success or error, allowing consumers to avoid invoking done() in the callback itself. (I don't think there's a huge loss of readability either, since done is still mentioned in the function wrap invocation. It's just a matter of choosing an intelligent function name to complement or replace wrapError.)
Any thoughts?",platinumazure,CONTRIBUTOR,2015-04-29T15:12:46Z,2017-03-11T18:04:26Z,True,19.0,,6.0,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
817,[QUESTION] is it possible to fail a test in the QUnit.testDone callback?,"In the QUnit 2.0 series, the assert is no longer global (good thing!) and is passed into each test's callback. When I made this upgrade, my testDone callback is no longer failing tests like it had been (because I had been using the global assert). I had some code that would check to see that all requests were properly mocked and if there were too many or too few mocks, I would fail the test. I see my error messages but doing a QUnit.assert.ok(false, ""error message"") has no effect on the test. Can someone please advise how I would be able to fail the test that just run from inside the testDone callback?
Thanks!",williamsbdev,NONE,2015-05-04T13:11:08Z,2015-05-18T15:00:57Z,True,6.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
818,1.18.0 breaks phantomjs tests.,"I noticed when I updated to 1.18.0 my phantomjs tests started not ending with zero test runs.
See https://travis-ci.org/lodash/lodash-amd/builds/61941189.
Once I reverted to 1.17.1 things started working again.
See https://travis-ci.org/lodash/lodash-amd/builds/62009692",jdalton,NONE,2015-05-10T22:38:49Z,2015-06-18T11:06:06Z,True,8.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
819,Hide passed tests does not work on page reload,"Hi,
Version: 1.18.0/1.18.1-pre

Start with 'Hide Passed Tests' unchecked and refresh the page.
Check 'Hide Passed Tests'. This causes all passed tests to collapse, as expected.
Now reload the page. At this point 'Hide Passed Tests' is checked, but passed tests are not hidden.",NoelAbrahams,NONE,2015-05-11T10:02:14Z,2015-05-15T09:20:55Z,True,12.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
820,"QUnit IntelliSense for Eclipse, Sublime, Emacs, Vim, Web Editor CodeMirror","Just for your information I have generated from your doc API a ternjs plugin https://github.com/angelozerr/tern.jqueryapi/blob/master/qunit1-19.js
tern is a JavaScript inference engine which gives support for completion, hover, etc and can be used with a lot of JavaScritpt Editor like Eclipse, Sublime, Emacs, Vim, Web Editor CodeMirror. Here a screenshot with QUnit completion & Eclipse :

For Eclipse users, please read https://github.com/angelozerr/tern.java/wiki/Tern-&-QUnit-support",angelozerr,NONE,2015-05-13T22:09:41Z,2015-05-18T14:46:19Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
821,Fixtures not being restored every time,"I'm new to QUnit and I might be doing something silly.
As I understand it, everything in the fixture is reset before a new test is run. However, I'm seeing (what is to me) something strange. In the below example, there's a form in the fixture which consists of just an input element and a div with the class has-error. So as I understand, before each test is run, these should be restored to their original state. I've specified a keypress event handler for $('input') to just hide the div in the fixture.
I have two identical tests which test this event handler: they trigger a keypress on the input and assert that error text is hidden.
What I see is that only one of the two tests ever passes and they switch (so it alternates between test 1 passing and test 2 passing). Is this expected behavior?
<html>
  <head>
    <link rel=""stylesheet"" href=""qunit-1.18.0.css"">
  </head>

  <body>
    <div id=""qunit""></div>
    <div id=""qunit-fixture"">
      <form> 
        <input name=""text"" />
        <div class=""has-error"">Error text</div>
      </form>
    </div>

    <script src=""http://code.jquery.com/jquery.min.js""></script>
    <script src=""qunit-1.18.0.js""></script>
    <script>
      QUnit.test( ""test 1"", function ( assert ) {
        $('input').trigger('keypress');
        assert.equal($('.has-error').is(':visible'), false);
      });

      QUnit.test( ""test 2"", function ( assert ) {
        $('input').trigger('keypress');
        assert.equal($('.has-error').is(':visible'), false);
      });

      $(document).ready(function () {
        $('input').keypress(function() {
          $('.has-error').hide();
        });
      });

    </script>

  </body>
</html>

One more thing that I'm confused about is this: if I add a click event handler for $('input') and switch the second test to trigger a click instead, QUnit gets stuck switching ""no try-catch"" and ""hide passed tests"" on and off over and over.
This can't possibly be expected behavior, right? Even if I've done something dumb, I don't see why you'd want anything but either a pass or a fail for your tests to come from QUnit.",vmanjunath,NONE,2015-05-26T22:18:00Z,2015-05-26T22:29:50Z,True,6.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
823,Set config from url,"for example
http://localhost:8080/myTest.html&autostart=false
I am trying to make a library to run tests and it would be very nice if this existed so that I can attach all of the event handlers before the tests run but after the page loads.
I also have no control over the source code only the url.",dtracers,NONE,2015-06-01T05:09:55Z,2015-06-01T16:04:21Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
824,"Quoted ""<"" breaks diff oO","Using version 1.18.0: http://jsfiddle.net/yptmch4k/1/
When I compare the string c=< against c=""<"" using strictEqual the diff breaks, is it intended?",FagnerMartinsBrack,NONE,2015-06-06T18:57:11Z,2016-03-22T16:35:46Z,True,1.0,,2.0,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False
825,QUnit.moduleStart invoked before each test,"Hi
I have a problem with QUnit.moduleStart callback. It looks like this callback is invoked before each test not before module. I created a sample module with three tests and callback registered as below was fired three times
QUnit.moduleStart(function (settings) {
    console.log(""Module start"");
});
I work with QUnit 1.18.0",cezarypiatek,NONE,2015-06-13T11:15:48Z,2015-06-19T17:47:38Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
827,"Replace push(result, actual, expected, message, negative) with object signature","As discussed in #822, the now even longer signature for .push() is bad. Especially with ES6 an object signature would work very well, .push({ result, actual, expected, message, negative }).
As I also mentioned in that PR: If we deprecate the current signature anyway, we might as well come up with a better name, since push is very generic. Any ideas for a better name?",jzaefferer,MEMBER,2015-06-18T08:56:52Z,2016-02-16T22:58:18Z,True,6.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
828,jshint: test errors when running jshint task,"I'm new here. When running ""grunt"", I encounter the following error:
Running ""jshint:all"" (jshint) task

   Gruntfile.js
    141 |        browserSets = JSON.parse( browserSets );
                               ^ 'JSON' is not defined.
   dist/qunit.js
   1080 |        if ( !this instanceof Test ) {
                      ^ Confusing use of '!'.

>> 2 errors in 20 files
Warning: Task ""jshint:all"" failed. Use --force to continue.

Is it an error that damages the code or just a warning for coding quality?
I could modify .jshintrc to disable the JSON warning.
System: Mac OS X Yosemite",iten123,NONE,2015-06-24T01:24:52Z,2015-06-25T03:44:28Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
830,moduleDone called before module is done,"Steps to reproduce the problem:

Write two modules. The first module contains two tests. One of the tests fails. The second module contains a single test that fails.
Log QUnit.moduleDone events
Run the programm twice.

What is the expected behavoir?
We expect to have two moduleDone events in both runs.
What went wrong?
We have three moduleDone events in the second run.
Any other comments?
QUnit.config.reorder = false gives us two moduleDone events constantly.
Here is a JS Bin demo",fcarstens,NONE,2015-06-29T08:16:13Z,2017-03-31T04:40:56Z,True,6.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False
831,How do we execute multiple test files with a single command?,"Scenario
We are trying to use the Node.js QUnit Module aka qunitjs for our Server-Side Testing so that we can write one test and run it on both server and client e.g: https://github.com/nelsonic/learn-tdd/blob/master/test.js
When we run a single file using the command:
node test/my_test.js
It works as expected.
However, when we have more than one test in a /test directory and try to run all the files as a suite using the following command:
node test/*.js
only the first file (alphabetically) gets executed.
see: https://github.com/nelsonic/hapi-socketio-redis-chat-example/tree/master/test
Question

How do we execute multiple test files with a single command?

We tried to dig through existing StackOverflow + GitHub Q/A for this but did not find any match. (any suggestions/help much appreciated!)
StackOverflow Points Up for Grabs!

http://stackoverflow.com/questions/31312650/how-to-run-several-qunit-node-js-test-files-using-a-single-command",nelsonic,NONE,2015-07-09T08:54:17Z,2015-07-14T21:41:17Z,True,5.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
832,assert: async() and its resulting callback result in test suite stoppage,"Hopefully I'm doing something wrong, but http://jsbin.com/votiye/ would seem to indicate that there's a hangup when using assert.async() and subsequently calling the resulting function.
Expected outcome:
Two tests are run.
Actual outcome:
The second test does not run.",gabrielschulhof,NONE,2015-07-12T09:18:29Z,2015-07-12T09:38:45Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
833,Testing Maps/Sets with QUnit,"Most browsers already implement ES6 Map/Set to some degree. Right now, we have the strange issue of:
    obj1 = new Map(); obj1.set(1,2);
    obj2 = new Map(); obj2.set(3,4);
    assert.deepEqual(obj1, obj2);    // passed

I understand QUnit is not meant to process ES6 Map/Set or iterables yet, but as browsers continue to implement ES6 features, this can actually become a real problem.",godchuanz,CONTRIBUTOR,2015-07-12T15:47:42Z,2015-08-10T21:10:21Z,True,8.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
838,zero assertions and one assertion simultaneously?!,"Found 2 of div > span but 1/2 containing ""myfile.jpg""@ 174 ms
Expected:   
true
Result:     
false
Diff:   
true false 
Source:     
<snip>
Expected 0 assertions, but 1 were run@ 217 ms
Source:     
<snip>
Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.@ 155 ms
Source:     
<snip>

So I simultaneously had zero asserts and one assert???
Ember test code is:
import hbs from 'htmlbars-inline-precompile';
import { moduleForComponent, test } from 'ember-qunit';
import startApp from 'insm-ui/tests/helpers/start-app';

var application;

moduleForComponent('file-upload-monitor-item', {
  integration: true,
  beforeEach: function() {
    application = startApp();
  }
});

test('it renders', function(assert) {
  assert.expect(0);
  this.testupload = {
    fileName: ""myfile.jpg""
  };
  this.render(hbs`{{file-upload-monitor-item upload=testupload}}`);
  expectElement('div > span', 2, {contains:'myfile.jpg'});
});",BryanCrotaz,NONE,2015-07-18T22:08:34Z,2015-10-16T20:33:46Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
840,Support multi-tenant manual test start ,"See karma-runner/karma-qunit#27 for an example of such issue.
I propose we add a method that instead of starting the test suite, takes a Promise that will be waited on before the tests start. And there can be any number of promises provided to this method.
Crucial too is that it is allowed to provide additional promises at any time before all known promises are fulfilled. (e.g. adding A and B, B is resolved, A is pending and during A, a C is encountered; as would commonly be the case when loading code in multiple stages, e.g. Karma loading the user code and marking its own area as fulfilled).
Proposed interface:
QUnit.delayStart( Promise thenable );
Proposed implementation:
When called, this will (if not already) set config.autostart = false;, and add the promise to an internal list. When the promise is resolved or rejected, it will remove itself from said internal list at look at the length of the list. If it is now empty, call QUnit.start(). If not, wait for another promise to be fulfilled which will naturally result in another check of the remaining promises.",Krinkle,MEMBER,2015-08-03T19:01:58Z,,False,5.0,,4.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
841,[Memory Leak] beforeEach / afterEach appear to leak,"the following code (from : source) appears to leak beforeEach and afterEach on the original module. This results in per module leak of the ambient context.
this.testEnvironment = extend( {}, this.module.testEnvironment );
delete this.testEnvironment.beforeEach;
delete this.testEnvironment.afterEach;
Obviously the following, prevents the leaks:
var foo;

module('test', {
  beforeEach() {
    var foo = new Foo();
  },

  afterEach() {
    foo = null
  }
});
but it is tedious and error prone. A much better solution, for those using modules (AMD/CJS/etc), is merely to release the entirely module. Unfortunately, QUnit retaining beforeEach and afterEach per module, prevents a less error prone and tedious solution.
cc @cibernox",stefanpenner,CONTRIBUTOR,2015-08-04T16:59:25Z,2015-08-13T15:53:55Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
843,Extend assert.async to accept a count of asynchronous operations,"Currently, assert.async returns an invoke-once callback, which can lead to overly-cumbersome patterns (e.g., manual counter tracking or collect and pop). It would be more convenient to specify the expected count of invocations explicitly by argument:
var done = assert.async( 4 );

asyncOperation1( function( result ) {
    assert.equal(…);
    done();
} );
asyncOperation2( function( result ) {
    assert.equal(…);
    done();
} );
…",gibson042,MEMBER,2015-08-05T15:11:58Z,2015-09-30T17:22:36Z,True,2.0,,4.0,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False
844,"Expected at least one assertion, but none were run - Bounty Available","This is one of those annoying intermittent issues...  I have a test which has two async calls in series, and I'm getting this error around 30% of the time:

This is the test:
QUnit.test 'Backbone save - new object has attributes', (assert) ->
    done = assert.async()
    search = new Search
    search.save(Description: 'My test').done ->
        testSearch = new Search(id: search.id)
        testSearch.fetch().done ->
            assert.equal(testSearch.get('Description'), 'My test')
            done()

Unfortunately the save/fetch calls depend on a server so it's not easily reproducible. I've tried creating a reproducible test by using setTimeout instead of the save/fetch calls but it works as expected.
What I've found is that I can make the problem go away by increasing the 13ms timeout in resumeProcessing(), the errors get fewer and fewer as the timeout gets higher, until they seem to completely stop at around 100ms.
Any ideas?",mattparlane,NONE,2015-08-06T20:23:53Z,2015-08-07T16:57:56Z,True,9.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
846,Generate a failure when QUnit.start is passed a non-numeric argument,"Ref #844
When QUnit.start is passed a truthy but non-numeric argument, its test semaphore decrement sets config.current.semaphore to NaN. Such a condition should generate output analogous to the ""Called start() while already started…"" failure presented when semaphore dips below zero.",gibson042,MEMBER,2015-08-07T19:57:16Z,2015-10-18T16:10:41Z,True,6.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False
848,Investigate why browserstack-runner updates are breaking on Travis,"Updates for browserstack-runner (currently using 0.3.0 on this repo) are crashing on Travis-CI.
Ref: #836",leobalter,MEMBER,2015-08-10T20:08:35Z,2015-09-07T20:41:51Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
851,deepEqual fails to work with descendants of something with a null prototype,"the following works as expected.
var a = Object.create(null);
a.foo = 1;
var b = { foo: 1 }

deepEqual(a, b);
Unfortunately, in practice Object.create(null) is fairly costly. To mitigate this cost a specialized NullObject can be used. This Object has similar safe characteristics, but with dramatically reduced allocation costs.
Reference implementation:
function NullObject() { }
NullObject.prototype = Object.create(null, {
  constructor: {
    value: undefined,
    enumerable: false,
    writable: true
  }
});

This leads us to the problem:
var a = new EmptyObject();
a.foo = 1;
var b = { foo: 1 }

deepEqual(a, b); // fails
This fails because, a.constructor !== b.constructor and a.prototype !== null
relevant code in QUnit:
if ( a.constructor !== b.constructor ) {

  // Allow objects with no prototype to be equivalent to
  // objects with Object as their constructor.
  if ( !( ( getProto( a ) === null && getProto( b ) === Object.prototype ) ||
    ( getProto( b ) === null && getProto( a ) === Object.prototype ) ) ) {
    return false;
  }
}
As QUnit already special cases null prototyped object with projo deepEquality, could we explore another special case to handle this scenario? Is there an alternative I am missing?
One solution,
would be to also detect a null constructor.
change to the NullObject constructor would be as follows:
function NullObject() { }
NullObject.prototype = Object.create(null, {
  constructor: {
    value: null, // <-- small change
    enumerable: false,
    writable: true
  }
});

Change to QUnit would require also checking for a null constructor.
if ( a.constructor !== b.constructor ) {

  // Allow objects with no prototype to be equivalent to
  // objects with Object as their constructor.
  if ( !( ( ( getProto( a ) === null || getConstructor( a ) === null) && getProto( b ) === Object.prototype ) ||
    ( ( getProto( b ) === null || getConstructor( b ) === null) && getProto( a ) === Object.prototype ) ) ) {
    return false;
  }
}
note: this protocol does appear funky, but would be quite handy in practice",stefanpenner,CONTRIBUTOR,2015-08-13T00:04:43Z,2015-09-17T16:11:41Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
854,Split browserstack run on CI,"Currently, browserstack-runner is returning timeouts. This is due to the number of different browsers and files.
We can try to split the runs to avoid timeouts. I am thinking about:

run the tests only on the current browsers
run the tests on the older browsers

Another split if we need to go further:

main tests only on the current browsers
main tests on the other browsers
additional tests on the current browsers
additional tests on the other browsers",leobalter,MEMBER,2015-08-27T14:49:07Z,2015-09-10T18:46:48Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
855,Safari 7.0 isn't tested,"BrowserStack has removed Safari 7.0 from the API, I notified them that it's a problem for us. However, because of these lines of browserstack-all.json you now wouldn't even try to this version; only Safari 5.1, 6.2, 8.0 & 9.0 are included. This means Safari 6.0 & 7.0 is gone (6.2 has an identical engine as 8.0).
Due to the fact of how messed up Safari versioning is:

Safari 8.0, 7.1 & 6.2 share the WebKit version
Safari 7.0 & 6.1 share the WebKit version

I think it's dangerous to just rely on aliases; it'd be better to explicitly list all Safari versions supported; and do it without shortcuts like safari_6 but use the full safari_6_0 name.",mgol,MEMBER,2015-09-04T20:16:34Z,2015-10-16T20:05:34Z,True,7.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
858,Nested modules improvements,"With #800 done, @gibson042 brought some important topics to improve:


executing all of a module's own tests before entering its submodules (regardless of test/submodule definition order)
always minting a new environment definition for every submodule, even if its hooks argument is undefined or not even specified

If they are intentional, there should be assertions covering them. If they are unintentional and undesired, there should be assertions covering the desired behavior.

Also:

the one regarding explicit context sensitivity of beforeEach/afterEach/test/etc.
via arguments or context, which should be covered by your above followup).",leobalter,MEMBER,2015-09-10T19:02:04Z,2015-10-08T00:49:25Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
860,More browserstack-runner improvements,"As commented here, the current build script still seems to have issues: #856 (comment)
Failures should propagate to having the build fail.
That was iOS timing out, which we should try to avoid by sticking with simulators, like this:
shirish87/sizzle@577b55b
/cc @shirish87 are there other improvements we could implement? See 39d8821 for the recent changes @leobalter landed.",jzaefferer,MEMBER,2015-09-17T09:33:11Z,2015-09-30T17:30:14Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
864,Allow chai usage integration.,"I'm thinking about creating a assert adaptor to allow the use of custom assertion libs, as Chai.
To start I thinking on something like:
QUnit.config.assert = ""chai"";

or

QUnit.setup({
  assert: ""chai"",
  reporter: ""HTML""
});
I know QUnit.setup is not even in the plans, this is something to maybe discuss in another issue.
Possible drawbacks: having chai plugged in, QUnit would probably break a test on its first failing assertion, but wouldn't fail without a builtin assertion call, along with the expect method.
Probably, the necessary steps to implement this is:

avoid QUnit tests failing without any of its builtin assertions call.
catch chai thrown errors from the assertions and report it as failing
a test without any failing assertion should pass (that's silly, but...)

Maybe we can register the chai assertions calls, worth investigate: https://github.com/chaijs/chai/blob/master/lib/chai/assertion.js#L99-L113

Extra: this could be extended to node's assert module as well.",leobalter,MEMBER,2015-09-28T16:36:47Z,,False,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False
865,Extract deepEqual implementation with tests to share it with other libraries?,"At least node has its own implementation of deepEqual, as part of the assert module. I have no idea how close their implementation is to ours, might be worth investigating.",jzaefferer,MEMBER,2015-09-29T10:17:26Z,,False,15.0,,4.0,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False
868,Automated migration tools for QUnit 2.0 syntax,"Hi folks,
I've been working (occasionally) on a QUnit migrator tool, platinumazure/qunit2-migrator. Today I learned of another tool being developed, apsdehal/qunit-migrate.
Before I get too much further, I'd like to confirm with the QUnit team: Are there any plans to create or support a migration tool? If so, what do I need to do to either win support for what I have done or to gracefully fold in my tool's capabilities to whatever the ""official"" migration tool may be? And if there are no plans to support a tool, what is the best way for me to request extra eyes on it and get feedback without spamming people?",platinumazure,CONTRIBUTOR,2015-10-02T21:56:34Z,2016-04-21T15:15:50Z,True,13.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
869,Improve module environment inheritance with a Object.create like,"Ref #859 (comment)
Instead of using QUnit's extend method to extend a module's env. inheritance, we should improve it with a Object.create's like inheritance.
Suggested by @gibson042:
var createObject = (function( Base ) {
    return function( prototype ) {
        Base.prototype = prototype;
        return new Base();
    };
})( Function() );
…
env = createObject( parentModule.testEnvironment );
We could also use Object.create adding a polyfill that would be used only on IE6~IE8 for the supported browsers.",leobalter,MEMBER,2015-10-05T14:52:53Z,,False,6.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False
870,"beforeEach, afterEach hooks not called if run second time after previous at least one test failed","I have next suite:
(function(module, test)
{
    var beforeEachHook = function(assert)
    {
        console.log(""beforeEach: "" + assert.test.testName);
    };

    var afterEachHook = function(assert)
    {
        console.log(""afterEach: "" + assert.test.testName);
    };

    module(""Suite with one failed test"",
        {
            beforeEach: beforeEachHook,
            afterEach: afterEachHook
        }
    );

    test(""First unit test"", function(assert)
    {
        assert.ok(true);
    });

    test(""Second unit test"", function(assert)
    {
        assert.ok(false);
    });

    test(""Third unit test"", function(assert)
    {
        assert.ok(true);
    });

}(QUnit.module, QUnit.test));
When I run it first time I received in console next messages:
beforeEach: First unit test
afterEach: First unit test
beforeEach: Second unit test
afterEach: Second unit test
beforeEach: Third unit test
afterEach: Third unit test

Result of execution:
First unit test - okay
Second unit test - failed
Third unit test - okay

When I run it second time I received only next messages:
beforeEach: Second unit test
afterEach: Second unit test
beforeEach: First unit test
afterEach: First unit test

Result of execution:
First unit test - okay
Second unit test - failed
Third unit test - okay

As you can see in second run before each and after each of Third unit test is not called.
QUnit.version = ""1.19.0"";
As I noticed Test#hooks not add beforeEach, afterEach hooks as it not pass next condition:
        if ( this.module.testEnvironment &&
                QUnit.objectType( this.module.testEnvironment[ handler ] ) === ""function"" ) {
            hooks.push( this.queueHook( this.module.testEnvironment[ handler ], handler ) );
        }
QUnit.objectType( this.module.testEnvironment[ handler ] )
equal to ""undefined""
As it possibly cleared in ran Test#before (I notice that ""execution"" of test starts before all Test#hook executed) in next lines:
        if ( this.module.testEnvironment ) {
            delete this.module.testEnvironment.beforeEach;
            delete this.module.testEnvironment.afterEach;
        }",romanmikhailov,NONE,2015-10-05T16:36:35Z,2015-10-20T16:25:30Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False
871,Can I specify testTimeout for individual test?,,miherlosev,NONE,2015-10-07T08:42:11Z,2015-10-07T15:31:14Z,True,6.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
872,Set QUnit config via function,"I would like to set QUnit.config settings through a function call, like:
QUnit.config( {
  autorun: false,
  collapse: false,
  ...
} );

// or:
QUnit.setup( {
  autorun: false,
  collapse: false,
  ...
} );

// or even:
QUnit.config.set( {
  autorun: false,
  collapse: false,
  ...
} );
This way we can make a better handle for other options, like setting a custom reporter like:
QUnit.config( {
  // please not this issue won't define the reporter settings.
  reporter: ""tap"",
  reporterOptions: {
    outputMethod: console.log
  }
} );
This also allows settings definitions through a json file, imported and applied to QUnit.config.

If this is not possible I would have to set the custom reporter (and maybe other features in the future)  through a direct function like: QUnit.config.reporter( ""tap"", { options } );",leobalter,MEMBER,2015-10-07T14:58:19Z,2017-03-31T04:42:55Z,True,2.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
879,Update jscs to latest,"As mentioned in #876, grunt-jscs may not be catching certain style errors and needs to be updated to the latest version.",arghgr,CONTRIBUTOR,2015-10-20T21:39:27Z,2016-03-02T18:27:21Z,True,2.0,,3.0,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
881,Throw warnings for deprecated features.,"QUnit should throw warnings (reporter/console) for deprecated features, including:

use of global methods instead of the namespaced methods. (some can be easily fixed with local variables like: var test = QUnit.test;)
use of stop/start methods
etc

Also it should mention the qunit-migrate tools.",leobalter,MEMBER,2015-10-21T22:05:42Z,2017-04-09T15:39:43Z,True,7.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
883,`raises` is not exported in the global scope in QUnit pre-2.x,"Assert.prototype.raises is an alias for Assert.prototype.throws, but only the latter is exported in the global scope. Example:
QUnit.test( ""throws & raises"", function( assert ) {

  assert.throws( function() { throw ""error"" });  //ok
  assert.raises( function() { throw ""error"" });  //ok

  throws( function() { throw ""error"" });  //ok
  raises( function() { throw ""error"" });  //ReferenceError: raises is not defined
});",scinos,CONTRIBUTOR,2015-10-25T01:45:07Z,2015-10-27T02:17:44Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
890,"QUnit.reporter( reporter [, options ] );","After talking to Jörn today, we decided to create this reporter method to call custom reporters for QUnit.
On QUnit 2.0, it's gonna be necessary to call it even for the HTML Reporter.
This should be made on top of the new EventsEmitter interface, so it depends on #882.
To make it work and test it, we need to implement a simple custom reporter, probably a tap output. qunit-tap should be observed to avoid extra work.
Other custom reporters should follow js-reporters (on QUnit 2+) or published as other npm modules.

Features:
Reporter name / object
QUnit.reporter needs to be called with at least one argument identifying the reporter to be used. It might be a string with the name of the reporter or a reporter object.
TODO: The reporter object is not structured yet
Options
QUnit.reporter might be called with a second argument as an object with property options.
The main options, used as a suggested interface for most reporter are the following, with their respective defaults:

log: console.log => the main print output method.
error: console.error => the output method for errors.
warn: console.warn => the output method for warnings.
all: null => if this property is set, it replaces the values for all the other output properties: log, error, and warn.

These print options might not be used no all reporters, as it won't be used on an eventual HTML Reporter built on top of it.
Examples:
// built-in reporter
QUnit.reporter('tap');

// built-in reporter with options
QUnit.reporter('tap', {
  all: print
});

// custom reporter
QUnit.reporter(require('js-reporters-junit'));
The output on the runEnd event
The runEnd event might include a custom output property containing the printed results. This is optional on different reporters, but it can be used with different reporters, where output is an object and their children keys are the names of the reporters, their values should be strings containing the output result.
Example:
// do whatever you want with the reporter results
QUnit.on('runEnd', function(details) {
  console.log(details.output.junit);
  console.log(details.output.tap);
  fs.writeFileSync(details.output.tap);
});
This part might be made in a separate issue and it does not need to block the 2.0 Milestone.",leobalter,MEMBER,2015-10-30T00:20:07Z,2015-12-09T16:46:40Z,True,4.0,2.0,3.0,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
891,Meta: The QUnit 2.0 plan,"QUnit 2.0 is close, and we only have some a few issues to solve until it's done. This is a meta issue with the agenda for the new QUnit 2.0:

 #422 EventEmitter - PR at #882
 #890 QUnit.reporter method with built-in tap
 #881 Throw warnings for deprecated messages
 Release the last QUnit 1.x before QUnit 2 (no new features until QUnit 2)
\o/
 Remove the warnings for deprecated methods
 Apply the breaking changes with warnings (see https://github.com/jquery/qunit/milestones/v2.0)
 Release QUnit 2.0 / drops support for ES3 / change support to ES5+
\o/
 Remove the warnings for methods removed in QUnit 2.0
 Release QUnit 2.1
 QUnit.reporter(require('qunit-reporter-html'))
 QUnit replaces built-in tap reporter with js-reporters/tap

Any other features are not blockers for this process, so we can still have features like QUnit.pending and _.deepEqual before QUnit 2 or #881.",leobalter,MEMBER,2015-10-30T01:07:41Z,2016-06-16T17:46:32Z,True,5.0,2.0,3.0,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False
892,QUnit Tips and Tricks on Global Ember Meetup,"EmberCLI uses QUnit as it's default test runner. Most people in Ember community use it on daily bases, but there are probably more advanced techniques that they're not familiar with.
Would someone who knows QUnit well be interested in giving a lightning talk on ""QUnit Tips and Tricks"" at next Global Ember Meetup in 2 weeks?",taras,NONE,2015-11-09T15:35:10Z,2015-12-15T01:31:04Z,True,6.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
893,Introduce beforeAll/afterAll module hooks?,"I'd like to propose adding in beforeAll/afterAll hooks to test modules. Similar to the functions of the same name in Jasmine or before/after in Mocha. It would be convenient to have a way to access the testing context at the start and end of a module on a case-by-case basis instead of just the sweeping moduleDone and moduleStart callbacks.
I apologize if this has been discussed before, couldn't seem to find any background on the matter.
cc @nathanhammond",trentmwillis,MEMBER,2015-11-12T02:03:35Z,2016-04-18T16:26:32Z,True,16.0,,7.0,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False
894,Allow `testEnvironment` to be accessed within a `test` without `this`,"I already made a case for this in rwjblue/ember-qunit#212:

Why? It might be confusing to get assert passed as param and having
to use this to access the context. Making it a param also makes it
more semantic, because you will be naming it for what it is: context.

s/context/environment/
An example:
test('example test', (assert, env) => {
  var subject = env.subject();
  // assert stuff
}); 
I'll open a PR a soon as I've got some confirmation that something like this is OK.",martndemus,CONTRIBUTOR,2015-11-19T15:01:14Z,,False,2.0,,4.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
895,QUnit DeepEqual using two strings,"I was testing some code using qunit my test kept failing so I tested
var str = new String(""hey there"");
var s = new String(""hey there"");
assert.deepEqual(s, str);
assert.equal(s, str);

both equal trys failed",joeJazdzewski,NONE,2015-11-26T19:58:15Z,2015-12-30T02:09:53Z,True,2.0,,3.0,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False
896,hidepassed needs to check for the right element,"From #819:

Just got around to looking into this. The problem above can be reproduced by removing the element with id qunit.
Basically, we wanted to have our own header, so we had manually added the following HTML to the page:
   <!--
    <div id=""qunit""></div>
   -->
    <h1 id=""qunit-header"">
          // Custom header here
    </h1>
    <div id=""qunit-testrunner-toolbar""></div>
    <ol id=""qunit-tests""></ol>
This actually works, except that hidepass is not honoured.
The problem code is the following in QUnit.begin
    if ( qunit && config.hidepassed ) {
        addClass( qunit.lastChild, ""hidepass"" );
    }

This code is inconsistent, because the hidepass is actually in qunit-testrunner-toolbar and existence of that element should imply that the code runs correctly. Probably
    addClass( qunitToolbar.parentElement.lastChild, ""hidepass"" );",jzaefferer,MEMBER,2015-11-30T10:27:09Z,2016-03-02T18:33:11Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
899,notOk assertion has wrong label,"Write test with assert.notOk(true);
Run test and see expected: ""NOT false"", but really expected is ""NOT true""

In the following example, $item has css-class ""dx-state-focused"", so, expression is TRUE, but the label is ""NOT false""",mrjohn0011,NONE,2015-12-07T07:43:34Z,2015-12-10T00:59:01Z,True,7.0,,4.0,False,False,False,False,True,False,False,True,False,False,False,True,False,False,False,False,False,True,False
900,`grunt coveralls` is breaking on CI,"As seen on https://travis-ci.org/jquery/qunit/builds/95372466 grunt coveralls is breaking.
I was able to reproduce the error on a local env using both Node 0.10 and 5.1.0",leobalter,MEMBER,2015-12-07T16:44:05Z,2015-12-07T16:59:43Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
904,Regex test filtering,"Would it be possible to introduce regex test filtering? There are cases where we want a subset of our test suite to run but can't achieve it with a simple string filter. Maybe my thinking is naive, but it seems like we should be able to take the filter string and cast it to a regular expression and test the test names against it.
This would probably require an additional config option to treat the filter as a regular expression as opposed to a string value.",trentmwillis,MEMBER,2015-12-14T20:57:43Z,2015-12-28T17:02:42Z,True,9.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
909,"Regular expression comparison ignores ES2015 ""unicode"" flag","e.g., /\u{1D306}/u.flags === ""u"".
Using the new flags property in equiv:callbacks[""regex""] should future-proof us against all future additions.",gibson042,MEMBER,2015-12-19T15:24:03Z,2016-01-10T19:20:08Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False
910,browserstack-runner is not recognizing some os_version from browsers,"Ref https://travis-ci.org/jquery/qunit/builds/99126461
I'll be able to look at it on Wednesday, at least it's returning 0 on the CI.
> sh build/run-browserstack.sh

Launching 7 worker(s) for 14 run(s).

Error from BrowserStack:  [Error: Validation Failed - `os_version` invalid]
[2015-12-28T17:50:00.434Z] [Runner alert] Failed to launch worker, Arguments: {
    ""err"": {}
}
...",leobalter,MEMBER,2015-12-28T17:52:56Z,2016-01-06T18:06:17Z,True,1.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
911,Request: deepContains,"I'm not sure what the policy on adding new assertion helpers is but I figured I'd make an issue anyways.
I've often wanted an assertion similar to deepEqual but that only checks equality on the values specified in the on the ""expected"" side. Example,
let obj = {
  a: 1,
  b: { x: 2, y: 3 }
};

assert.deepContains(obj, { b: { x: 2 } }); // pass
assert.deepContains(obj, { a: 1, b: { x: 2 } }); // pass
assert.deepContains(obj, { a: 2, b: { x: 2 } }); // fail
The name is up for bikeshedding.",mmun,NONE,2015-12-29T02:50:52Z,2016-01-07T00:36:06Z,True,7.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
913,Suggest add viewport meta tag for mobile.,"Result page is hard to read in mobile. Adding meta tag looks good.
<meta name=""viewport"" content=""width=device-width"">
sample

current",mixed,CONTRIBUTOR,2015-12-30T08:45:08Z,2016-01-07T15:34:12Z,True,10.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
914,QUnit.equiv ignores object methods,"https://jsfiddle.net/xcrh9n3d/
Since we verify inherited properties anyway, we should replace the weird constructor-based ""function"" callback with a simple return false (relying solely on the strict equality check in innerEquiv).",gibson042,MEMBER,2015-12-31T20:28:18Z,2016-10-08T02:17:03Z,True,6.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
915,QUnit.equiv treats Map and Set as ordered,"https://jsfiddle.net/xd2jnbLa/
I think we should ignore insertion order when comparing these objects (along with WeakMap and WeakSet, which we ignore completely).",gibson042,MEMBER,2015-12-31T20:34:24Z,2016-03-07T21:18:36Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
917,`jscs task` normally doesn`t working.,"jscs task doesn't normally working because grunt-jscs version is low. jscs task is normally working when  grunt-jscs version up.
Ref #916",mixed,CONTRIBUTOR,2016-01-08T07:38:48Z,2016-01-13T16:28:07Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
923,Separate module options from test environment,"Related:

#894 (comment)
https://github.com/jquery/qunit/pull/919/files#r51184320
#800 (comment)

Note that there are two ways to set before/after hooks (which are currently the only module options): as properties on an options object, and as methods on the argument passed to a callback. Exposing environment procedurally is easy (e.g., a writable environment property on the callback argument), but the declarative side makes backcompat tough. I'm not particularly thrilled with the thought of adding a fourth parameter, though... we could instead look for an environment property on the second argument, using it exclusively when present (technically backwards incompatible, but on the same scale as #919) and otherwise generating warnings whenever there's any non-before non-after property. All of which, of course, is assuming that keeping the declarative/procedural duality is valuable, about which I'm not fully persuaded but am inclined to keep for now (in part since the procedural interface is so new).
For example, all of these would generate the same environment for their tests:
QUnit.module(name, {
    beforeEach: function() {…},
    environment: { preserved: true },
    ignored: true
});

// Define tests
…
QUnit.module(name, function( module ) {
    module.environment = { preserved: true };
    module.beforeEach(function() {…});

    // Define tests
    …
});
QUnit.module(name, {
    beforeEach: function() {…},
    preserved: true
});

// Define tests
…
But the last would issue warnings about deprecated options/environment mixing.
I'm not in love with this, but it's the best I've got. Other suggestions welcome.",gibson042,MEMBER,2016-01-29T14:09:37Z,,False,4.0,,5.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
926,Run tests in random order,"In the docs for the reorder config option, it notes that reordering failed tests can:

also lead to random errors, in case your testsuite has non-atomic tests, where the order is important. You should fix those issues, instead of disabling reordering!

So, on a similar note, I'd like to propose adding the ability to specify that tests run in a seeded-random order. I think it would be relatively straightforward to introduce this as QUnit already has the infrastructure to reorder tests. This may not be particularly useful in browser, but could be very beneficial for CI/Post-Commit tooling looking to identify leaky/dependent tests.
As a point of reference, I looked into what other test frameworks have done in regards to this and found that this feature was recently introduced in Jasmine and has been requested multiple times for Mocha.",trentmwillis,MEMBER,2016-02-02T16:55:28Z,2016-02-24T15:26:14Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
927,reordered test runs issue,"I've run into an issue with Ember's unit tests when they upgraded from QUnit 1.18.0 to 1.20.0 with retrying tests. Before the rather long url of
tests/index.html?testId=3cc72180&testId=76cb477a&testId=78ef0a1c&testId=d0487dc9&testId=1d54b55d&testId=db4d08bd&testId=ad7f8de5&testId=dd527213&testId=17371bf6&testId=5ee3df71&testId=d5a89651&testId=9a1a7024&testId=a85bac39&testId=7058f532&testId=1de16bf5&testId=ccce39f2&testId=926434d2&testId=b78ea630&testId=cb041f6b&testId=0a58ebc7&testId=c7660ba0&testId=8507e759&testId=6e6efbd0&testId=039fcabf&testId=41cdaf57&testId=28537e92&testId=18a7bd54&testId=6f7a34a1&testId=5aa846fd&testId=12a6c98b&testId=2c07193f&testId=19da7e96&testId=fb2d4548&testId=8e6efed2&testId=d3b0ade2&testId=f05b6bb0&testId=6ff38b82&testId=9f97cbc1&testId=30b3451c&testId=927999ec&testId=bcb65df7&testId=570c2caa&testId=5cd3ee89&testId=614f1561&testId=67d305eb&testId=02ee93e6&testId=b6fa00d8&testId=dbd0c265&testId=4e551122&testId=88552927&testId=b08ce9d2&testId=5ba83754&testId=90f74ea1&testId=5df0b653&testId=dc46afe8&testId=95cf50f8&testId=8e049e95&testId=7325b082&testId=fc68b2a8&testId=55c9508e&testId=507fe8d2&testId=eefe2476&testId=2687e733&testId=59bf32d5&testId=c26a825d&testId=c06d6198&testId=b8b60f68&testId=26db00de&testId=f877a233&testId=d4b8b77e&testId=ce28bd57&testId=0237bd38&testId=407e1559&testId=526facce&testId=bee41d59&testId=e182cd63&testId=f9bba72c&testId=28ac8a43&testId=649b3e40
with 79 test ids would work. But now on refresh it only runs 39 of them. If I run it in a new tab it runs all 79 which makes me think it's a sessionStorage and reorder issue. May be related to something around 1.18.0...1.20.0diff-f6c2ded91c9881cdc31b5bfcabb54c3bR267. I'm working to get confirmation that it is reorder.",jdalton,NONE,2016-02-02T22:02:09Z,2016-02-08T17:44:25Z,True,7.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
928,Add a Stop Execution button up top,"This might be just me but I feel that there are times where you want to run all the tests until their is a particular type of failure that you want to focus on. However, getting to that error to click rerun while the tests are running is impossible. So I was wondering if it would be useful to have a button that stops test execution and retains the results view up until that point.

Is this possible?
Will people who are not me find this useful?
Where should I begin (assuming 1 & to are affirmative)?",tundal45,NONE,2016-02-03T18:59:46Z,2016-12-09T15:58:10Z,True,9.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
929,Suggest to fixture method.,"If I have to use fixture It has some ways.
1. Add html in #fixture.
<div id=""fixture"">
    <span>1</span>
</div>
This case has some cons. fixture is too hard to read and maintain If I have many fixture. For example. It can't know fixture in testcase. So. I search for #fixture in html but It is hard to search.
2. Append html using append or ....
jQuery(""<span>1</span>"").appendTo(""#fixture"");
This case has resolve uppon problem. but I feel like a hack.
Suggestion
Add method
QUnit.fixture

set html
return childnodes of #fixture

// pseudo code
QUnit.fixture = function( html ){
    document.getElementById(""fixture"").innerHTML = html;
    return document.getElementById(""fixture"").childNodes;
}
QUnit.test( ""fixture example1"", function( assert ) {
    QUnit.fixture(""<span>1</span>"");
    assert.ok( true, ""this test is fine"" );
});

QUnit.test( ""fixture example2"", function( assert ) {
    // return childeNodes of #fixture
    var childeNodes = QUnit.fixture(""<span>1</span>""); 
    assert.equal( childenodes.length, 1 );
});
make #fixture in js.
When I use fixture I have to add #fixture in html.  If Qunit make #fixture in js when it hasn't #fixture I can use easy fixture.",mixed,CONTRIBUTOR,2016-02-04T06:32:47Z,2016-02-16T21:32:02Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
930,Copy deepStrictEqual and notDeepStrictEqual from node.,I currently polyfill these in my browser tests. It would be great if QUnit shared these functions. Added here.,kellyselden,NONE,2016-02-14T23:11:57Z,2016-02-14T23:17:51Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
934,Tests: Define setup and tests near each other,"Cf. https://github.com/jquery/qunit/pull/931/files#r53812901
Some of our tests (logs, regex-filter, etc.) utilize what I consider to be a suboptimal pattern:
test/example.html
<script>
    QUnit.config.property = value;
</script>
<script src=""example.js""></script>
test/example.js
QUnit.module(…);

QUnit.test(…);
…
I'd like to see the setup and tests defined together.",gibson042,MEMBER,2016-02-23T17:32:26Z,2016-02-25T14:46:47Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
937,Leverage semver for devDependencies,"As I was working on #879, I was wondering if we should consider switching our devDependencies to leverage semver rather than pegging explicit version numbers for everything. Taking a look at David DM shows almost all our dependencies are out of date, we could mitigate this by using either ^ or ~ for our dependency versions.",trentmwillis,MEMBER,2016-02-26T02:28:08Z,2016-03-18T18:10:59Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
938,Add warning if `!details.result` and `actual === expected` for unknown reason.,"In reporter/html.js#L674-L713 if the test has failed a decision is made about what to actually report.
Prior to 87061fb the check that actual != expected was required to suppress printing the actual and difference since there was no if (!result) test.  After that change the actual != expected test only served to suppress the diff calculation when there would be no diff.  Now (as of ecc33ac) the else clause of that test is also used together with the check that expected contains an unexplored array or object to warn that the QUnit.dump.parse() has insufficient QUnit.dump.maxDepth to express a difference between the objects.
I'd like to propose that a general warning be added as an additional else clause to catch all other cases where the test has failed but the QUnit.dump.parse() couldn't detect the difference.  The absence of any mention of the actual value in some failing tests has recently caused me some confusion because I couldn't tell if the lack of reporting was a bug in QUnit or a problem with my tests. It turned out in this case (obviously in hindsight) that deepEqual was needed to compare NaN, but other causes of failure could be differing document objects or functions.",Parakleta,CONTRIBUTOR,2016-02-26T06:06:02Z,2016-03-21T15:41:35Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
940,Development is broken on Windows 10 environment,"The current development is broken on Windows 10 environment.
There are more than one breaking point. The first is on grunt-contrib-concat, where it concat files with the Windows EOL character. JSCS throws a code style error.
λ grunt jscs
Running ""jscs:all"" (jscs) task
Invalid line break at dist/qunit.js :
    11 |
    12 |( function( global ) {
    13 |
--------^
    14 |var QUnit = {};
    15 |
>> 1 code style errors found!
Warning: Task ""jscs:all"" failed. Use --force to continue.

The other error is due to the test-on-node tests on QUnit.stack (test/main/stack), where it fails at QUnit.stack: returns the proper stack line.
I did a clean install of npm packages both on my original environment and windows environment. Both are using Node 5.7.0 and npm 3.6.0.
I need to investigate this further.",leobalter,MEMBER,2016-03-02T18:50:59Z,2016-03-02T21:27:47Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
943,Use a windows based CI,"Ref #940
cc @trentmwillis",leobalter,MEMBER,2016-03-02T21:26:09Z,2016-03-04T15:46:18Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
947,Split tests for parallelization,"Recently, I've seen a lot of interest in and discussion on running JS tests in parallel. Most of these rely on faking concurrency through async behavior, while that is definitely an interesting approach I am not convinced it is the proper solution for browser-based tests that often rely on the document and other global/shared state. That said, I think finding a way to parallelize tests would be hugely beneficial, especially for larger code bases.
I'd like to propose that QUnit bake in support for splitting tests into groups at runtime. This would then allow users to parallelize test runs by using multiple, independent instances of their test page.
I imagine this could be based on url params like so:
/tests.html?batches=10&batch=1

This would split the tests into 10 different batches and then run the first batch. You can then adjust the batch parameter to run the other groups in other browser instances/tabs.
As an initial implementation, this could be super simple and just break the tests up into equally sized batches. Then, as an enhancement, we could standardize a test output that can be fed back into QUnit to allow weighted splitting to ensure the batches run in approximately equal amounts of time.
The primary benefit of this would be to allow parallelization, but in doing so it would also help identify non-atomic tests in the same way as the recently introduced test randomization feature does.
For full disclosure, this would benefit a recently implemented Testem feature to support running multiple test pages in parallel.",trentmwillis,MEMBER,2016-03-03T22:42:48Z,,False,18.0,,5.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
951,Suggestion [HTMLReporter]: make it possible to pass comma separated modules to `module` param,"Hi all,
I wonder if it's possible to specify a comma separated names, instead of specifying one module to run, like so:
http://localhost:8000?module=module1,module2

or
http://localhost:8000?module=module1&module=module2

Thanks :)",Arkni,CONTRIBUTOR,2016-03-09T18:36:25Z,2016-03-15T14:39:20Z,True,10.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
953,Update UI to allow multiple test/module selection,"As discussed in #951 and #952, it would be beneficial to have a better interface that allows for filtering multiple modules or tests. While this is nice to support those particular features, it would also be beneficial to take this as a chance to address some pain points of working with large test suites. In general, having a dropdown that is thousands of items long is not very useful.
In general, the following features should be considered:

 select individual modules
 select multiple modules
 select multiple tests
 support grouping of modules (e.g., in Ember tests we have Acceptance, Integration, or Unit tests) [can be accomplished through nested modules]
 filter/search the list of tests/modules

Anything else?",trentmwillis,MEMBER,2016-03-15T01:55:44Z,2016-09-18T01:37:26Z,True,11.0,,5.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
954,Document and prefer multiply-specified URL parameters over comma-separated,"Ref gh-951
QUnit.urlParams already stores repeated URL parameters in arrays: https://github.com/jquery/qunit/blob/0f9ae3443a0fc78d96baa2eb86f90b0cba9264b5/src/core/utilities.js#L115
For consistency with QUnit.config and to preclude ambiguous parsing, we should prefer that method over comma-separated values for specifying composite parameters (e.g., ?moduleId=720ab266&moduleId=0af5a573 instead of ?moduleId=720ab266,0af5a573), and deprecate the latter anywhere it's already documented.",gibson042,MEMBER,2016-03-15T15:35:33Z,2016-03-16T17:34:35Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
955,Confine urlParams references to browser-specific files,"urlParams is obviously intended for browser utilization, but we have some references to it elsewhere. Most pressing is test.js:Test#valid (which should be using a QUnit.config property), but I'd also like to see getUrlParams and the other core references (core/config.js & core.js#L1) move into e.g. a ""browser reporter"" that sets and initializes configuration from QUnit.urlParams (which will probably require testing conflict resolution for cases where both inline Javascript and URL parameters try to affect the same QUnit.config property).",gibson042,MEMBER,2016-03-15T16:39:05Z,2016-03-25T17:54:50Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
956,Reintroduce QUnit.config.module or QUnit.config.moduleFilter,"As noted in #951 (comment) , both QUnit.config.module and QUnit.config.moduleFilter were removed by 168b048 (gh-691) but remain documented as moduleFilter. However, it is not appropriate for deep library code to reach out and inspect URL parameters (cf. gh-955). We should restore one of the QUnit.config properties, replace the QUnit.urlParams reference, and update the documentation accordingly.",gibson042,MEMBER,2016-03-15T16:45:33Z,2016-03-21T00:41:00Z,True,10.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
958,Update browserstack-runner,QUnit uses an obsolete browserstack-runner version that still uses the 3rd version of the API. BrowserStack has been requesting all jQuery teams to stop using older API versions so we need to do the upgrade ASAP.,mgol,MEMBER,2016-03-16T11:42:39Z,2016-03-16T13:16:42Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
964,Remove sessionStorage interactions from HTML Reporter,"The HTML Reporter is largely an independent subcomponent, but as long as it interacts with sessionStorage, it must remain synchronized with Test#queue (which needs the ability to prioritize previously failed tests). However, it does very little with sessionStorage:

test start: display alternate ""running"" text for previously failed tests
test end: store result
suite end: clear (if no assertions failed)

The first is unnecessary (but if important, could be handled by adding a property to the testStart callback details), and the others really belong near the prioritization logic in test.js. An argument could be made for the smaller change of moving prioritization into the HTML Reporter, but QUnit.config.reorder isn't reporter-specific. And further, even though sessionStorage is essentially a browser capability, we only care about support of the relevant Storage interface—there's no reason why we couldn't expose a settable QUnit.config.storage property and thereby enable reordering in non-browser environments once the reporter yields this responsibility.
Therefore, we should do just that: move sessionStorage calls into runner code, where they will be invoked against a QUnit.config property defaulting to the well-known value.",gibson042,MEMBER,2016-03-18T05:45:37Z,2016-10-01T05:08:40Z,True,0.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
970,Export AMD with name,"Right now QUnit exports to AMD without specifying a name. When you transpile your code using Babel, and then try to load it with Almond, it fails because no name has been specified.
I was able to workaround this issue by manually exporting the module as the following:
define(""qunit"", function() { return QUnit; });
Is it possible to change QUnit's definition to explicitly set the exporting name?",fnando,NONE,2016-03-24T02:53:31Z,2016-04-18T21:12:13Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
974,Stop defining a default QUnit.reset,"Since we're deprecating QUnit.reset, we should stop relying on it. We could replicate the behavior almost perfectly by automatically registering a testDone callback that includes the current logic, but executes it only when QUnit.reset === undefined (or even !hasOwn.call(QUnit, ""reset"")).
I say ""almost perfectly"" because the current code runs after all testDone callbacks, but this proposal would have it run before them. This seems acceptable to me, but if it's a problem we can explore a promise-based remedy.",gibson042,MEMBER,2016-03-25T20:04:27Z,2016-05-19T19:39:42Z,True,6.0,2.0,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
975,Next QUnit is 2.0,"Hello everyone and specially @jquery/qunit team!
This is the mark to say 2.0 is the next version, except if we need some patch version to fix a bug on QUnit 1.23.0.
That means we need to hold any new features for now and start working removing all the deprecated parts.
The current PRs to merge are only #971 and #919, the others will have to wait, I promise it won't be long.",leobalter,MEMBER,2016-03-25T20:13:56Z,2016-04-19T16:29:31Z,True,5.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
977,Allow multiple before/beforeEach/after/afterEach,"It's inconsistent that every callback passed to QUnit.test is preserved, but beforeEach and afterEach overwrite preexisting values: https://jsfiddle.net/k9af94x7/
We should let the module hooks queue just like the tests do.
EDIT: …including before and after.",gibson042,MEMBER,2016-03-26T19:52:37Z,2017-06-06T03:52:39Z,True,26.0,,8.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
978,Make module-contextual module/test/etc. functions,"(this is a restatement of #670 (comment) , which itself referenced a discussion from #670 (comment) )
7be1d6c introduced the QUnit.module( name, callback ) signature, which immediately invokes a callback to allow for definition of nested modules. However, doing so requires using global QUnit.module and/or QUnit.test functions: https://jsfiddle.net/k9af94x7/
This is ugly, and bad for the same reasons as use of global assertions like QUnit.equal instead of contextual assertions like assert.equal. We're fixing the assertions issue, and should do the same with module and test by making them accessible from either context or arguments of the module callback, while fulfilling some goals to the maximum possible extent:

Intuitively-readable invocations, possibly paradigm-dependent (e.g., use of BDD names)
Maximum similarity between module and test callbacks, for future iterative convergence
Separation of concerns (e.g., no properties on assert that do not pertain to assertions, since we might want to allow integrating external assertion libraries)

My ideal vision would fully integrate the two functions, allowing code like:
// Note the second parameter
QUnit.test(""grandparent"", (assert, test) => {
    // `test` is destructurable, and contains helpers like beforeEach.
    // Those that are functions have signatures analogous to `test` itself.
    // Also present is environment, so users never need deal with `this`.
    test.beforeEach((assert, test) => { test.environment.ready = true; });

    // Any test can contain assertions, even those that would traditionally be modules.
    // But only child tests interact with beforeEach/afterEach.
    assert.strictEqual(test.environment.ready, undefined);
    test(""uncle"", (assert, { environment }) => {
        assert.strictEqual(environment.ready, true);
    });

    // As noted in https://github.com/jquery/qunit/pull/670#issuecomment-78513676 ,
    // a significant current difference between `module` and `test` is their
    // (a)synchronicity.
    // We can make that explicit (names subject to bikeshedding, but I think
    // defaulting to async will make for the smoothest transition.
    test.immediate(""parent"", (assert, test) => {
        test(""child"", (assert, test) => {
            assert.strictEqual(test.environment.ready, true)
        });
    });
});
However, if the above is a bit much, then I suppose we can just add module and test properties to the argument passed to module callbacks:
QUnit.module( ""module b"", function( hooks ) {
  hooks.test( ""a basic test example 2"", function( assert ) {
    assert.ok( true, ""this test is fine"" );
  });

  hooks.module( ""nested module b.1"", function( hooks ) {
    hooks.test( ""a basic test example 3"", function( assert ) {
      assert.ok( true, ""this test is fine"" );
    });
  });
});
Note that module is already incompatible with test, because arguments passed to their respective callbacks differ (respectively, moduleFns—a.k.a. hooks—vs. assert).",gibson042,MEMBER,2016-03-26T20:33:08Z,,False,0.0,,2.0,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
982,update breaks Uglify2 of RequireJS,"Recently updated
qunit#1.23.1 source/bower_components/qunit
now
Running ""requirejs:prod"" (requirejs) task
>> Error: Cannot uglify2 file:
>> /Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/.t
>> mp/task/requirejs/bower_components/qunit/reporter/html.js. Skipping it. Error
>> is:
>> 'return' outside of function (line: 3, col: 7, pos: 126)
>> 
>> Error
>>     at new JS_Parse_Error
>> (/Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/n
>> ode_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18368:18)
>>     at js_error
>> (/Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/n
>> ode_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18376:11)
>>     at croak
>> (/Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/n
>> ode_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18852:9)
>>     at
>> /Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/no
>> de_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18994:21
>>     at
>> /Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/no
>> de_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18899:24
>>     at block_
>> (/Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/n
>> ode_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:19179:20)
>>     at
>> /Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/no
>> de_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18946:29
>>     at
>> /Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/no
>> de_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18899:24
>>     at if_
>> (/Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/n
>> ode_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:19162:44)
>>     at
>> /Users/jamwilk/dev/hybris/bin/custom/egrocery/egrocerystorefront/front-end/no
>> de_modules/grunt-contrib-requirejs/node_modules/requirejs/bin/r.js:18990:24
Warning: RequireJS failed. Use --force to continue.",,NONE,2016-04-13T17:20:28Z,2016-04-19T20:40:15Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
983,Handle QUnit overloading,"As reported on twitter by @fnando, QUnit silently fails if it's loaded twice or more in a single suite.
We may investigate how to better handle this, failing or not, it's nice to make it clear.",leobalter,MEMBER,2016-04-13T18:18:06Z,2016-05-16T15:58:09Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
984,Confirm proper async isolation,#976 (comment) suggests that some state may be leaking.,gibson042,MEMBER,2016-04-14T03:05:35Z,2016-06-16T00:29:18Z,True,2.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
986,Deprecate assert.push,"Please, see the comments below.",leobalter,MEMBER,2016-04-19T16:36:47Z,2016-12-14T15:05:18Z,True,3.0,,3.0,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
987,[integration issue?] Tests called twice,"Context: I'm trying to integrate QUnit into the Service Now platform's server-side(Antiqudated Rhino). I've got it mostly working, but my test suite seems to be called twice, or not at all, or I get a ""start called outside of a test, when already started Exception"". depending on the order of my tests, start(), load() and what i've set autostart and autorun to
I'm getting frustrated.
Here's my runner:
var CidQUnit2 = function(testGr,run_id){
    //Loads the QUnit code and moves the resulting QUnit object to the global namespace
        this.loadQUnit();

//register callbacks
    QUnit.begin(this.notify.curry(""Qunit Test Suite Started""));
    QUnit.done(this.notify.curry(""Qunit Test Suite Ended""));
    QUnit.log(this.log.curry(""Qunit Assertion Complete""));
    QUnit.moduleStart(this.log.curry(""Qunit Module Started""));
    QUnit.moduleDone(this.log.curry(""Qunit Module Done""));
    QUnit.testStart(this.log.curry(""Qunit Test Started""));
    QUnit.testDone(this.log.curry(""Qunit Test Ended""));

//what order do I call the configs/and load()/start()?
    QUnit.load();

    QUnit.config.autostart=false;
    QUnit.config.autorun=false;
    QUnit.config.blocking=false;
    QUnit.config.updateRate = 0;
    /*this should be the equivalent of just a series of 
    *QUnit.test() and 
    *QUnit.module statements */
    GlideEvaluator.evaluateString(testGr.u_test_script);
//Start the tests?
    QUnit.start();  
};

//load QUnit into the global namespace
CidQUnit2.prototype.loadQUnit = function(){
    JSUtil.getGlobal().exports = {};
    gs.include(""CidQUnitFramework-v1.23"");
    JSUtil.getGlobal().QUnit = exports.QUnit;

};

the current simple test I'm using is this:
QUnit.test(""test1"",function(assert){
    assert.ok(true);
    assert.equal(1,1,""1--1"");
    assert.notEqual(1,2);
});
I guess the ultimate question is:
what is the appropriate order to do the following

call load()
call start()
call the test code itself
set the config object

and finally, the recommended settings for the config too.",danielmiester,CONTRIBUTOR,2016-04-19T21:37:42Z,2016-04-21T22:05:06Z,True,13.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True
988,Module picker is broken,"The multi-select picker introduced in 0780127 provides no mechanism for committing a selection, and suffers some on styling and accessibility. I'd like to fix it before 2.0.",gibson042,MEMBER,2016-04-19T22:01:26Z,2016-04-20T20:10:52Z,True,1.0,2.0,2.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
990,How should global error handlers resume the test runner in 2.0?,"We're using QUnit and RequireJS. We've defined a require.onError handler as follows:
define([], function () {
    require.onError = function (e) {
        if (QUnit && QUnit.config) {
            if (QUnit.config.current) {
                var currentTest = QUnit.config.current;

                currentTest.pushFailure(""Died on test #"" + (currentTest.assertions.length + 1) + "" "" +
                    currentTest.stack + "": "" + (e.message || e));
            }

            // Restart the tests if they're blocking
            if (QUnit.config.blocking) {
                QUnit.start();
            }
        }
    };
});
This is heavily inspired by how the global error handler used to handle these issues. However, QUnit.start() itself now throws an error (in 2.0.0-rc1), so I need a new way to resume the test runner. What is the best way to do that?",platinumazure,CONTRIBUTOR,2016-04-20T18:56:58Z,,False,26.0,,6.0,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
993,Is it possible to do subtest and display pyramid of test,"I'm not sure it already possible but if it not I would like to request this feature
Such as I want to do some test with multiple users. But before that I would like to test each user and result each one in each block but still in the same scope of the test. Then do the real test
Ability to display subtest in block and layer each as pyramid could be handy
Something like assert.test(function(subAssert){ /* subtest */ }); maybe?",Thaina,NONE,2016-05-06T04:36:57Z,2016-05-21T05:20:27Z,True,7.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1000,"urlParams does not decode ""+"" character in query params","The getUrlParams function does not decode the plus character (+) in query parameters, which can cause QUnit to fail to match modules or test names when the module or filter query parameters include spaces encoded as plus characters.
For example, if a test named ""my test"" exists, and the tests page is at ""http://localhost:4200/tests"", then the URL ""http://localhost:4200/tests?filter=my+test"" will fail to run the test because it does not decode the parameter ""my+test"" to ""my test"".
The test- and module-filtering still works in most cases because QUnit's url-generating function setUrl encodes spaces in the query parameters as %20, and getUrlParams does decode %20 as a space.
We have a use case where a uri-normalization library is running on the test page and it replaces the %20 with + in the url's query parameters before QUnit runs getUrlParams.
According to the W3, spaces in query parameter names and values (mime type application/x-www-form-urlencoded) should be replaced with +, not %20, so it seems like the correct behavior would be:

for QUnit's HTML Reporter UI to use plus characters instead of spaces when generating query params
for QUnit's getUrlParams to decode plus characters as spaces",bantic,CONTRIBUTOR,2016-05-16T23:47:22Z,2016-05-17T16:58:22Z,True,5.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1004,Skipped tests runtime should be undefined,"Problem
While working on the js-reporter project I have discovered that also the runtime of skipped tests is a Number.
We on the js-reporters think that the runtime should be undefined, because the test does not run, it is skipped, so it cannot have a runtime.
I looked over the docs about the runtime prop on the testDone callback, where it is described:

The total runtime in millseconds of the test, including beforeEach and afterEach

But, also all hooks for a skipped test, are also skipped.
Solution
To achieve this, we should only modify the runtime of the object that is passed as param to the callback on testDone, something like:
runLoggingCallbacks( ""testDone"", {
  ...
  runtime: (!!this.skip) ? undefined : this.runtime,
  ... 
} );
I have done this change locally and all tests are passing. I want also to write some tests to check the tests runtime for a good coverage. Here is a gist about how I think to test it, but I don't know how to simulate a test that is failing, so that  I can get its runtime.",flore77,NONE,2016-05-31T13:47:30Z,2016-06-27T14:29:11Z,True,9.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1005,Extend Assert#pushResult to receive a custom diff value,"As requested by @wycats, it would be good to extend Assert#pushResult to receive a custom diff value, where it does not replace the default QUnit.diff (still useful for other assertions) but it prints a customized diff value.
Examples:
// Using default diff
QUnit.assert.prototype.customAssertion1 = function(actual, expected, result = actual == expected) {
  return this.pushResult({result, actual, expected});
};

// Using custom diff
QUnit.assert.prototype.customAssertion2 = function(actual, expected, result = actual == expected) {
  return this.pushResult({
    result,
    diff: lineDiff(actual, expected)
  });
};
If diff is given, QUnit should get its value and ignore calling the default QUnit.diff.",leobalter,MEMBER,2016-05-31T18:34:54Z,,False,5.0,,5.0,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False
1008,HTML Reporter breaks with Symbol values,"Here is the line causing this bug: https://github.com/jquery/qunit/blob/master/reporter/html.js#L747
If I have a failing assertion, the HTML Reporter will try to call .indexOf on top of the expected value. A symbol type has no indexOf and that will break the tests.
QUnit.test(""different symbols"", function(t) {
  var s1 = Symbol(""QUnit"");
  var s2 = Symbol(""QUnit"");
  t.equal(s1, s2);
});
This fix will require an extra investigation to see if it breaks further, but it's still an easy one to solve.",leobalter,MEMBER,2016-06-23T16:22:42Z,2016-06-27T14:26:30Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1009,update propEqual and notPropEqual to handle Symbols properly,"propEqual and notPropEqual are not handling symbols properly, they need to fixed.
QUnit.test(""symbols"", function(t) {
  var s1 = Symbol(""QUnit"");
  var s2 = Symbol(""QUnit"");
  t.propEqual(s1, s2, ""this should not pass"");
  t.notPropEqual(s1, s2, ""this should pass"");
  t.propEqual(s1, s1, ""this should pass"");
  t.notPropEqual(s1, s1, ""this should not pass"");
});
While it works for the equivalency of the same symbols, the does not for different symbols. s1 and s2 are different, and they are not compared by their description, despite it being the same. They should not be compared by their description, thou. The bug is elsewhere.
Other minor problem is the failure message reporting them as ordinary objects, they are not, they are on their own native type.",leobalter,MEMBER,2016-06-23T16:31:29Z,2017-03-19T19:04:54Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1010,New assertions sameValue and sameValueZero,"ECMAScript has two internal abstractions to compare values called sameValue and sameValueZero.
They are different than == and === as they return true for NaN values and compare -0 and +0.
Based on my experience with test262, and considering some personal goals I have for QUnit (still seeking funding for it) I believe it's fair to ship assertions that does the same comparisons, while I believe it's dangerous to simply modify strictEqual.
Object.is returns the exact result for sameValue, but that's an ES6 feature and not available on supported browsers. The results are the same as === but with special checks for NaN and bit precision zeros.
Here goes some data on how they would work:



method
NaN, NaN
0, -0
-0, -0
[1, 2], [1, 2]




equal
fail
pass
pass
fail


strictEqual
fail
pass
pass
fail


deepEqual
pass
pass
pass
pass


propEqual
pass
pass
pass
pass


_.isEqual
pass
pass
pass
pass


sameValue
pass
fail
pass
fail


sameValueZero
pass
pass
pass
fail



The following code can provide some results, as it uses lodash's isEqual as well:
cc @jdalton
QUnit.assert.sameValue = function(a, b, message) {
  var result;

  if (a === b) {
    // -0 vs +0
    result = (a !== 0 || 1/a === 1/b);
  } else

  // NaN
  if (a !== a && b !== b) {
    result = true;
  }

  this.pushResult({
    result,
    actual: a,
    expected: b,
    message
  });
};

QUnit.assert.sameValueZero = function(a, b, message) {
  var result;

  if (a === b) {
    result = true;
  } else 

  // NaN
  if (a !== a && b !== b) {
    result = true;
  }

  this.pushResult({
    result,
    actual: a,
    expected: b,
    message
  });
};


var {test} = QUnit;

test(""NaN"", function(t) {
  t.ok(_.isEqual(NaN, NaN), ""lodash equals"");
  t.equal(NaN, NaN, ""equal"");
  t.strictEqual(NaN, NaN, ""strictEqual"");
  t.deepEqual(NaN, NaN, ""deepEqual"");
  t.propEqual(NaN, NaN, ""propEqual"");
  t.sameValue(NaN, NaN, ""sameValue"");
  t.sameValueZero(NaN, NaN, ""sameValueZero"");
});

test(""-0 vs +0"", function(t) {
  t.ok(_.isEqual(0, -0), ""lodash equals"");
  t.equal(0, -0);
  t.strictEqual(0, -0);
  t.deepEqual(0, -0);
  t.propEqual(0, -0);
  t.sameValue(0, -0, ""sameValue"");
  t.sameValueZero(0, -0);
});

test(""-0"", function(t) {
  t.ok(_.isEqual(0, -0), ""lodash equals"");
  t.equal(-0, -0);
  t.strictEqual(-0, -0);
  t.propEqual(-0, -0);
  t.deepEqual(-0, -0);
  t.sameValue(-0, -0);
  t.sameValueZero(-0, -0);
});

test(""arrays"", function(t) {
  t.ok(_.isEqual([1, 2], [1, 2]), ""lodash equals"");
  t.equal([1, 2], [1, 2], ""equal"");
  t.strictEqual([1, 2], [1, 2], ""strictEqual"");
  t.propEqual([1, 2], [1, 2], ""propEqual"");
  t.deepEqual([1, 2], [1, 2], ""deepEqual"");
  t.sameValue([1, 2], [1, 2], ""sameValue"");
  t.sameValueZero([1, 2], [1, 2], ""sameValueZero"");
});",leobalter,MEMBER,2016-06-23T17:05:50Z,,False,4.0,,4.0,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1012,"QUnit fails in IE 6, 7 and 8.","qunitjs.com documents that the browser support is:

IE6+ and Current - 1 for Chrome, Firefox, Safari and Opera.

So I am assuming that IE 6, 7 and 8 are supported.

What happens is that once upgrading to QUnit 2.0.0 my tests for IE 6, 7 and 8 started failing in Sauce Labs:

Failing PR: js-cookie/js-cookie#216
Failing Build: https://travis-ci.org/js-cookie/js-cookie/builds/138708313#L1035-L1056
This is the code that exposes the test info for Sauce Labs: https://github.com/js-cookie/js-cookie/blob/cfa66f314a3d380083cf50ffe733234b6db7b331/test/utils.js#L7-L24

It will be pretty hard to track down the root cause of this issue, so I was wondering if anyone could shed some light on something obvious that might have changed between v1 and v2 that could have been breaking the unit tests in those browsers?
The code being tested is working, because it only fails once QUnit is upgraded and only in those specific IE browsers.
Any ideas?",FagnerMartinsBrack,NONE,2016-06-25T11:25:35Z,2016-06-26T00:36:44Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1013,"HTMLReporter: apply/reset buttons, in module dropdown, disappear when they shouldn't be","QUnit version: 2.0.0
Steps to reproduce:
Let's say I have 3 modules: rules, messages and aria.

Select the module rules from the dropdown: the buttons apply/reset will appear (expected)
Select another module (messages for example): the buttons still appear (expected)
Uncheck the module rules: the buttons will disappear (unexpected)

Instead they should appear because the dropdown is still dirty and I didn't commit my choices yet.
See attached screen cast:",Arkni,CONTRIBUTOR,2016-06-26T01:34:19Z,2016-06-27T17:42:54Z,True,5.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1015,"Assert: ""throws"" removed signature (block, string, string) not in migration guide despite reference to migration guide in exception message","Maybe this belongs on jquery/qunitjs.com, if so I can move it there.
The ""throws"" assertion throws an exception when given (block, string, string) arguments. It mentions the migration guide, but the migration guide does not contain information about this at all.",platinumazure,CONTRIBUTOR,2016-06-27T14:54:30Z,2016-06-27T15:20:45Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1016,before + beforeEach = hang of test,"QUnit.module('Sample tests', {
  before: function() {
    return new Promise(function(resolve) {
      setTimeout(function() {
        console.log('`before` complete');
        resolve()
      }, 200);
    });
  },
  beforeEach: function() {
    return new Promise(function(resolve) {
      setTimeout(function() {
        console.log('`beforeEach` complete');
        resolve();
      }, 100);
    });
  }
});

QUnit.test('Sample test', function(assert) {
  console.log('Test started!');
  assert.ok(true);
});
'Test started!' never appears to console. Qunit version is 0.2.0. Resolving through assert.async() and done produces the same problem.",vogdb,NONE,2016-06-29T11:41:25Z,2016-07-13T01:46:45Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1018,Never ending async test although `done` was called,"I guess that I am super unlucky. Test hangs and afterEach is never called. Bugs on 2.0.0. Works fine on 1.23.1.
QUnit.module('Sample tests', {
  beforeEach: function() {
    console.log('`beforeEach` started');
    return new Promise(function(resolve) {
      setTimeout(function() {
        console.log('`beforeEach` complete');
        resolve();
      }, 100);
    });
  },
  afterEach: function() {
    console.log('`afterEach` started');
    return new Promise(function(resolve) {
      setTimeout(function() {
        console.log('`afterEach` complete');
        resolve();
      }, 100);
    });
  }
});

QUnit.test('Sample test', function(assert) {
  console.log('Test started!');
  //assert.expect(1);
  var done = assert.async();
  setTimeout(function(){
    assert.ok(true);
    console.log('Test finished!');
    done();
  }, 1000);
});",vogdb,NONE,2016-06-29T18:00:40Z,2016-06-29T19:33:28Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1019,Calling `done` after test has completed,"While working to integrate JsReporters into browserstack-runner, I got in some problems with tests that were including async operations, while each framework is treating this different.
Qunit provides async control through: async( [acceptCallCount ] ), Type: Number, acceptCallCount (default: 1)
But Qunit will fail a test only if the callback returned by assert.async() will be called synchronus more times than acceptCallCount.
Example:
// QUnit will report this test as failed
test('aa', function(assert) {
  var done = assert.async();
  assert.ok(true);
  done();
  done();
});

// QUnit will report this test as passed
test('aa', function(assert) {
    var done = assert.async();
    assert.ok(true);
    done();
    setTimeout(function() {
      done();
    }, 1000);
});
Mocha would have failed both tests.
Jasmine would have report both tests as passed.
The difference between Mocha and QUnit is that Mocha emits the test twice, one time as passed, the other time as failed when the done callback is called the second time, on the other hand QUnit emits the test only one time.
We on the JsReporters would want to set a standard for this so I and also @jzaefferer have agreed that a single emit for the failure seems correct. But I don't know how it can be achieved. For the above example with the passing test (which theoretically should be failing), the done callback is called and Qunit thinks everything is ok, this test has passed, but it will not know if the done callback will be called a second time, it would have to wait for an indefinite period of time. If I set the timeout to be after 5 minutes, but after 10 minutes etc.
What's your opinion about this? Do you agree that it should be a single emit ? Or do you find that how Mocha proceeds is right? Should we treat the above example like a bug in the test itself and QUnit should have nothing to do with it?",flore77,NONE,2016-07-05T22:39:50Z,2017-04-07T16:50:10Z,True,12.0,,6.0,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1021,Does QUnit want to use ESLint?,"With ESLint and JSCS having joined forces and jQuery core starting to use ESLint, I'm wondering if this is something QUnit is also interested in doing. Was anyone planning to look into it?
Also, if ESLint is consumed here, I have an ESLint plugin eslint-plugin-qunit which might be useful to you folks.
I'm happy to do a good amount of the grunt work to set things up if folks are interested in one or both of these propositions. Let me know.",platinumazure,CONTRIBUTOR,2016-07-10T05:15:17Z,2016-09-16T18:49:43Z,True,14.0,,5.0,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1022,Support running QUnit in a Web Worker,"I'm working on hacking a version of QUnit 2.0 to work in a WebWorker/ServiceWorker, but it would be nice to have official support for it.",martndemus,CONTRIBUTOR,2016-07-14T09:34:19Z,2017-05-21T23:02:13Z,True,7.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1023,QUnit 2.0.0: Timeout when using promises in hooks,"Hi,
The following tests won't be executed:
`
((function(QUnit) {
var callbackOrder = [];
QUnit.module(""Check whether QUnit handles promises properly"", {
    before: function(assert) {
        return new Promise(function(resolve) {
            callbackOrder.push(""before"");
            resolve();
        });
    },
    beforeEach: function(assert) {
        return new Promise(function(resolve) {
            callbackOrder.push(""beforeEach"");
            resolve();
        });
    },
    afterEach: function(assert) {
        return new Promise(function(resolve) {
            callbackOrder.push(""afterEach"");
            resolve();
        });
    },
    after: function(assert) {
        return new Promise(function(resolve) {
            callbackOrder.push(""after"");
            resolve();
        });
    }
});

QUnit.test(""Check QUnit callbacks in first test"", function(assert) {
    return new Promise(function(resolve) {
        assert.deepEqual(callbackOrder, [""before"", ""beforeEach""]);
        resolve();
    });
});

QUnit.test(""Check QUnit callbacks in second test"", function(assert) {
    return new Promise(function(resolve) {
        assert.deepEqual(callbackOrder, [""before"", ""beforeEach"", ""afterEach"", ""beforeEach""]);
        resolve();
    });
});

})(QUnit));
`
I guess QUnit has a problem when dealing with multiple Promises.
It seems to work if only before or only beforeEach is used.
Thanks,
Thomas",tbiesemann,NONE,2016-07-20T15:04:14Z,2016-07-25T21:39:18Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1024,Introduce CLI tool,"Lately, we've been doing a lot of work on the reporter interface for QUnit and I think that once we start shipping a standard TAP (or other) reporter, it'll lower the barrier to adoption of QUnit for non-browser projects (specifically thinking about Node projects).
However, I think one thing that would complement that effort and make it trivial to use QUnit in those cases would be to introduce a command-line tool similar to what Mocha provides. In particular, this tool should make running QUnit tests in Node easy without having to provide a custom script.
There are some tools currently available (such as node-qunit or even mocha-qunit-ui), but it would be great to have one backed by the project that doesn't require additional overhead from the project maintainers.
As an aside: I would also very much like to see this happen so that we can unify the testing story in the Ember community, where most developers use QUnit in the browser for applications, but Mocha in node for build tools or other things.",trentmwillis,MEMBER,2016-07-26T02:27:00Z,2017-03-31T04:30:21Z,True,11.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1029,urlParams mishandles Object.prototype property collisions,Object.prototype properties are treated as prior values when processing URL parameters of matching names: https://output.jsbin.com/venicolabe?toString=string,gibson042,MEMBER,2016-08-11T23:12:24Z,2016-08-12T22:34:28Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
1031,QUnit 2.0 IE8 support,"Hey, I tried looking but didn't find a good definite answer about this. Does QUnit 2.0 drop IE8 support? We just tried updating to it on videojs and then noticed that the tests were failing.
It turned out the issue was an Object.defineProperty call that doesn't work on IE8.
Thanks.",gkatsev,NONE,2016-08-13T03:18:45Z,2016-08-13T21:32:32Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1032,Is there a good reason why logical expressions might be used in an assertion argument?,"Note: This is more a question about usage patterns and best practices, rather than a real issue on the repo-- if this should be moved elsewhere, let me know. QUnit's presence in the #jquerydev channel of freenode hasn't been very strong (or I've logged on at bad times), and I'm not sure where else to go.
The basic question is, is it ever a good practice to have assertions involving semi-complex expressions (like a logical expression)?
Note: This is more about linting rather than correct usage of QUnit.
Possible examples:
// 1. Unsure if object exists at this point
assert.ok(obj && obj.someProp, ""someProp exists and is truthy"");

// 1a. Could separate into multiple assertions
assert.ok(obj, ""obj exists"");
assert.ok(obj.someProp, ""someProp exists and is truthy"");

// 2. One property or another should exist
assert.ok(obj.someProp || obj.anotherProp, ""someProp or anotherProp exists"");

// 2a. But this suggests a possible non-deterministic test, not a great unit test
Is there any legitimate use case I'm not thinking of?",platinumazure,CONTRIBUTOR,2016-08-16T19:13:17Z,2016-08-19T02:31:37Z,True,6.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
1034,Remove jsDump,"This is a long way off, but I wanted to open an issue to make sure we remember to remove QUnit.jsDump in 3.0 (we forgot it in 2.0).
Reference code.",trentmwillis,MEMBER,2016-08-24T02:21:48Z,2016-09-24T17:08:21Z,True,13.0,,5.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1037,before/after hooks run only for first test in module,"I'm running into an issue with before/after hooks using QUnit 2.0.1. Here's the sample module setup I'm working with:
QUnit.module(""Sample module"", function(hooks) {
    hooks.before(function(assert) {
        console.log(""Before"");
    });

    hooks.after(function(assert) {
        console.log(""After"");
    });

    QUnit.test(""Test A"", function(assert) {
        assert.expect(0);
        console.log(""Test A ran"");
    });

    QUnit.test(""Test B"", function(assert) {
        assert.expect(0);
        console.log(""Test B ran"");
    });

    QUnit.test(""Test C"", function(assert) {
        assert.expect(0);
        console.log(""Test C ran"");
    });
});
and the resultant console output I'm seeing is:
Before
Test A ran
After
Test B ran
Test C ran

When I expect to see this:
Before
Test A ran
Test B ran
Test C ran
After

I'm roughly following the guidance in the last sample (""Hooks stack on nested modules"") on this page, but substituting before/after for beforeEach/afterEach and without a nested module: https://api.qunitjs.com/QUnit.module/.
When debugging into qunit.js a bit, I noticed when a hook is run and it checks to see if the module test count matches the number of module tests run, that the number of tests registered for the module isn't accurate (it's 1, ""Test A"", but ""Test B"" and ""Test C"" aren't registered).
Thoughts on what could be going wrong? Happy to provide more info about my setup if desired, and thanks in advance for any help!",brendyna,NONE,2016-09-02T21:57:52Z,2016-09-06T21:54:12Z,True,7.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1038,QUnit.start in tests and module hooks?,"Hi folks. Just want to confirm, is QUnit.start() expected to throw not only in tests but also in module hooks? (My understanding is that config.current should be valued in those cases as well.)
I know I can test this myself to get an idea of actual behavior, but I'm also trying to confirm what the expected/supported behavior is intended to be. It will help me make a decision on my eslint-plugin-qunit with regard to how QUnit.start() calls should be linted.",platinumazure,CONTRIBUTOR,2016-09-06T16:57:00Z,2016-09-06T18:01:04Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
1039,QUnit crashes if promise is rejected without arguments,"In case of a failing test when a promise gets rejected, QUnit crashes internally with a  null reference.
This can be reproduced using this snippet:
    QUnit.test(""QUnit shall handle failing tests properly"", function(assert) {
        var resolve = function(){};
        var reject = function(){};
        var promise = new Promise(function(_resolve, _reject) {
            reject = _reject;
        });
        reject(undefined);
        return promise;
    });
The crash happens here:
    resolvePromise: function( promise, phase ) {
        var then, resume, message,
            test = this;
        if ( promise != null ) {
            then = promise.then;
            if ( QUnit.objectType( then ) === ""function"" ) {
                resume = internalStop( test );
                then.call(
                    promise,
                    function() { resume(); },
                    function( error ) {
                        message = ""Promise rejected "" +
                            ( !phase ? ""during"" : phase.replace( /Each$/, """" ) ) +
                            "" "" + test.testName + "": "" + ( error.message || error );
                        test.pushFailure( message, extractStacktrace( error, 0 ) );
                        // Else next test will carry the responsibility
                        saveGlobal();
                        // Unblock
                        resume();
                    }
                );
            }
        }
    },
The error object is undefined, hence error.message will fail.
Best, Thomas",tbiesemann,NONE,2016-09-15T07:21:36Z,2016-09-17T17:04:41Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1044,Improve moduleStart and moduleDone behavior in nested modules,"As discussed in #1043, moduleDone should only fire after the entirety of a module has finished, including it's child modules. Additionally, moduleStart should only fire once when the first test of the module is about to begin.",trentmwillis,MEMBER,2016-09-20T03:26:35Z,2016-09-23T19:10:54Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1048,PhantomJS is blocking tests to run,"Running ""qunit:qunit"" (qunit) task
    Testing test/index.html
    PhantomJS threw an error:ERROR
    >> 0 [ '' ]
    Warning: PhantomJS exited unexpectedly with exit code null. Use --force to continue.

    Aborted due to warnings.

I have no idea what is causing this, some sort of ERROR is happening there where I can't reproduce in a browser test.
I guess it's due to my recent installed Mac OS Sierra.
It works on Ubuntu.",leobalter,MEMBER,2016-09-23T22:11:02Z,2016-12-09T15:53:29Z,True,17.0,,6.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1054,Investigate clearing of sessionStorage,It appears that sessionStorage clearing may be busted per #1042 (comment). We should investigate and try to add a regression test if possible.,trentmwillis,MEMBER,2016-09-27T02:23:33Z,2016-11-13T21:35:33Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1056,assert.deepEqual throws TypeError when comparing Symbols,"When a comparison between arrays containing Symbols fails, rather than printing an error message the assert.deepEqual function throws a type error.
  QUnit.test('`a test`', assert => {
    assert.expect(1);

    assert.deepEqual([Symbol('mySymbol')], [5]);
  });

Results in the following output
 FAIL - `a test`
C:\Users\Harry\WebstormProjects\IteratorUtil\node_modules\qunit-extras\qunit-extras.js:471
            'Actual: ' + String(entry.actual)
                         ^

TypeError: Cannot convert a Symbol value to a string
    at Array.toString (native)
    at Array.<anonymous> (C:\Users\Harry\WebstormProjects\IteratorUtil\node_modules\qunit-extras\qunit-extras.js:471:26)
    at runLoggingCallbacks (C:\Users\Harry\WebstormProjects\IteratorUtil\node_modules\qunit-extras\node_modules\qunitjs\qunit\qunit.js:291:17)
    at Object.Test.finish (C:\Users\Harry\WebstormProjects\IteratorUtil\node_modules\qunit-extras\node_modules\qunitjs\qunit\qunit.js:822:3)
    at Object.<anonymous> (C:\Users\Harry\WebstormProjects\IteratorUtil\node_modules\qunit-extras\qunit-extras.js:340:18)
    at Object.<anonymous> (C:\Users\Harry\WebstormProjects\IteratorUtil\node_modules\qunit-extras\qunit-extras.js:219:22)
    at Object.<anonymous> (C:\Users\Harry\WebstormProjects\IteratorUtil\node_modules\qunit-extras\qunit-extras.js:412:16)
    at Object.finish (C:\Users\Harry\WebstormProjects\IteratorUtil\node_modules\qunit-extras\qunit-extras.js:219:22)
    at C:\Users\Harry\WebstormProjects\IteratorUtil\node_modules\qunit-extras\node_modules\qunitjs\qunit\qunit.js:885:11
    at process (C:\Users\Harry\WebstormProjects\IteratorUtil\node_modules\qunit-extras\node_modules\qunitjs\qunit\qunit.js:550:24)
This is because string concatenation with Symbols fails:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString#No_string_concatenation
I believe that somewhere [Symbol('mySymbol')].toString() is called which throws the error.",harrysarson,NONE,2016-10-02T15:48:39Z,2016-10-03T10:05:00Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1059,feature: Make it possible to load QUnit after domReady,"I am using QUnit together with OpenUI5
UI5 comes with its own amd syntax similar to require.js.
It would be nice to be able to load QUnit asynchronously to provide a test environment from the framework side.
How i would imagine it is that you could define a global QUnit config before QUnit itself is loaded
window.QUnit = { config: { autostart: false } };
When QUnit is loaded, it takes this config and extends it with the needed defaults. Here is a full jsbin outlining the problem
If you like the idea i would create a pull request for it. I just wanted to discuss it upfront.",TobiasOetzel,CONTRIBUTOR,2016-10-07T14:31:21Z,2016-12-04T22:12:53Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1061,Should we extract src/core/onerror.js core logic to be independent of browser?,"Can we extract the core logic of src/core/onerror into a module, and then change the HTML reporter (or other browser-specific orchestration code) to expose a wrapper of that code as window.onerror?
This would allow me to use that same logic pretty easily in similar-but-not-quite-equivalent scenarios, such as require.onError when using RequireJS.
As a bonus, this may prevent the need for #1051 (at least for me). Or, at the very least, it will allow us to have a purer API there (right now I'm trying to solve a few different problems with that PR).",platinumazure,CONTRIBUTOR,2016-10-14T19:18:48Z,2017-03-11T05:48:03Z,True,5.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1062,catch TypeError in sync call,"I have tests in two files, one file
QUnit.test( ""Test 1"", function( assert ) {

    var obj = undefined;
    var doneFun = assert.async();
    setTimeout(function(){
        assert.equal('hell', obj.hell, 'Hello');
        doneFun();
    },100) });
and the other is
QUnit.test( ""Test 2"", function( assert ) {
    var doneFun = assert.async();
    setTimeout(function(){
        assert.equal('hell', 'hell','hello');
        doneFun();
    },500); });
when I run both together I got
        assert.equal('hell', obj.hell, 'Hello');
                                ^

TypeError: Cannot read property 'hell' of undefined
    at null._onTimeout (/home/foysal/workspace/qa/qa-test-framework/source/tests/mytest.js:12:30)
    at Timer.listOnTimeout (timers.js:92:15)

want to catch any TypeError in async test.
I am running in nodejs.
Help is very much appreciated",ffoysal,NONE,2016-10-17T20:54:13Z,2016-12-16T23:33:05Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False
1064,Reordering should not cause a module's tests to be split before/after other modules,"Please bear with me a moment for an explanation - there's a good chance you won't agree with me initially, and I have a sliding scale of thoughts on what could be done with my experience.
To start, as demonstration, suppose I have a suite that acts like the following:
var globalFlag = false;
QUnit.module('A: should never fail anything, but can cleanup global things', {
    after : function () {
        globalFlag = true;
    }
});
QUnit.test('always passes', function (assert) {
    assert.ok(true);
});

QUnit.module('B: should I have one fail, or two?');
QUnit.test('fail if globalFlag is true', function (assert) {
    assert.notOk(globalFlag);
});
QUnit.test('fail if globalFlag is true, or just because', function (assert) {
    assert.notOk(globalFlag);
    assert.ok(false);
});

After running the tests in my browser, and refreshing once or twice, I see the following pattern; on one refresh, 1 failure, on my next refresh, 2 failures:
""Module interrupted"" scenario - two failures
B's ""before""
*** B: should I have one fail, or two? *** Test : fail if globalFlag is true, or just because
*** A: should never fail anything, but can cleanup global things *** Test : always passes
*** B: should I have one fail, or two? *** Test : fail if globalFlag is true
B's ""after""

""Module uninterrupted"" scenario - one failure
B's ""before""
*** B: should I have one fail, or two? *** Test : fail if globalFlag is true
*** B: should I have one fail, or two? *** Test : fail if globalFlag is true, or just because
B's ""after""
*** A: should never fail anything, but can cleanup global things *** Test : always passes

So, why do I consider this an issue?
I accidentally got myself into a situation that acted like the above yesterday.  In practice, I was unit testing a jQuery widget, and giving the QUnit 2 - style API with before/after a try for the first time.  Historically, our tests using the jQ widget create a widget on #qunit-fixture in beforeEach, and tear it down in afterEach.
This is a little inefficient, taking some 20-50milliseconds, so I wanted to try out a new way.  I wanted to create the widget in before, reuse it for each test by performing much cheaper clearAll-type methods in afterEach, then finally tear it down in after.
I was successful in this, but then as I was putting together a new test, before the test was good, it failed all the time.  I was very confused when more than just this test failed, though.  It was because other modules were jutting in, trying to create a widget on #qunit-fixture, actually getting the existing instance from the before of my new module (since after hadn't run yet, since module B hadn't finished all its tests yet), and tearing down the grid that module B had created.  Since module B only created the widget in before, subsequent tests from module B always failed.
What do I propose?
My guiding instinct here is that before/after are not all that useful if there's no guarantee that a module will run all of its cases together; if they can get interrupted by unrelated tests, people can burn a few hours trying to figure out why.  In my case, this was a jQuery widget, but I could see similar circumstances for sinon spy/stub injection on prototypes, dependency injection swaps, etc.
So, I propose one of the following, in order of personal preference:

If QUnit.config.reorder is set to true, randomize the order that modules run in, and the order that tests run in within a module if desired, but do not reorder such that a module B's tests can have module A's tests run in between B's before and after hooks

Correct me if I'm wrong, but I feel this is what JUnit does for Java.  Perhaps I haven't looked carefully enough


If QUnit.config.reorder is set to true, ensure that any module that defines before/after hooks in some fashion cannot get interrupted by tests from another module (but leave legacy behavior intact for modules w/o before/after)
Add a new configuration option, defaulted to whatever, that if toggled on would enable one of the two above behaviors
Update the documentation to indicate that modules can be interrupted in this fashion, linking to that explanation from the docs for before, after, and QUnit.config.reorder

Overall
I do like QUnit, I just wonder if folks other than me might run into this same situation.  But anyway, thank you for reading this far!",wyantb,NONE,2016-10-30T01:21:32Z,,False,4.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1066,Remove JSHint/JSCS leftovers,"I've noticed the repo still has some JSHint/JSCS leftovers - config files, pragma comments etc. They should all be removed now that the repo has migrated to ESLint.",mgol,MEMBER,2016-11-02T15:32:43Z,2016-11-07T15:05:17Z,True,4.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1067,Run tests on Node 7 (& perhaps stop on 0.10?),"Node 7 is stable so QUnit should be tested on it. OTH, upstream support for Node 0.10 has just ended so it might be good to plan when to drop it.
jQuery Core has already stopped testing on Node 0.10 but we're in a different situation than QUnit.",mgol,MEMBER,2016-11-02T22:06:33Z,2016-11-15T02:09:20Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1071,dom inspector shows qunit-fixture not cleaned up,I am new to QUnit 2.0. While I was checking this example I realized that dom inspectors of firefox and chrome shows qunit-fixture not cleaned up. Is it a bug or am I missing something?,ozanh,NONE,2016-11-18T21:10:13Z,2016-11-20T20:08:48Z,True,6.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1073,Automate changelog/authors update,"The current jquery-release script already requires some hacking to make it work with QUnit.
It would be nice to have an own script to release QUnit. The only hard part is how to deal with the CDN.
cc @jzaefferer",leobalter,MEMBER,2016-12-06T04:48:15Z,,False,4.0,,4.0,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1074,remove messages for features removed on 2.0,,leobalter,MEMBER,2016-12-06T06:16:55Z,2016-12-15T14:21:31Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1075,step API,"@wycatz suggested this step API and I'm game for it.
It records steps inside a test. Given this example:
QUnit.test('references are granular', assert => {
  let { SubSub } = MakeSub();

  let obj = SubSub.create({ loud: true });
  let root = rootFor(obj);

  let state = new State(root);

  set(obj, 'name', 'Daniel');

  step('Update name');

  state.validateTags({ name: false });
  state.validateValues({ name: 'Daniel' });
  state.update();

  set(obj, 'loud', false);

  step('Update loud');

  state.validateTags({ loud: false });
  state.validateValues({ loud: false });
  state.update();
});
Each step can be recorded as a assert.ok(true), but printing the given description.
There's one con to consider for this API, which is the idea that assertions can be split in different tests specially inside nested modules.
Even though, it is an interesting approach to consider.",leobalter,MEMBER,2016-12-06T07:10:20Z,2017-01-24T14:34:22Z,True,7.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False
1077,CI breaking on Node 0.12,"Of course I broke everything again.
Travis CI is breaking on Node 0.12. This passed as a false positive from #1049.
ESLint is failing on Node 0.12...",leobalter,MEMBER,2016-12-06T08:39:02Z,2016-12-07T21:46:16Z,True,7.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,False
1081,Not 'loading' properly on Node,"We need to make this more friendly on Node.
@getify helped me finding this bug.
As you can see here, unless we call QUnit.load() before QUnit.start(), QUnit won't run properly in Node.
We need to make QUnit.start a self method to load and start QUnit without calling anything else. This is the expected behavior reading the api docs.
The good part is that we can remove any sights of 1.x warnings of QUnit.start along.

As I can't commit to any code today, I'm planning to fix this tomorrow - Dec 12 - in the evening (EST), high priority, unless someone wants to fix it before, please just add a comment here.",leobalter,MEMBER,2016-12-11T17:06:01Z,2016-12-14T03:29:49Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1082,Test runner UI checkbox settings not synced with query parameters,"When specifying values for the test runner's query params they aren't synced up to the checkboxes for the corresponding settings.  This affects the hidepassed query param more than the others, because the functionality is directly tied to the box being checked as opposed to the presence of the query param itself.
This problem can be replicated using the basic example and was happening in multiple browsers on multiple platforms. After creating the HTML file, open the file in a browser. When using version 2.0.1 of QUnit, the checkboxes are synced up correctly with the query parameters. When using version 2.1.0 of QUnit, the syncing doesn't work the same way. For example, when using 2.1.0, select the 'Hide Passed Tests' checkbox, then refresh the page. The checked value is lost. Selecting the 'No try-catch' will immediately refresh the page, and will drop the checked value of that checkbox as part of the refresh.",etseidler,NONE,2016-12-13T18:28:55Z,2016-12-14T21:33:43Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
1084,Deprecate QUnit.load,"This is not even documented, but it's used everywhere.
We need to make it an unnecessary call and then warn if it's called.",leobalter,MEMBER,2016-12-14T01:45:02Z,,False,6.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False
1090,QUnit 2.x cannot be run in a sandboxed iframe due to direct reference to window.sessionStorage,See ember-cli/ember-twiddle#516,Gaurav0,CONTRIBUTOR,2017-01-18T23:05:28Z,2017-01-20T17:54:51Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1092,"Error in IE: ""Unable to get value of the property 'warn': object is null or undefined""",There is no console object in IE (at least 8-9) if console is not enabled.,Invis1ble,CONTRIBUTOR,2017-01-19T23:25:08Z,2017-01-20T22:19:32Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1100,Augment QUnit Cookbook to show off Step API,"Per this comment, we should see if we can augment the QUnit Cookbook with a case study on the Step API (and how it can be useful for asynchronous and other complicated test cases).
This is not critical since we already have documentation in api.qunitjs.com for the feature-- just seems like a hugely worthwhile opportunity for a more narrative case study treatment of the feature.",platinumazure,CONTRIBUTOR,2017-01-25T17:14:40Z,2017-01-25T17:31:40Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1102,Is `done` callback supposed to be fired twice?,"...or am I doing something wrong? From searching and reading issue threads, it seems like this could either be a known bug, a regression, a new bug, or me making a mistake. Sorry my searching failed if this is a dupe.
I'm using v2.1.1. The done callback gets fired twice, at the very end, with exactly the same results.
This is how I register it:
QUnit.begin(begin);
QUnit.testDone(testDone);
QUnit.done(done);
begin(..) is only called once, testDone(..) is called once per test, and then done(..) is called twice.",getify,NONE,2017-02-19T19:49:39Z,2017-02-23T22:25:53Z,True,5.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1110,Git builds are out of date,"Both http://code.jquery.com/qunit/qunit-git.js and http://code.jquery.com/qunit/qunit-git.css haven't updated since October, despite numerous commits to master since then:
/*!
 * QUnit 2.0.2-pre
 * https://qunitjs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-10-31T19:06Z
 */
I don't know what uploads them, but it's clearly broken. And for completeness, git builds should also include the commit hash (either in the version like QUnit 2.0.2-pre+248911105b39d7c5ecb8a788a4942e1128802ff9, or on a separate line).",gibson042,MEMBER,2017-03-12T14:11:35Z,2017-03-13T14:34:22Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1114,deepEqual should compare typedArrays w/ Arrays.,"Tell us about your runtime:

QUnit version: current
What environment are you running QUnit in? (e.g., browser, Node): browser/any
How are you running QUnit? (e.g., script, testem, Grunt): QUnit


What are you trying to do?
I'm trying to use deepEqual to compare an array with a typedarray instance
Code that reproduces the problem:
var { test } = QUnit;

test('float64Array', t => {
  var sample = new Float64Array([1, 2, 3, 4, 5, 6, 7, 8])
  var src = new Float32Array(sample.buffer, 0, 2);

  src[0] = 42;

  sample.set(src, 1);

  t.deepEqual(sample, [1.0000002464512363, 42, 1.875, 4, 5, 6, 7, 8])
})

If you have any relevant configuration information, please include that here:
What did you expect to happen?
being able to compare values between instances
What actually happened?",leobalter,MEMBER,2017-03-13T21:40:23Z,,False,8.0,,3.0,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1117,i18n/l10n?,"(Ditching the issue template since this is more of a meta-issue.)
Is there any interest in internationalizing and possibly localizing QUnit for other locales?
I definitely don't think this should be higher priority than any current initiatives, but I just wanted to see if it might be something that could go on the project roadmap.
Possible steps for this:

Integrate Globalize.js or similar, ensuring it builds for HTML and Node runners
i18n for HTML runner, Node runner (done in incremental PRs)
Establish contribution and review process for l10n contributions for different languages",platinumazure,CONTRIBUTOR,2017-03-20T04:49:54Z,,False,3.0,,4.0,False,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False
1118,Separate HTML runner and HTML reporter?,"(Ditching the issue template since this is a meta-issue)
Now that we're working on a QUnit Node CLI and integrating with js-reporters, I think we need to see if we can refactor the HTML Reporter space to split that into HTML ""runner"" and HTML ""reporter"".
Conceptually, here is what I would like to see long-term:

HTML runner focuses on running QUnit in a browser, decoupling itself from reporting result. It takes on the outermost container of current HTML reporter but the internals should be black box. HTML runner also handles configuration (including url-based config) and test/module filtering.
HTML reporter simply outputs the inner divs it currently does for every test.
Create a new reporter which simply takes plaintext from another reporter and puts it in an HTML block. Voila, HTML runner now integrates with any plaintext reporter.
Create a strategy for allowing plaintext reporters to gain an HTML/""enhanced"" version for better integration? Not sure of the best way to handle that to be honest.",platinumazure,CONTRIBUTOR,2017-03-20T04:54:04Z,,False,2.0,,4.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
1119,Recursive error in Test#pushFailure and Assert#pushResult,"Tell us about your runtime:

QUnit version: 2.2.1
What environment are you running QUnit in? (e.g., browser, Node): Browser, Chrome 56
How are you running QUnit? (e.g., script, testem, Grunt): ember-cli, testem

What are you trying to do?
Code that reproduces the problem:
Calling this code during an async test after catching an exception.
QUnit.config.current.assert.ok(false);
If you have any relevant configuration information, please include that here:
What did you expect to happen?
The test to fail...
What actually happened?
Recursive error with call stack exceeded.
Test#pushFailure calls Assert#pushResult
https://github.com/qunitjs/qunit/blob/master/src/test.js#L388
Assert#pushResult calls Test#pushFailure
https://github.com/qunitjs/qunit/blob/master/src/assert.js#L107",ryanto,CONTRIBUTOR,2017-03-22T02:48:16Z,2017-03-29T14:43:43Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1125,"Pending QUnit.todo tests should be listed with ""hide passed"" checked.","I started experimenting with the new (to me at least) QUnit.todo feature that exists in qunitjs@2.2.1, and I really like it! Thank you all for working so hard to implement it.
I noticed a few things that stuck out to me while using todo's, and I would like to submit a PR to fix but would like guidance on the best approach before beginning.
In the default HTML reporter tests ran as QUnit.todo's get a visual indication to the left of the test, saying [todo]:

The mental model that I have when using QUnit.todo is that I am quickly putting down tests (often TDD where the test is written before the implementation even exists), and then once I have the tests written I am focusing on making them pass.  In a large test suite, these [todo] entries are difficult to find when skimming the list. Unlike skipped tests (which are also technically not failures) which are still displayed when ""Hide Passed"" is checked, these todo tests do not show up when the ""Hide Passed"" checkbox is checked.
tldr; I would like to have QUnit.todo tests not be hidden by ""Hide Passed"", and instead display them (similar to skipped tests) with an alternate color or other visual treatment in the test list.",rwjblue,CONTRIBUTOR,2017-03-24T19:47:13Z,2017-03-29T01:32:56Z,True,4.0,,5.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
1129,assert.async breaks tests in node,"@leobalter
I'm using QUnit 2.1.1.
My minimal test case:
// tmp.js
var QUnit = require( ""qunitjs"" );

QUnit.done( function done(results){
	console.log( results );
} );

QUnit.test( ""temp"", function test(assert){
	var done = assert.async();
	setTimeout( done, 500 );
} );

QUnit.start();
$] node --version
v7.7.1
$] node tmp.js
{ failed: 1, passed: 0, total: 1, runtime: 5 }
{ failed: 1, passed: 0, total: 1, runtime: 523 }

As you can see, the Qunit.done(..) callback is called twice, once right away, and once 500 ms later. :(",getify,NONE,2017-03-28T01:47:52Z,2017-03-28T21:42:54Z,True,8.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1131,Add integrated code coverage support to CLI,"Having an easy-to-use solution for code coverage, integrated directly with the tool, is something we should explore. Istanbul is the de-facto standard for code coverage and so we should likely begin there.
I'll flesh this out with more details later, but wanted to put it on our roadmap.",trentmwillis,MEMBER,2017-03-30T15:17:49Z,,False,4.0,,4.0,False,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False
1132,async causes tests to abruptly stop,"I'm not sure if this behavior is by-design, or if there's just no way for QUnit to fix it, but this situation just bit me and it was very confusing.
Here's my minimal test case:
""use strict"";

var QUnit = require(""qunitjs"");

QUnit.done(function done(results) {
	console.log(""done:"",results);
});

QUnit.test(""temp"",function(assert){
	var done = assert.async();
	assert.expect(1);

	setTimeout(function(){
		console.log(""timer!"");
	},1000);
});

QUnit.test( ""temp2"", function(assert){
	assert.expect(1);
	assert.ok(true,""temp2"");
});

QUnit.start();
And when I run this:
$] node tmp.js
timer!
$]

In other words, the first test case fires the timer, but since it never runs the done(), it just silently dies. Since node doesn't have any other waiting event handlers, node just exits. The test suite doesn't fire my completion handler to notify me that a test failed to meet its assertion, and it doesn't try to run the second test at all. It just stops.
And even worse, the test suite exits with a zero exit code, meaning my other CLI tools consider this a passing test suite run. :(
This seems like broken behavior to me. Shouldn't there be some sort of timeout in the background for async tests, or something like that?
Or maybe qunit could register a process.on(""exit"", ..) handler, that if the test suite hasn't completed by the time the process tries to finish, the handler forces a non-zero exit code to signal failure to the CLI, and emits some error about an abnormally terminated test suite?",getify,NONE,2017-03-30T20:29:14Z,,False,15.0,,7.0,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1133,Why dist/ and qunit/ folders?,"I'm a bit confused about why we maintain both a dist/ folder (for web use and development) but also create a qunit/ folder when releasing and/or for Node. Can we simplify this process?
Long-term, my preference would be to just export a canonical ""core QUnit"" file and also have wrappers for executing QUnit in different contexts. (In a different issue, I might have referred to those wrappers as ""runners"", to contract with ""reporters"".) But on top of that, it would be nice if we could keep the folder structure consistent if at all possible.",platinumazure,CONTRIBUTOR,2017-03-30T21:42:14Z,,False,5.0,,4.0,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1137,Memory leak caused by retaining test instances,"Tell us about your runtime:

QUnit version: 2.3.0
What environment are you running QUnit in? (e.g., browser, Node): Browser
How are you running QUnit? (e.g., script, testem, Grunt): Ember-CLI

What did you expect to happen?
The testEnvironment should not be retained after a test run completes. If consumers set properties on the testEnvironment and it is retained, then the test suite will have memory leaks.
What actually happened?
The testEnvironment is getting retained due to a reference from the new js-reporters implementation. Specifically, this line is problematic.",trentmwillis,MEMBER,2017-03-31T20:33:59Z,2017-03-31T21:15:39Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1139,logs tests failing on Travis CI + Browserstack,"There are some browserstack tests failing on Travis CI.
We need to investigate.",leobalter,MEMBER,2017-03-31T21:16:45Z,,False,1.0,,3.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1140,Markdown not rendered inside <p>,"https://api.qunitjs.com/QUnit/start



Originally reported at qunitjs/api#154",Krinkle,MEMBER,2017-04-03T20:45:20Z,2017-04-09T13:05:35Z,True,0.0,,2.0,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False
1144,Cannot set property 'usedAsync' of undefined with async(),"QUnit version: 2.3.0
What environment are you running QUnit in? (e.g., browser, Node):browser
How are you running QUnit? (e.g., script, testem, Grunt):script,chrome 57.0.2987.133 (64-bit)

What are you trying to do?
Code that reproduces the problem:
I try to test async function, in minor version all is ok, but i update the version of qunit and now i have an error.
QUnit.module( ""Draft"" );

QUnit.test( ""$.Oda.Test"", function() {
    var done = QUnit.assert.async();
    setTimeout(function() {
        QUnit.assert.ok( 1 < 2, ""Test"" );
        done();
    }, 1500 );
});
If you have any relevant configuration information, please include that here:
What did you expect to happen?
I hope  a pass test :)
What actually happened?
TypeError: Cannot set property 'usedAsync' of undefined
I put my test file in attachement.
Thx for your support
test.zip",Happykiller,NONE,2017-04-05T08:15:43Z,2017-04-06T07:45:21Z,True,2.0,,3.0,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True
1145,Add option to allow assertions after using assert.async,"Currently, if you use assert.async() and then have another assertion after calling the returned done() function, you get an error like so:
Assertion after the final `assert.async` was resolved

This is fine for most use cases, but within the Ember community we have some helpers which currently use assert.async() within some test helpers that execute asynchronously so that they can prevent tests from completing prematurely. However, this also means that assertions are likely to happen after done() is called.
So, I'd like to propose adding an option to assert.async() that enables you to have assertions after done() is called:
// assert.async( acceptCallCount, allowAssertionsAfter );
var done = assert.async( 1, true );
done();
assert.ok( true ); // no error!
Thoughts?",trentmwillis,MEMBER,2017-04-06T19:10:57Z,2017-04-09T13:41:38Z,True,7.0,,4.0,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1149,"Rejected promise not throwing an uncaught exception with ""no try-catch""","Tell us about your runtime:

QUnit version: QUnit 2.0.0; Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36
What environment are you running QUnit in? (e.g., browser, Node): Chrome 57.0.2987
How are you running QUnit? (e.g., script, testem, Grunt): HTML test runner

I have a test which returns a promise which fails. I generally have no try-catch on so that I can debug errors in my IDE, but this doesn't seem to work in conjunction with promises. Is this by design or a bug?
QUnit.test('promise fail', function (assert) {
    return new Promise((resolve, reject) => {
        resolve()
    }).then(() => {
        throw new Error(""hurk"")
    })
})

HTML Reporter shows:
Promise rejected during promise fail: hurk@ 1 ms
Source:
Error: hurk
at Promise.then (http://localhost:63342/cs/out/test/PICurve.qunit.js:18:15)",NaridaL,CONTRIBUTOR,2017-04-09T03:14:41Z,2017-12-20T00:07:02Z,True,5.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1152,`moduleDone/suiteEnd` not fired for parent module if its tests are already executed,"Tell us about your runtime:

QUnit version: 2.3.0
What environment are you running QUnit in? (e.g., browser, Node): Node 6.10.0
How are you running QUnit? (e.g., script, testem, Grunt): Grunt using grunt-contrib-qunit

What are you trying to do?
I want to track the end of every module/test. Basically, I have tests like the following:
QUnit.module('A', function() {
  QUnit.test('a', function(assert) {
    assert.expect(1);
    assert.ok(true);
  });

  QUnit.module('B', function() {
    QUnit.test('b', function(assert) {
      assert.expect(1);
      assert.ok(true);
    });

    QUnit.module('C', function() {
      QUnit.test('c', function(assert) {
        assert.expect(1);
        assert.ok(true);
      });
    });
  });
});
And I log them as follow:
grunt.event.on(""qunit.moduleStart"", function(name) {
  console.log(""moduleStart:"", name);
});

grunt.event.on(""qunit.testStart"", function(name) {
  console.log(""testStart:"", name);
});

grunt.event.on(""qunit.testDone"", function(name) {
  console.log(""testDone:"", name);
});

grunt.event.on(""qunit.moduleDone"", function(name) {
  console.log(""moduleDone:"", name);
});
What did you expect to happen?
I expected to get the following output:
moduleStart: A
testStart: a
testDone: a
moduleStart: A > B
testStart: b
testDone: b
moduleStart: A > B > C
testStart: c
testDone: c
moduleDone: A > B > C
moduleDone: A > B
moduleDone: A

What actually happened?
But instead I got:
moduleStart: A
testStart: a
testDone: a
moduleStart: A > B
testStart: b
testDone: b
moduleStart: A > B > C
testStart: c
testDone: c
moduleDone: A > B > C

I tracked the issue down to these lines src/test.js#L282-L292:
if ( module.testsRun === numberOfTests( module ) ) {
	emit( ""suiteEnd"", module.suiteReport.end( true ) );
	runLoggingCallbacks( ""moduleDone"", {
		name: module.name,
		tests: module.tests,
		failed: module.stats.bad,
		passed: module.stats.all - module.stats.bad,
		total: module.stats.all,
		runtime: now() - module.stats.started
	} );
}
The above code should also check parent modules, otherwise moduleDone and suiteEnd will be triggered only for the module C.
I can provide a PR in case this is not the intended behaviour.
Thanks!",Arkni,CONTRIBUTOR,2017-04-09T17:58:47Z,2017-04-09T22:43:41Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1157,"API Docs page title has stray pipe ""|""","https://api.qunitjs.com has a stray pipe (""|"") in its document title. This is probably meant as a suffix for other pages but the home page should have it without separator.",Krinkle,MEMBER,2017-04-13T03:54:36Z,2017-04-14T03:23:09Z,True,0.0,,1.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1158,CLI should use local version of qunitjs if possible,"When injecting the QUnit global, the CLI should require qunitjs relative to the cwd. Code needs to be changed here: 
  
    
      qunit/bin/run.js
    
    
        Lines 18 to 29
      in
      2171bcf
    
    
    
    

        
          
           QUnit = ( function requireQUnit() { 
        

        
          
           	try { 
        

        
          
           		delete require.cache[ require.resolve( ""../qunit/qunit"" ) ]; 
        

        
          
           		return require( ""../qunit/qunit"" ); 
        

        
          
           	} catch ( e ) { 
        

        
          
           		if ( e.code === ""MODULE_NOT_FOUND"" ) { 
        

        
          
           			delete require.cache[ require.resolve( ""../dist/qunit"" ) ]; 
        

        
          
           			return require( ""../dist/qunit"" ); 
        

        
          
           		} 
        

        
          
           		throw e; 
        

        
          
           	} 
        

        
          
           }() );",trentmwillis,MEMBER,2017-04-13T15:48:53Z,2017-04-22T16:05:20Z,True,0.0,,1.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False
1162,Merge modules with same name,"Currently, if you create more than one module with the same name, then we will represent these modules with different data structures.
QUnit.module( ""a"" ); // creates a module
QUnit.module( ""a"" ); // creates a different module
This is odd because the moduleId is generated based on the name of the module. Thus, two different modules can wind up with the same moduleId which seems incorrect. So, I'd like to propose allowing subsequent declarations of modules with the same name, to be merged into the first module of that name.
I do not believe this would break any existing test setup, but it would enable better reporting for a certain set of use cases. In particular, it enables you to write abstractions that group tests by test type rather than module type, but still report based on module.
In other words, it enables this:
testAllTypes( ""Feature A"", function someTest() {} );
testAllTypes( ""Feature B"", function someTest() {} );

// Generates...

QUnit.module( ""Type A"", function() {
  QUnit.test( ""Feature A"" );
} );
QUnit.module( ""Type B"", function() {
  QUnit.test( ""Feature A"" );
} );

QUnit.module( ""Type A"", function() {
  QUnit.test( ""Feature B"" );
} );
QUnit.module( ""Type B"", function() {
  QUnit.test( ""Feature B"" );
} );",trentmwillis,MEMBER,2017-04-14T23:35:16Z,,False,7.0,,7.0,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False
1163,Add support for only/skip to modules,"These features are similar to the already implemented ones of tests. Usually, when I'm debugging a large codebase, I often only want to run a subset of tests (in my case it's a module). The same goes when I want to skip a chunk of tests.
About the syntax, we can either use:
const { module, test } = QUnit;

// Normal
module(""Module A"", () => {
  test(""test A"", assert => {
    assert.expect(1);
    assert.ok( true );
  });
});

// Only
module.only(""Module B"", () => {
  test(""test B"", assert => {
    assert.expect(1);
    assert.ok(true);
  });
});

// Skip
module.skip(""Module C"", () => {
  test(""test C"", assert => {
    assert.expect( 1 );
    assert.ok( true );
  });
});
Or, we can use the second parameter of QUnit.module() to define whether a module should be the only one to run or the one that should be skipped:
module(""Module A"", { only: true }, () => {
  // ...
});

module(""Module B"", { skip: true }, () => {
  // ...
});
The second approach may change the semantic of the second parameter as it's used to define hooks.
I might be able to implement something for the next weekend in case these features benefit someone.",Arkni,CONTRIBUTOR,2017-04-16T11:26:23Z,2017-06-23T15:50:38Z,True,8.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1166,Internal calls to pushFailure (e.g. timeout) result in noisy expected/actual diff reports,"my runtime:

QUnit version: 2.3.0 ... 2.3.2
What environment are you running QUnit in?: Browsers (Chrome, FF, IE, Edge, phantomjs,...)
How are you running QUnit?: HTML page (either manually or via Selenium or other runners...)

What are you trying to do?
Run a test that might time out.
QUnit.test(""any test"", function(assert) {
    assert.async(); // don't call the async done handler -> timeout
    assert.ok(true, ""should..."");
});
What did you expect to happen?
QUnit HTML reporter just reports ""Test timed out""
What actually happened?
QUnit HTML reporter additionally reports  ""expected"", ""source"" and a message that the diff was suppressed (as null is not different from null).

This is quite noisy for a reader and might break tools that evaluate the report (as in our case) or that register for QUnit.log.
Most likely, the issue was introduced with 829c41f which contradicts the logic in the HTML reporter at html.js, lines 764-767. The comment for the condition at that location states that pushFailurewouldn't provide an expectedproperty. This is no longer true due to the mentioned change.
I would suggest to remove the property expected again (best compatibility with existing QUnit.log listeners, but I didn't check whether this still would allow the reuse of pushResult) or give it a special, documented value (would also allow for an expected value of null).",codeworrior,CONTRIBUTOR,2017-04-20T09:49:45Z,2017-10-21T23:20:48Z,True,3.0,,4.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
1172,Investigate alternative to PhantomJS for QUnit's test suite,"PhantomJS is no longer being maintained, so it would be good to investigate alternatives so that we can test things such as WebWorkers (as mentioned in #1171).
A few things to consider though:

I don't think we can drop Phantom from our test suite altogether, as many folks will likely continue using it for a while, so I think we should continue supporting it until QUnit 3.x.
We should consider adding a headless Chrome test suite. I think we should run all the test we currently have in Phantom in headless Chrome.
We should fix and continue to use BrowserStack for cross-browser compatibility.",trentmwillis,MEMBER,2017-04-26T16:48:10Z,2018-08-20T06:15:47Z,True,1.0,,2.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1173,`QUnit.jsDump` was said to be removed in `2.x` but the api docs says otherwise,"Although the 2.x migration guide says that QUnit.jsDump should be replaced with QUnit.dump which suggests that the object was removed in 2.x (which is the case), the QUnit.dump.parse docs still suggest that it will be removed in 3.0:
NOTE: This method used to be in QUnit.jsDump, which was changed to QUnit.dump.
The old property will be removed in QUnit 3.0.

I know that QUnit.jsDump was removed in 2.1.1. It all started by throwing an error in f7da009 and then removing it completely in bdd634d.
I'm just wondering if the removal was on purpose or accidentally. In case of the former, I suggest to omit that notice from api docs. Otherwise, reintroduce it as a bug fix.
By the way, the notice used to say QUnit 2.0, and updated to 3.0 in this commit qunitjs/api@5fa1a05
Thanks!",Arkni,CONTRIBUTOR,2017-04-26T20:37:02Z,2017-04-27T15:19:02Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1176,Restart all test without reload page,"What are you trying to do?
It would be interesting to be able to restart the tests without reload. To use tests to find on memory leak, or that applications are idempotent, running twice would be useful.
If we try to call start() when all tests are finished we receive an error: ""Called start() while test already started running""",Gorash,NONE,2017-05-08T11:38:20Z,,False,2.0,,3.0,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
1177,"""actual"" value is not printed if actual happened to be ""undefined""","Using qunitjs 2.3.2, the test below fails to print the ""actual"" value, just because sum() happened to return undefined as the incorrect/buggy value. If it returned ""wrong"" instead, the ""actual"" is printed next to the ""expected"" so it's easier to see what went wrong. If a string value was expected and undefined was returned instead, then it would be nicer if qunit printed ""actual: undefined"" to make that clear.
var isCurrentlyBuggy = true;

function sum(a, b) {
  if (isCurrentlyBuggy) {
    return undefined;
  }
  return a + b;
}

QUnit.only('my test', assert => {
  assert.equal(sum(1, 1), 2);
});",mo,NONE,2017-05-14T17:04:17Z,2017-07-04T19:11:47Z,True,5.0,,2.0,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,True,False,False
1180,Add a CONTRIBUTING.md,"We should add a CONTRIBUTING.md file to make it easier for new contributors to understand how best to develop and open PRs. With recent changes to the grunt scripts and documentation workflows, now seems a good time to add such a document.",trentmwillis,MEMBER,2017-05-28T04:20:43Z,2017-05-29T16:57:59Z,True,0.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1182,Clear require cache on test re-runs,"When re-running the test suite using qunit --watch, the require.cache is not cleared. Thus, if any files changed that are required, then those changes won't properly be reflected in the test suite.",trentmwillis,MEMBER,2017-05-31T19:43:06Z,2017-09-25T20:19:32Z,True,2.0,,2.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False
1183,Dynamically filter tests to run,"Is there a way to dynamically filter tests to run based on index / test name? I know you can already skip a test, but i'm looking for a way to dynamically decide which tests to skip, like this jasmine function: jasmineEnv.specFilter
If it is not available, would you be open to PR's? Possible this could be available to the testStart callback? For example: return 'skip' if the test needs to be skipped?
Background:
We're thinking of adding support for qunit to the stryker mutation testing framework. Having this feature will improve the performance of mutation testing with qunit test suites.",nicojs,NONE,2017-06-01T07:59:56Z,,False,11.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
1185,Release documentation updates,"While performing the 2.3.3 release, I noticed a few things that should be documented/updated in the RELEASE.md:

 Note reenabling repo protection
 Use npm install in jquery-release
 Update API docs instructions
 Verify git build updated",trentmwillis,MEMBER,2017-06-02T14:31:00Z,2017-07-11T04:04:45Z,True,0.0,,1.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1189,Reduce number of tokens needed per test,"Tell us about your runtime:

QUnit version: 2.3.2
What environment are you running QUnit in? (e.g., browser, Node): Browser
How are you running QUnit? (e.g., script, testem, Grunt): Script


What are you trying to do?
I find it code smell that you need to do assert.ok/assert.equal everywhere.
I'd like to shorten that so that each test takes only 1 token, not 3 (in other words, shorten the assert.)
I did the below in my test suite and it works fine using Tap on Node.js, but breaks with qunit because const seems to change this to the block scope. Would be nice if qunit allowed this.
It definitely seems to me that it should not be necessary to have those 2 extra tokens for every test.
Code that reproduces the problem:

const someTest = assert => {
  const ok = assert.ok
  ok(true)
}

If you have any relevant configuration information, please include that here:
What did you expect to happen?
Test should pass.
What actually happened?
Uncaught error.
Source:
TypeError: Cannot read property 'pushResult' of undefined",breck7,NONE,2017-06-05T16:20:36Z,2017-06-05T18:09:09Z,True,4.0,,3.0,True,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False
1192,Memory Leak In QUnit.equiv,"Tell us about your runtime:

QUnit version: 2.3.2
What environment are you running QUnit in? (e.g., browser, Node): browser, Chrome Canary
How are you running QUnit? (e.g., script, testem, Grunt): Grunt. Node.js is on version v5.12.0. We use grunt to launch the test into browser.


What are you trying to do?
Code that reproduces the problem:
We use QUnit.equiv() to compare objects in our test. The objects can be huge.


If you have any relevant configuration information, please include that here:
What did you expect to happen?
We expect that after QUnit.equiv(a, b) returns, QUnit does not hold reference to a and b, thus allow them to be garbage collected.

What actually happened?
We use Chrome dev tool memory tab to take snapshot of the memory, and we found that the global queue ""pairs"" still holds references to the objects (and their sub-objects) we passed into QUnit.equiv(). When the objects to be compared are big, the leak is big as well. We currently workaround this issue by invoking QUnit.equiv() again with two empty strings, that will replace the global queue with the two empty string, thus free the two big objects.",jingxwu,NONE,2017-06-07T18:16:14Z,2017-07-06T02:12:06Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1196,Latest version of Qunit and latest version of sinon do not mix,It seems they do not mix well because the documentation for Qunit with sinon does not even exist anymore,dtracers,NONE,2017-06-11T19:36:57Z,2017-07-06T03:20:42Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
1197,Using native async function as hooks does not work,"Hi, Im using Qunit 2.3.3 and try to use native async/await syntax in modern browsers such as Chrome 59 or Firefox 55 to perform some asynchronous work in a beforeEach hook. However once I declare the beforeEach hook to be an async function it simply is not invoked anymore, at least not before any of the tests is. Here is a simple example that illustrates this:
let testValue;
QUnit.module('async test module', {
  before: async () => {
    testValue = 42
  }
})
QUnit.test( ""check value"", function( assert ) {
  assert.ok( testValue == 42, ""testValue = "" + testValue);
});
See this Fiddle.
If you replace this by the Promise returning variant as suggested by the documentation all works well:
let testValue;
QUnit.module('async test module', {
  before: () => {
     return new Promise((resolve, reject) => {
      testValue = 42;
      resolve();
    });
  }
});
QUnit.test( ""check value"", function( assert ) {
  assert.ok( testValue == 42, ""testValue = "" + testValue);
});
I wonder what the difference between both examples is from the perspective of the caller? Is there some qualitative difference between an async function that ultimately returns a Promise and a function that directly returns a Promise without being async itself?
Thanks for sharing insights.",sechel,NONE,2017-06-14T11:51:59Z,2017-06-16T23:07:30Z,True,5.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1201,Parsing errors during `qunit --watch`  crash the watcher.,"When running qunit --watch some-glob/*.js any errors that occur when the test file is required will crash the watcher process (which must then be restarted manually).
To resolve, this line would need to be wrapped in a try/catch block when running with --watch (or always?).",rwjblue,CONTRIBUTOR,2017-06-19T15:48:38Z,2017-08-07T22:18:22Z,True,1.0,,2.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False
1202,assert.push deprecation links to broken pushResult page,"This broke when we did the docs migration. The assert.push deprecation directs users to http://api.qunitjs.com/pushResult/, should be http://api.qunitjs.com/assert/pushResult instead.",trentmwillis,MEMBER,2017-06-21T22:17:50Z,2017-07-04T05:10:50Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False
1203,No try/catch should be respected for returned promises.,"Given:
QUnit.test('does stuff', function(assert) {
  return new Promise((resolve, reject) => {
    setTimeout(reject, 10, new Error('NOOOOOOOO!!!!!');
  });
});
When the ""no try/catch"" option is enabled, we should not install a reject handler on the returned promise (which means the rejection would bubble up naturally).
I propose that we make Test.prototype.resolvePromise aware of config.notrycatch and avoid adding the reject handler here.",rwjblue,CONTRIBUTOR,2017-06-27T16:03:17Z,2017-06-27T18:09:55Z,True,3.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1204,Add assert method for rejection of promises,"This would support the following:
QUnit.test('does stuff', function(assert) {
  assert.throws(() => {
    return new Promise((resolve, reject) => {
      setTimeout(reject, 10, new Error('NOOOOOOOO!!!!!');
    });
  }, /NOOOOOO/);
});

An alternative would be to add a assert.rejects, but I feel like transparently supporting this case in assert.throws is more aligned with how we handle things in other areas.",rwjblue,CONTRIBUTOR,2017-06-27T16:22:40Z,2018-01-07T23:12:27Z,True,17.0,,4.0,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1208,Hide skipped tests,"I'd like to propose a hideskipped tests url parameter that QUnit understands.  We run our tests with saucelabs which has videos of the tests running.  Without being able to hide skipped tests, we are unable to see which test failed.

This would work just like hidepassed.  Both should be able to be active at the same time.
Let me know if this sounds reasonable and I can probably submit a pull request.  Thanks!",justinbmeyer,NONE,2017-07-05T00:04:40Z,,False,3.0,,3.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
1209,Don't follow prototype chain?,"Hi
When a test case fails, the 'actual' and 'expected' values gets logged to screen. When these values are objects with many properties/functions on their prototype chains, the logged text gets huge and (always?) pretty irrelevant.
Is there a way to tell QUnit not to follow prototype chains?
Here's an example of a way too big logging:
""Expected:
{
  ""add"": function add( a, b ){
    [code]
  },
  ""addScalar"": function addScalar( a ){
    [code]
  },
  ""addScaledVector"": function addScaledVector( a, b ){
    [code]
  },
  ""addVectors"": function addVectors( a, b ){
    [code]
  },
  ""angleTo"": function angleTo( a ){
    [code]
  },
  ""applyAxisAngle"": function applyAxisAngle( a, b ){
    [code]
  },
  ""applyEuler"": function applyEuler( a ){
    [code]
  },
  ""applyMatrix3"": function applyMatrix3( a ){
    [code]
  },
  ""applyMatrix4"": function applyMatrix4( a ){
    [code]
  },
  ""applyProjection"": function applyProjection( a ){
    [code]
  },
  ""applyQuaternion"": function applyQuaternion( a ){
    [code]
  },
  ""ceil"": function ceil(){
    [code]
  },
  ""changeBasis"": function changeBasis( a, b, c, d ){
    [code]
  },
  ""clamp"": function clamp( a, b ){
    [code]
  },
  ""clampLength"": function clampLength( a, b ){
    [code]
  },
  ""clampScalar"": function clampScalar( a, b ){
    [code]
  },
  ""clone"": function clone(){
    [code]
  },
  ""constructor"": function Vector3( a, b, c ){
    [code]
  },
  ""copy"": function copy( a ){
    [code]
  },
  ""cross"": function cross( a, b ){
    [code]
  },
  ""crossVectors"": function crossVectors( a, b ){
    [code]
  },
  ""distanceTo"": function distanceTo( a ){
    [code]
  },
  ""distanceToManhattan"": function distanceToManhattan( a ){
    [code]
  },
  ""distanceToSquared"": function distanceToSquared( a ){
    [code]
  },
  ""divide"": function divide( a ){
    [code]
  },
  ""divideScalar"": function divideScalar( a ){
    [code]
  },
  ""dot"": function dot( a ){
    [code]
  },
  ""equals"": function equals( a ){
    [code]
  },
  ""floor"": function floor(){
    [code]
  },
  ""fromArray"": function fromArray( a, b ){
    [code]
  },
  ""fromAttribute"": function fromAttribute( a, b, c ){
    [code]
  },
  ""fromBufferAttribute"": function fromBufferAttribute( a, b, c ){
    [code]
  },
  ""getColumnFromMatrix"": function getColumnFromMatrix( a, b ){
    [code]
  },
  ""getComponent"": function getComponent( a ){
    [code]
  },
  ""getPositionFromMatrix"": function getPositionFromMatrix( a ){
    [code]
  },
  ""getScaleFromMatrix"": function getScaleFromMatrix( a ){
    [code]
  },
  ""isVector3"": true,
  ""length"": function length(){
    [code]
  },
  ""lengthManhattan"": function lengthManhattan(){
    [code]
  },
  ""lengthSq"": function lengthSq(){
    [code]
  },
  ""lerp"": function lerp( a, b ){
    [code]
  },
  ""lerpVectors"": function lerpVectors( a, b, c ){
    [code]
  },
  ""max"": function max( a ){
    [code]
  },
  ""min"": function min( a ){
    [code]
  },
  ""multiply"": function multiply( a, b ){
    [code]
  },
  ""multiplyScalar"": function multiplyScalar( a ){
    [code]
  },
  ""multiplyVectors"": function multiplyVectors( a, b ){
    [code]
  },
  ""negate"": function negate(){
    [code]
  },
  ""normalize"": function normalize(){
    [code]
  },
  ""project"": function project( a ){
    [code]
  },
  ""projectOnPlane"": function projectOnPlane( a ){
    [code]
  },
  ""projectOnVector"": function projectOnVector( a ){
    [code]
  },
  ""reflect"": function reflect( a ){
    [code]
  },
  ""rejectOnVector"": function rejectOnVector( a ){
    [code]
  },
  ""round"": function round(){
    [code]
  },
  ""roundToZero"": function roundToZero(){
    [code]
  },
  ""set"": function set( a, b, c ){
    [code]
  },
  ""setComponent"": function setComponent( a, b ){
    [code]
  },
  ""setEulerFromQuaternion"": function setEulerFromQuaternion(){
    [code]
  },
  ""setEulerFromRotationMatrix"": function setEulerFromRotationMatrix(){
    [code]
  },
  ""setFromCylindrical"": function setFromCylindrical( a ){
    [code]
  },
  ""setFromMatrixColumn"": function setFromMatrixColumn( a, b ){
    [code]
  },
  ""setFromMatrixPosition"": function setFromMatrixPosition( a ){
    [code]
  },
  ""setFromMatrixScale"": function setFromMatrixScale( a ){
    [code]
  },
  ""setFromSpherical"": function setFromSpherical( a ){
    [code]
  },
  ""setLength"": function setLength( a ){
    [code]
  },
  ""setScalar"": function setScalar( a ){
    [code]
  },
  ""setX"": function setX( a ){
    [code]
  },
  ""setY"": function setY( a ){
    [code]
  },
  ""setZ"": function setZ( a ){
    [code]
  },
  ""sub"": function sub( a, b ){
    [code]
  },
  ""subScalar"": function subScalar( a ){
    [code]
  },
  ""subVectors"": function subVectors( a, b ){
    [code]
  },
  ""toArray"": function toArray( a, b ){
    [code]
  },
  ""transformDirection"": function transformDirection( a ){
    [code]
  },
  ""unproject"": function unproject( a ){
    [code]
  },
  ""x"": 0,
  ""y"": 0,
  ""z"": 0
}""",loldrup,NONE,2017-07-05T21:53:52Z,,False,8.0,,4.0,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,True,False,False
1211,Better navigation with arrow keys,"I use QUnit for testing on a specific device (based on Webkit) without keyboard and mouse (using remote control unit).
Remote control can emulate arrow keys and Enter key presses.
Please consider to improve navigation on HTML report with arrow keys.
Currently it's not possible to operate in input field, drop-down list, collapse tests and so on.",zoulja,NONE,2017-07-13T17:49:09Z,,False,1.0,,2.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
1213,Provide more descriptive feedback when not passing callback to test of todo,"Currently if you don't pass a callback to either todo or test, you get an unclear error message that essentially means you didn't pass a callback function. We should provide more explicit feedback to useres.

(Note: I imagine this doesn't happen often with test, but with todo I can see it happening fairly regularly.)",trentmwillis,MEMBER,2017-07-17T17:23:46Z,2017-07-25T20:45:15Z,True,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1216,`qunit --reporter` to list available reporters,"After running qunit --help I see the following description for the --reporter option:
    -r, --reporter <name>  specify the reporter to use; if no match is found a list of available reporters will be displayed

This leads me to believe that I can run qunit --reporter and receive a list of known reporters (I was unsure which were supported with a default installation). However, the actually output is:
  error: option `-r, --reporter <name>' argument missing


To work around this, we have to specify a known bogus option to get the list of available reporters:
% qunit --reporter ""asdf""                                                                                                                                                                                                                             

No reporter found matching ""asdf"".
Available reporters from JS Reporters are: console, tap",rwjblue,CONTRIBUTOR,2017-07-31T20:06:05Z,2017-08-04T15:53:07Z,True,2.0,,3.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False
1219,Regression: Error results shouldn't contain actual/expected,"QUnit version: 2.4.0

I believe since QUnit 2.x, there has been a minor change in the shape of the resultInfo object passed to QUnit.log handlers. Previously, the expected property would not exist if the log entry was the result of catching an exception or some other violation that is not the result if an explicit Assert method call. Typically through pushFailure.
However, this has since been normalised, and the object now always gets a default null actual/expected.
This is causing odd outputs like the following, which very confusingly claim there was a (seemingly s) assertion where an actual value null matched the expected value null, despite there having been no such assertion.
Minimal test case:
QUnit.test('example', function (assert) {
  assert.ok(true);
  assert.ok(false);
  throw new Error('Rebase');
});

HTML reporter (built-in):

Command-line output using Karma and karma-qunit:

I thought at first that maybe the info.result property being false is indicative of a general failure, but that's not the case given it is also false for a regular assertion failure.
Looking more closely at the actual code, I see that both our HTML reporter, as well as the karma-qunit formatter, make the same (now incorrect) assumption that the expected properly may not exist.
https://github.com/qunitjs/qunit/blob/2.4.0/reporter/html.js#L764-L775
https://github.com/karma-runner/karma-qunit/blob/52eec0e8bc6d4f854de9cae2ff2213e2261e1a5b/src/adapter.js#L83
/cc @jdforrester",Krinkle,MEMBER,2017-08-12T16:43:36Z,2017-08-16T05:56:24Z,True,1.0,,2.0,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,False
1221,"QUnit Plugins (or ""Setup Step"") in CLI","On the QUnit website we have a list of plugins that are easy to use in the browser; you simply load an additional asset which then configures QUnit. Now that we have a CLI, we should have a prescribed approach for enabling plugins/API extensions in Node.
I have some ideas on how to approach this and will come back to document them later, but I wanted to open this issue now as a reminder and in case anyone else has thoughts/ideas on how to approach this.",trentmwillis,MEMBER,2017-08-24T16:52:15Z,,False,3.0,,3.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False
1222,Support CLI --require flag,"This is a feature request for the QUnit CLI to support a --require flag, similar to mocha's CLI and the node binary itself.
The flag itself is pretty simple. It just require()s the passed package name before running tests. The flag can be provided multiple times and each package is required in order.
My motivating use case for this is being able to run tests against my code without having to orchestrate a build pipeline.
For example, to use QUnit to test my TypeScript projects, I have to make sure I always transpile both source and tests to JavaScript first before running the CLI. It's easy to forget and end up testing stale code, which can be frustrating. Alternatively I can set up something like testem or Broccoli to orchestrate this for me, but that's a fair bit of complexity when starting a new project and is another tool contributors need to learn in addition to QUnit.
In comparison, with Mocha I can include the --require ts-node/register flag and all of my tests and source code get transpiled on demand via a require hook, which is both simple to set up and avoids the problem of testing stale code.",tomdale,NONE,2017-09-07T12:12:02Z,2018-03-06T18:30:49Z,True,2.0,,2.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False
1224,Attributes on qunit-fixture are leaked across tests.,"The #qunit-fixture contents are guaranteed to be reset between each test back to its original contents. This helps DOM leaks since any elements added to qunit-fixture during a test run are cleaned up at the end of each test.
However, in some cases attributes are added to qunit-fixture. Since we are only resetting innerHTML these attributes are never cleared and leak between tests.  This results in cascading failures for Ember (due to helpful assertions that are done by checking for the presence of a given attribute).
The goal of this issue is to confirm that this is something that the maintainers are in favor of fixing, and to determine the best approach.

Possible implementations:

Change the current system to use outerHTML instead of innerHTML, remove the existing #qunit-fixture and re-add it (in the same location) using the original outerHTML.
Track the list of attributes before the test, and reset the attributes after the test.",rwjblue,CONTRIBUTOR,2017-10-10T13:47:49Z,2018-01-17T01:17:18Z,True,4.0,,2.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
1226,Counter for expected assertions when using `step(..)` / `verifySteps(..)` is surprising (and undocumented!),"Tell us about your runtime:

QUnit version: 2.4.0
What environment are you running QUnit in? (e.g., browser, Node): Node 8.6.0, Chrome 61.
How are you running QUnit? (e.g., script, testem, Grunt): custom npm script

What are you trying to do?
I'm trying to use the step(..) / verifySteps(..) API, but I had a failure related to the number of expected assertions.
The documentation for this feature doesn't mention the impact on expected assertion count at all. So at a minimum, the docs need to be updated. But I also think the current behavior is counter-intuitive.
Code that reproduces the problem:
QUnit.test( ""verify steps"", function test(assert){
    assert.step( ""do stuff 1"" );
    assert.step( ""do stuff 2"" );

    assert.expect( 1 );  // or 2
    assert.verifySteps( [""do stuff 1"",""do stuff 2""] );
} );

// test fails:
//   Expected 1 assertions, but 3 were run
What did you expect to happen?
I assumed the number of assertions to expect would either correlate to the number of step(..) calls (2), OR to the number of verifySteps(..) calls (1).
What actually happened?
The failure error message says 3, not 1 or 2. So clearly the counter is incrementing with both the step(..) calls and the verifySteps(..) calls.
This feels very strange and surprising to me. Even if it had been documented that way, I think it leads to more confusion with test authoring. It should consider only one or the other, not both.


The argument for using only the step(..) calls in the counter:
step(..) is kinda like an ok( true, .. ) call, so each time step(..) happens, make sure it's counted. If you know there are 5 steps to some algorithm, it makes intuitive sense to increase your expected count by 5.
Moreover, it doesn't make sense to include verifySteps(..) in this count in the same way that the call to assert.expect(..) doesn't itself get included in the count.


The argument for using only the verifySteps(..) calls in the counter:
step(..) is conceptually like just pushing an entry into an array. We haven't verified anything yet. There's no true or false passing that's happening at that point. The assertion doesn't happen until you call the verifySteps(..) call, which is conceptually like calling deepEqual(..) on the array that step(..) is pushing into.
Usually you make lots of step(..) calls, but only one verifySteps(..) call. So the counter should only increment once with that call, regardless of how many step(..)s there are.
Moreover, you're already implicitly counting the number of step(..) calls that happened, because the only way entires get into the internal array you're comparing to is by calling step(..), so the verifySteps(..) is already checking that the number -- not just the order! -- of step(..) calls is correct. No need for that to be included in the count.


I think either of these lines of argument is compelling. Personally, I think (2) is how my brain works. The style of how I lay out my tests, my assertions are all collected together at the end, so I expect to be able to see the same number of assertions listed, line-by-line, as what I pass to expect(..). If step(..) is included in that count, I have to look all over other parts of the test code to verify that my number matches. This is clunky.",getify,NONE,2017-10-18T13:18:51Z,,False,7.0,3.0,3.0,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1227,`verifySteps(..)` doesn't reset the internal list of steps (and docs are silent on topic!),"Tell us about your runtime:

QUnit version: 2.4.0
What environment are you running QUnit in? (e.g., browser, Node): Node 8.6.0, Chrome 61.
How are you running QUnit? (e.g., script, testem, Grunt): custom npm script

What are you trying to do?
I'm trying to use the step(..) / verifySteps(..) API, but I had a surprise test failure with verifySteps(..) called multiple times, interspersed with more step(..) calls.
The documentation for this feature doesn't mention what happens in this use-case. So at a minimum, the docs need to be updated. But I also think the current behavior is counter-intuitive.
Code that reproduces the problem:
QUnit.test( ""verify steps"", function test(assert){
    assert.expect( 5 );

    assert.step( ""do stuff 1"" );
    assert.step( ""do stuff 2"" );
    assert.verifySteps( [""do stuff 1"",""do stuff 2""] );

    assert.step( ""do stuff 3"" );
    assert.verifySteps( [""do stuff 3""] );
} );

// test fails:
//   expected: [do stuff 3]
//   actual: [do stuff 1,do stuff 2,do stuff 3]
What did you expect to happen?
I assumed that the call to verifySteps(..) corresponded to any previous calls to step(..) calls, and that once verifySteps(..) had been called, all those step(..) calls have now been verified, and there's no more reason to check them. Thus, a later call to verifySteps(..) would only verify any subsequent calls to step(..). IOW, I expected that the internal list would be reset after each verifySteps(..) call.
What actually happened?
The internal list is not reset, clearly. I can't think of any use-case for why I'd want to call verifySteps(..) multiple times, OTHER THAN if I wanted to verify independent groups of steps. I can't imagine any case where I don't want the internal list to be reset.
My use-case was that I was indeed expecting the list to be reset, so I could test separate groups of steps. It's quite awkward to have to keep including the whole running list of step values in all subsequent verifySteps(..) calls.
As far as I can tell, there's no way to manually reset this internal list to serve my use-case. So an alternative to auto-resetting (which I still think is most intuitive), which would avoid this suggestion being a hard breaking change:


Provide a resetSteps(..) method so that I could reset after calling verifySteps(..), like calling verifySteps(..).resetSteps() together in one statement, ideally.


Add an additional boolean parameter (though I generally loathe those) to verifySteps(..) that defaults to false, but if passed as true, does the reset.",getify,NONE,2017-10-18T13:36:57Z,2017-12-19T16:18:05Z,True,9.0,,4.0,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1228,Provide a public API for manually advancing test execution ,"Tell us about your runtime:

QUnit version: 2.4.0
What environment are you running QUnit in? (e.g., browser, Node): both
How are you running QUnit? (e.g., script, testem, Grunt): testem


What are you trying to do?
I'm trying to run the tests and pause after each test. Then I need to manually resume the tests.
I've tried using QUnit.config.blocking = true; after a test is finished. It works as expected. The tests are paused. But there's no way to tell QUnit to resume the execution of tests. Setting QUnit.config.blocking to false doesn't help. Looking at this code it seems like QUnit stops polling for the queue when blocking is set to true.
What are you proposing?
Expose the advance method from src/core/processing-queue.js as a public API. Maybe add some checks to make sure advance is used correctly (e.g. it can't be called when a test is already running).",mdebbar,NONE,2017-10-19T17:25:54Z,,False,5.0,,4.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1229,`assert.async()` + `async function` = gotcha,"Tell us about your runtime:

QUnit version: 2.4.0
What environment are you running QUnit in? (e.g., browser, Node): Node 8.6.0, Chrome 61.
How are you running QUnit? (e.g., script, testem, Grunt): custom npm script

What are you trying to do?
I'm using async function functions for my test functions, but was also (I guess, erroneously) calling assert.async() inside them. Turns out this exposes a gotcha. :(
Code that reproduces the problem:
QUnit.test( ""test 1"", async function test(assert){
    oops();
} );
// Exception: `oops` is not defined

QUnit.test( ""test 2"", async function test(assert){
    var done = assert.async();
    oops();
    done();
} );
// exception swallowed, test suite aborts silently :(
What did you expect to happen?
I assumed that if an exception was caught as a promise rejection, the done() would basically implicitly be called to finish out the test.
What actually happened?
Strangely, the exception is not only swallowed, but the whole test suite basically silently aborts at that point, so any other defined tests after it don't even seem to run. My guess is that this is because it's no longer running due to the exception, but QUnit is waiting (in vain) for the pending done() call to be made, which never will be. :(
It seems like it would make sense for QUnit to, upon receiving a rejected promise from a test function, go ahead and assume that any registered/pending async() signals should be completed/canceled/whatever, so the test exception can be reported normally. As a matter of fact, any returned promise that gets resolved, either fulfillment or rejection, should do the same, honestly.
Moreover, the documentation for assert.async() could probably be improved by mentioning that there's no reason to call it if you're using an async function test function, or you're manually returning a promise/thenable. I didn't know QUnit had that capability built-in, and that function's doc page would have been a great place to mention it to help me avoid this gotcha.",getify,NONE,2017-10-20T06:09:12Z,2018-01-18T16:53:27Z,True,4.0,,4.0,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1231,Need to update grunt-rollup dependency,"Leaving this as a reminder (or opportunity for someone else), we need to update the version of grunt-rollup we're using. Currently, it has a transitive, floating version dependency on rollup, which means the build can fail when using npm and not yarn (since we have a lock file generated). This caused issues with the latest release and will likely cause issues with the git webhook build.",trentmwillis,MEMBER,2017-10-22T05:33:49Z,2017-12-15T16:27:20Z,True,0.0,,2.0,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1236,Error in testing exceptions?,"There's an open question (by me) on stack overflow regarding problems in testing exceptions.
Does the issue reflect a real Qunit bug or merely a user error?",loldrup,NONE,2017-12-12T12:59:38Z,2018-01-17T01:20:40Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1243,Calling `step(..)` but not calling `verifySteps(..)`,"This issue is forked from #1227.

Question: what happens if you've called step(..) but never call verifySteps(..) -- IOW, leaving that internal queue populated?

The issue is, if you call assert.step(..) one or more times within a test case, but for whatever reason don't call verifySteps(..), does that count as an error (test failure)?
I argue it definitely should be. I can't think of any success case where you would have called step(..) but not verifySteps(..) and that's still OK.",getify,NONE,2017-12-19T20:50:01Z,2018-01-17T16:22:07Z,True,3.0,,4.0,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1245,the testing process too slow,"hey everyone!
I faced an issue regarding testing time. so, I have around 2.000 tests and they're so slow, I've found out that the problem is in the latency that was set in this method.
I've checked testing time without any latency and it takes around 25sec instead of 2-3 minutes. so, is there any chance to get some explanations why it was added? either add some configurable option in order to choose whether begin() will be run in async/sync mode.
here it is

  
    
      qunit/src/core.js
    
    
         Line 271
      in
      2999953
    
    
    
    

        
          
           // Add a slight delay to allow definition of more modules and tests. 
        
    
  


well, perhaps I understand why it was added, just to avoid threads freezing in cases of long time running, but I hope there are some cases when we don't need such opportunity.
@gibson042 so, what are your feelings on that?",dskuratovich,NONE,2018-01-04T11:06:59Z,2018-01-07T01:06:13Z,True,13.0,,4.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1248,"ESLint fail in Jenkins and local dev, but passing on Travis","The ""test"" npm run-script on Travis CI is passing in Node 4, 8 and 9 at https://travis-ci.org/qunitjs/qunit/builds/326175125.
Node 8, for example at https://travis-ci.org/qunitjs/qunit/jobs/326175130 passes:
$ node --version
v8.9.4
$ npm --version
5.6.0
..
$ yarn ..
$ export NPM_SCRIPT=test
$ npm run-script $NPM_SCRIPT
  > grunt  ..
  Running ""eslint:js"" (eslint) task

  ..
  Done.

Yet, the same command is failing on Jenkins at http://jenkins.jquery.com/job/QUnit/746/console
+ node --version
v8.9.3
+ npm --version
5.5.1
+ npm install ..
+ grunt ..
Running ""eslint:js"" (eslint) task

/var/lib/jenkins/jobs/QUnit/workspace/test/main/deepEqual.js
  1808:43  error  Multiple spaces found before '0'    no-multi-spaces
  1877:8   error  Multiple spaces found before 'new'  no-multi-spaces

✖ 2 problems (2 errors, 0 warnings)
  2 errors, 0 warnings potentially fixable with the `--fix` option.

Warning: Task ""eslint:js"" failed.

I can reproduce the same failure locally as well:
$ node --version
v9.3.0
$ npm --version
5.6.0
$ npm install ..
$ npm test ..
> grunt ..
Running ""copy:src-css"" (copy) task
Copied 1 file

Running ""eslint:js"" (eslint) task

/Users/krinkle/Development/qunit/test/main/deepEqual.js
  1808:43  error  Multiple spaces found before '0'    no-multi-spaces
  1877:8   error  Multiple spaces found before 'new'  no-multi-spaces

✖ 2 problems (2 errors, 0 warnings)
  2 errors, 0 warnings potentially fixable with the `--fix` option.

Warning: Task ""eslint:js"" failed.",Krinkle,MEMBER,2018-01-09T19:16:22Z,2018-01-10T02:40:33Z,True,4.0,,3.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1251,Keyup / Change Event breaks Qunit Test Process,"Hi,
I try to unit test a simple DOM Change which is triggered on $(document).change() and .keyup(). The trigger itself works like a charm.
QUnit.test(""when input has content login button has svg"", function (assert) {

console.log($('.main').find($('input')).length);

$(""#user_name3"").val(""change"");
$(""#user_name3"").trigger(""change"");
assert.ok($('.main').find($('svg')).length > 0, ""btn has arrow as content"")

When I log something before and after trigger(""change""), I can see that the test breaks immediatedly after the change / keyup is triggered, no matter of the statement form:

$(""#user_name3"").trigger(""change"");
$(""#user_name3"").change();
 $(document).trigger('change', $('#login--row'));

etc.
I have now tried numerous ways of expressing the change() call, but nothing worked. if I move the change() call upwards the break happens earlier with it. I get this message from the test runner:
Source: | TypeError: Cannot read property 'which' of undefined
-- | --

Is this a known issue?",Nixen85,NONE,2018-01-16T16:25:22Z,2018-01-16T22:17:32Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
1255,An assignment to innerHTML fails in XHTML,"Tell us about your runtime:

QUnit version: 2.5.0
What environment are you running QUnit in? (e.g., browser, Node): Browser. Opera 50.0.2762.67 on Linux.
How are you running QUnit? (e.g., script, testem, Grunt): I have an XHTML page.  It loads RequireJS with a script tag.  RequireJS is then configured with the location of QUnit.  Then a tiny test suite is run, which contains one call to QUnit.test.

What are you trying to do?
Here is my XHTML page.  It contains all you need to trigger the bug.
<?xml version=""1.0""?>
<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN""
  ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
<html xmlns=""http://www.w3.org/1999/xhtml"">
  <head>
    <meta http-equiv=""Content-Style-Type"" content=""text/css""/>
    <meta name=""viewport"" content=""width=device-width, initial-scale=1""/>

    <title>Demonstrate QUnit bug affecting XHTML pages</title>

    <link
      rel=""stylesheet""
      href=""https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.css""
    />
  </head>

  <body>
    <div id=""qunit""/>
    <div id=""qunit-fixture""/>

    <script
      type=""text/javascript""
      src=""https://cdn.jsdelivr.net/npm/requirejs@2.3.5/require.js""
    />

    <script type=""text/javascript"">
      <![CDATA[
      requirejs.config(
        {
          paths: {
            QUnit:
              'https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit',
          },
        }
      );

      require(['QUnit'], run_test_suite);

      function run_test_suite(QUnit) {
        QUnit.test(
          ""Failing test"",
          function (assert) {
            assert.ok(false);
          }
        );
        QUnit.start();
      }
      ]]>
    </script>
  </body>
</html>
If you're not familiar with an AMD loader such as RequireJS, you can ignore the AMD mechanics by just concentrating on the run_test_suite function.
What did you expect to happen?
I loaded the above page into my web browser, expecting that the page would contain a message from QUnit reporting a failing assertion.
What actually happened?
The page showed a number of things, including the text ""Running..."" and a button labelled ""Abort"".  However, the outcome of the test was not shown.
In the console, the following message appeared:
Uncaught DOMException: Failed to set the 'innerHTML' property on 'Element': The provided markup is invalid XML, and therefore cannot be inserted into an XML document.
    at toolbarModuleFilter (https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:3540:23)
    at appendToolbar (https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:3652:26)
    at appendInterface (https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:3726:5)
    at Array.<anonymous> (https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:3790:5)
    at runLoggingCallbacks (https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:1047:17)
    at begin (https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:3052:5)
    at https://cdn.jsdelivr.net/npm/qunit@2.5.0/qunit/qunit.js:3019:6",phormio,NONE,2018-01-23T19:46:25Z,2018-10-08T20:32:53Z,True,5.0,,3.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
1259,Add configuration to skip particular test point using test point name,"Qunit version 2.5.0
Env = browser
just loading it in browser
Running in browser:
chrome v62
What are you trying to do?
It would be easy to have a qunit configuration that can skip available test points using test point names
For eg:
QUnit.config.testPointsToSkip = ['hello test', 'test point name 2']
QUnit.test( ""hello test"", function( assert ) {
assert.ok( 1 == ""1"", ""Passed!"" );
});
This will skip hello test.",muthu90ec,NONE,2018-02-01T22:22:58Z,2018-02-25T21:16:33Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1266,`actual` is being emptied after `verifySteps(..)` is called,"Tell us about your runtime:

QUnit version: 2.5.0
What environment are you running QUnit in? (e.g., browser, Node): Node
How are you running QUnit? (e.g., script, testem, Grunt): via qunit node package/API

Node 9.3.0
The bug I'm experiencing is that the actual array for a log(..) call from a verifySteps(..) is subsequently emptied out before the final testDone(..) is called. That means I can't correctly output the test results for expected vs actual whenever verifySteps(..) fails.
Here's some code to illustrate:
var all_logs = {};

QUnit.log(function(details){
   if (details.message == ""check my steps"") {
      all_logs[details.message] = details;
      console.log(JSON.stringify(details));
   }
});

QUnit.testDone(function(results){
   var details = all_logs[results.assertions[0].message];
   console.log(JSON.stringify(details));
});

// ***********

QUnit.test( ""my test"", function test(assert){
   assert.step(""step one"");
   assert.step(""step two"");

   assert.verifySteps([""step one"",""step two"",""step 3""],""check my steps"");
});

QUnit.start();
The console output looks like:
{""module"":"""",""name"":""my test"",""result"":false,""message"":""check my steps"",""actual"":[""step one"",""step two""],""testId"":""b31bbaea"",""negative"":false,""runtime"":2,""todo"":false,""expected"":[""step one"",""step two"",""step 3""],""source"":""    at Assert.verifySteps (/tmp/node_modules/qunit/qunit/qunit.js:2158:11)""}

{""module"":"""",""name"":""my test"",""result"":false,""message"":""check my steps"",""actual"":[],""testId"":""b31bbaea"",""negative"":false,""runtime"":2,""todo"":false,""expected"":[""step one"",""step two"",""step 3""],""source"":""    at Assert.verifySteps (/tmp/node_modules/qunit/qunit/qunit.js:2158:11)""}

Notice how the first output has the actual array filled in, but the second output, from the same shared object but accessed from within testDone(..), has actual as an empty array.
I strongly suspect that what's happening is that when verifySteps(..) calls log(..), it passes a reference to its own internal step(..) queue as actual, and then it empties that queue array at the end of verifySteps(..). Instead, shouldn't a copy of that array be sent, so that when your internal queue is emptied, it doesn't affect my storage of the log details.
I'm temporarily fixing this bug by doing JSON.parse(JSON.stringify(details)) to JSON-clone the log details object so that I can't be affected by your internal queue reset. But I'd expect to just be able to store the details object as-is and not have it later be modified at-a-distance unexpectedly by qunit.",getify,NONE,2018-02-22T00:03:16Z,2018-03-01T16:20:35Z,True,1.0,,2.0,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1268,"A rejects testcase should be pass, when the rejected and expected value is undefined.","Hello,
I found here an unexpected behavior. I think it's a bug.
I have a test for a function, that should return a promise in rejected state. If the reject call has no value, the testcase fail, although it should be passed.
I wrote a simple example: https://jsfiddle.net/62wxoy6z/9/
QUnit.test(""test rejects"", function(assert) {
  assert.rejects(Promise.reject('test'), 'reject with value passed');
  assert.rejects(Promise.reject(), 'reject without value fail');
});

The enviroment doesn't matter, but here is the printout of qunit:
QUnit 2.5.1; Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.102 Safari/537.36 Vivaldi/1.93.955.48
The qunit version is 2.5.1.
I think it's wrong to do only validation if actual is not undefined.
If actual is undefined and expected is undefined the result should be true.
If actual is undefined and expected is not undefined the result should be false.
function rejects(promise, expected, message) {
	var result = false;
	// ... 
	return then.call(promise, function handleFulfillment() {
		// ...
	}, function handleRejection(actual) {
		if (actual) {
			var expectedType = objectType(expected);

			// We don't want to validate
			if (expected === undefined) {
				result = true;
				expected = null;
			// ... 
		}
		currentTest.assert.pushResult({
			result: result,
			actual: actual,
			expected: expected,
			message: message
		});
		done();
	});
}

Thank you!
Jonas",jsiedentop,NONE,2018-03-01T09:46:38Z,2018-03-01T20:34:50Z,True,1.0,,2.0,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1272,`QUnit.module.only` behaves strange,"QUnit.module.only behaves strange when using the module syntax that assigns tests to modules using the order of invocation, e.g.:
QUnit.module.only('module 1');

QUnit.test('test in module 1', assert => {
  assert.ok(true, 'a successful assertion in module 1');
});

QUnit.module('module 2');

QUnit.test('test in module 2', assert => {
  assert.ok(true, 'a successful assertion in module 2');
});
Without only test in module 1 belongs to module 1 and test in module 2 belongs to module 2. Using only in module 1 the second test also seems to belong to module 1 and is run (applying the wrong hooks if there would be any).
You can check this in this plunk: https://embed.plnkr.co/mh4VgJ0O6Dhp4H5APd3S/",sechel,NONE,2018-04-02T19:45:14Z,,False,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1273,qunitjs.com ssl cert expired,"Tell us about your runtime:

QUnit version: n/a
What environment are you running QUnit in? (e.g., browser, Node): n/a
How are you running QUnit? (e.g., script, testem, Grunt): n/a

What are you trying to do?
Read Qunit docs on https://qunitjs.com/
What did you expect to happen?
The page would load correctly with a valid SSL cert.
What actually happened?

qunitjs.com uses an invalid security certificate. The certificate expired on 2 April 2018, 23:32. The current time is 3 April 2018, 16:15.",tonyfinn,NONE,2018-04-03T15:16:23Z,2018-04-10T22:14:21Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1274,Add 'Run module' control to the HTML Reporter,Originally proposed in #1159. See the comments in that thread for the direction we'd like to see the feature move in.,trentmwillis,MEMBER,2018-04-18T16:14:45Z,,False,0.0,,1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
1275,2.6.0 violated semver,"A change was apparently made in 2.6.0 that violated semver, as far as I can tell.
In version 2.5.0, I was able to pass any non-string value to assert.step(..), and it passed through as-is to the assert.verifySteps(..) check.
I casually upgraded from 2.5.0 to 2.6.0 not expecting any breakage, and got a surprise build failure because now there's a test failure which indicates that assert.step(..) must be passed only strings.
This is a fine feature, and I'm OK with it. But a minor version change shouldn't have broken my tests, if I understand semver correctly.
It was not that big of a deal, I fixed by force coercing my values to strings. But it's not a good precedent to set, and could cause bigger issues for others besides me.",getify,NONE,2018-04-30T13:13:55Z,2018-04-30T14:39:01Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1276,Browser autocomplete overlaps qunit module filter autocomplete,"Tell us about your runtime:

QUnit version: 2.5.0
What environment are you running QUnit in? (e.g., browser, Node): browser
How are you running QUnit? (e.g., script, testem, Grunt): testem (via ember-cli)


Chromium Version 66.0.3359.139
What are you trying to do?
Typing in the module filter input triggers the qunit module autocompletion but also the native browser autocomplete. This overlaps and makes filtering a specific module harder as a user has to somehow close the native autocompletion.

I'm unsure if it's expected behavior but one could possibly disable the browser autocomplete by setting the autocomplete attribute on the module filter input.
If this is ok, I can open a PR to set the autocomplete attribute to off.
Thanks",makepanic,CONTRIBUTOR,2018-05-02T07:38:55Z,2018-05-07T17:01:25Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
1280,autorun module's tests should belong to autorun module,"The autorun test is adding these tests after 5 seconds to whatever module happens to be running in node via QUnit global currentModule, not in autorun due to this change and may not even run at all:
c8e2ca5#diff-bc13676ec5de469f49a7f82e44c6c57bR177
These test should be refactored or remove as they are essentially racy at the moment.  Is this actually an important use case to support?",krisselden,NONE,2018-05-03T23:28:27Z,,False,3.0,,3.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1281,Provide `module` in `package.json` along with es6 format Rollup,"Tell us about your runtime:

QUnit version: 2.6.1
What environment are you running QUnit in? (e.g., browser, Node): Browser (Chrome 66, Firefox 61.0b7)
How are you running QUnit? (e.g., script, testem, Grunt): script


What are you trying to do?
Code that reproduces the problem:

import QUnit from './node_modules/qunit/dist/qunit-es6.js';
(This is a feature request; I realize this will not work currently.)
If you have any relevant configuration information, please include that here:
What did you expect to happen?
QUnit could be imported.
In cases where one runs Rollup (and node-resolve with optional commonjs plugins) on one's QUnit tests themselves, the following
import QUnit from 'qunit';
...should also work if module in package.json points to the ES6 modules file:
""module"": ""dist/qunit-es6.js""
What actually happened?
Nothing, as a module export is not available.",brettz9,NONE,2018-05-24T04:22:18Z,,False,9.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1282,Chokidar dependency hurts installation ergonomics,"https://github.com/qunitjs/qunit/blob/master/package.json#L34
Although this dependency is handy (and works well), it introduces a native dependency. Requiring a native dependency can hurt user adoption/ergonomics. Although some are prebuilt, users on newer versions (or odd version) of node, or users who switch node versions, must also deal with a less then ideal user experience.
I would recommend using: http://github.com/amasad/sane/",stefanpenner,CONTRIBUTOR,2018-06-06T16:45:38Z,2018-07-31T03:53:43Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1284,RangeError: Maximum call stack size exceeded,"Tell us about your runtime:

QUnit version: 2.6.1
What environment are you running QUnit in? (e.g., browser, Node): browser (Chrome) and Node
How are you running QUnit? (e.g., script, testem, Grunt): either via cli, or karma-qunit, or in the browser


What are you trying to do?
We have a fairly large test suite with several thousand tests in it and with latest QUnit it takes forever to start and eventually it seems to run into a fairly impressive recursive call. This repro is an over-simplified version:

for (let i = 0; i < 100; i++) {
    QUnit.module('suite' + i, {
        beforeEach: function () {
            // do something
        },
        afterEach: function () {
            // do something
        }
    });

    for (let j = 0; j < 100; j++) {
        QUnit.test('test' + j, function (assert) {
            assert.ok(j !== 98);
        });
    }
}
What did you expect to happen?
All test suites should finish and report the results.

What actually happened?
QUnit fails before finishing the test run with the following exception:
Uncaught RangeError: Maximum call stack size exceeded
    at Array.join (native)
    at extractStacktrace (qunit.js:1074)
    at Test.run (qunit.js:1518)
    at qunit.js:1737
    at advanceTaskQueue (qunit.js:1129)
    at advance (qunit.js:1110)
    at advanceTestQueue (qunit.js:1155)
    at advance (qunit.js:1113)
    at advanceTestQueue (qunit.js:1155)
    at advance (qunit.js:1113)",asapach,NONE,2018-06-06T20:30:19Z,,False,3.0,,4.0,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,True,False
1285,Allow qunit command to run an html file.,"Can we run browser tests in CI mode? I see that currently there is qunit command but it seems to strangely only support node environments. I have qunit tests loaded via a static index.html file or through a server under http://localhost:42000. Can we just enable qunit runners by supplying a target argument like:
qunit index.html
or
qunit http://localhost:4200
This would significantly ease all the ecosystem that is currently built around qunit. Ember-cli currently uses nasty hacks like testem to provide this behavior. My experimentation tells me this could be simply achieved without such legacy library. All I need is a direct qunit command support for html files and http servers and perhaps a configuration file to specify different headless browsers with arguments, installed google chrome being default.",izelnakri,NONE,2018-06-10T17:32:02Z,2018-06-10T22:08:58Z,True,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1286,Expired SSL Certificate on https://qunitjs.com/,"Tell us about your runtime:

QUnit version: n/a
What environment are you running QUnit in? (e.g., browser, Node): n/a
How are you running QUnit? (e.g., script, testem, Grunt): n/a


What are you trying to do?
Visit the website at https://qunitjs.com/
What did you expect to happen?
The page would have a valid SSL certificate.
What actually happened?
Privacy Error: This server could not prove that it is qunitjs.com; its security certificate expired 2 days ago.",cjwillcock,NONE,2018-06-11T20:01:23Z,2018-06-15T00:59:29Z,True,4.0,,4.0,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False
1289,Add api.qunitjs.com redirects to fix old urls,"There's two categories of redirects we need

Redirects previously maintained in Apache configuration from when the api.qunitjs.com was a self-hosted WordPress site.
Redirects needed because we've renamed some pages (as part of the move to GitHub pages, or more recently)

Category 1: Redirects we used to have.
	wordpress::site::extra{""api.qunitjs.com"":
		config => '
			rewrite ^/api /resources/api.xml redirect;
			rewrite ^/asyncTest /QUnit.asyncTest permanent;
			rewrite ^/module /QUnit.module permanent;
			rewrite ^/start /QUnit.start permanent;
			rewrite ^/stop /QUnit.stop permanent;
			rewrite ^/test /QUnit.test permanent;
			rewrite ^/QUnit.jsDump.parse /QUnit.dump.parse permanent;
		'
	}


 https://api.qunitjs.com/asyncTest
 https://api.qunitjs.com/module
 https://api.qunitjs.com/start
 https://api.qunitjs.com/stop
 https://api.qunitjs.com/test
 https://api.qunitjs.com/QUnit.asyncTest
 https://api.qunitjs.com/QUnit.dump.parse
 https://api.qunitjs.com/QUnit.jsDump.parse
 https://api.qunitjs.com/QUnit.module
 https://api.qunitjs.com/QUnit.start
 https://api.qunitjs.com/QUnit.stop
 https://api.qunitjs.com/QUnit.test

Category 2: Redirects we need.
Most of these are URLs I discovered by looking through jquery/* and qunitjs/* on GitHub for mentioned urls, and here are the ones that are dead:

 http://api.qunitjs.com/asyncTest/
 http://api.qunitjs.com/deepEqual/
 http://api.qunitjs.com/equal/
 http://api.qunitjs.com/expect/
 http://api.qunitjs.com/module/
 http://api.qunitjs.com/notDeepEqual/
 http://api.qunitjs.com/notEqual/
 http://api.qunitjs.com/notStrictEqual/
 http://api.qunitjs.com/ok/
 http://api.qunitjs.com/start/
 http://api.qunitjs.com/stop/
 http://api.qunitjs.com/strictEqual/
 http://api.qunitjs.com/test/
 http://api.qunitjs.com/throws/
http://api.qunitjs.com/QUnit.init/
http://api.qunitjs.com/QUnit.reset/",Krinkle,MEMBER,2018-06-17T20:48:12Z,2018-06-17T23:27:16Z,True,1.0,,1.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1294,Consider element ID in html reporter part of API,"Tell us about your runtime:

QUnit version: 2.6.1
**What environment are you running QUnit in? **: Browser

Hi, i started a topic in the gitter chat and i was suggested to come here for a feature proposal.
I would like to have a way from the qunit tests, to modify the HTML output of the qunit html reporter.
I m testing canvas differences with one of the libraries available, in case of failure i would like to display the 3 images ( actual, expected, diff ) in the html reporter.
I do understand this is a narrow use case, while maybe an api to define plugins to make this modification possible could be a more generic solution.
What do you think?
If you think the idea is nice i would start to study the library to work on it and open a PR with a first draft.",asturur,NONE,2018-06-26T22:30:22Z,,False,14.0,,3.0,True,False,False,False,False,False,False,False,False,True,False,False,True,False,False,False,True,False,False
1300,Too verbose reporting?,"When comparing two non-equal objects that have the same prototype chain, it seems unnecessary to report all the properties that reside on their prototype chain. This because we can know a priori that the difference between the two objects won't be found in their prototype object.
This behavior discourages test driven development, as having several failing tests quickly result in insurmountable amounts of lines being logged. Generating all that HTML slows down the browser.
This issue has two legs:
a. Should the Diff-section log all prototypal properties when we know that the difference between the objects can't reside among the prototypal properties?
b. Should qUnit log all prototypal properties when logging an object?
Example:
a.deepEqual( new THREE.Vector3(1,2,3), new THREE.Vector3(2,3,4), ""Bare bone test of excessive logging of prototype properties"" );
This test gives this output:

Bare bone test of prototype comparison@ 80 ms
Expected: 	
{
  ""add"": function add( a, b ){
    [code]
  },
  ""addScalar"": function addScalar( a ){
    [code]
  },
  ""addScaledVector"": function addScaledVector( a, b ){
    [code]
  },
  ""addVectors"": function addVectors( a, b ){
    [code]
  },
  ""angleTo"": function angleTo( a ){
    [code]
  },
  ""applyAxisAngle"": function applyAxisAngle( a, b ){
    [code]
  },
  ""applyEuler"": function applyEuler( a ){
    [code]
  },
  ""applyMatrix3"": function applyMatrix3( a ){
    [code]
  },
  ""applyMatrix4"": function applyMatrix4( a ){
    [code]
  },
  ""applyProjection"": function applyProjection( a ){
    [code]
  },
  ""applyQuaternion"": function applyQuaternion( a ){
    [code]
  },
  ""ceil"": function ceil(){
    [code]
  },
  ""changeBasis"": function changeBasis( a, b, c, d ){
    [code]
  },
  ""clamp"": function clamp( a, b ){
    [code]
  },
  ""clampLength"": function clampLength( a, b ){
    [code]
  },
  ""clampScalar"": function clampScalar( a, b ){
    [code]
  },
  ""clone"": function clone(){
    [code]
  },
  ""copy"": function copy( a ){
    [code]
  },
  ""cross"": function cross( a, b ){
    [code]
  },
  ""crossVectors"": function crossVectors( a, b ){
    [code]
  },
  ""distanceTo"": function distanceTo( a ){
    [code]
  },
  ""distanceToManhattan"": function distanceToManhattan( a ){
    [code]
  },
  ""distanceToSquared"": function distanceToSquared( a ){
    [code]
  },
  ""divide"": function divide( a ){
    [code]
  },
  ""divideScalar"": function divideScalar( a ){
    [code]
  },
  ""dot"": function dot( a ){
    [code]
  },
  ""equals"": function equals( a ){
    [code]
  },
  ""floor"": function floor(){
    [code]
  },
  ""fromArray"": function fromArray( a, b ){
    [code]
  },
  ""fromAttribute"": function fromAttribute( a, b, c ){
    [code]
  },
  ""fromBufferAttribute"": function fromBufferAttribute( a, b, c ){
    [code]
  },
  ""getColumnFromMatrix"": function getColumnFromMatrix( a, b ){
    [code]
  },
  ""getComponent"": function getComponent( a ){
    [code]
  },
  ""getPositionFromMatrix"": function getPositionFromMatrix( a ){
    [code]
  },
  ""getScaleFromMatrix"": function getScaleFromMatrix( a ){
    [code]
  },
  ""isVector3"": true,
  ""length"": function length(){
    [code]
  },
  ""lengthManhattan"": function lengthManhattan(){
    [code]
  },
  ""lengthSq"": function lengthSq(){
    [code]
  },
  ""lerp"": function lerp( a, b ){
    [code]
  },
  ""lerpVectors"": function lerpVectors( a, b, c ){
    [code]
  },
  ""manhattanDistanceTo"": function manhattanDistanceTo( a ){
    [code]
  },
  ""manhattanLength"": function manhattanLength(){
    [code]
  },
  ""max"": function max( a ){
    [code]
  },
  ""min"": function min( a ){
    [code]
  },
  ""multiply"": function multiply( a, b ){
    [code]
  },
  ""multiplyScalar"": function multiplyScalar( a ){
    [code]
  },
  ""multiplyVectors"": function multiplyVectors( a, b ){
    [code]
  },
  ""negate"": function negate(){
    [code]
  },
  ""normalize"": function normalize(){
    [code]
  },
  ""project"": function project( a ){
    [code]
  },
  ""projectOnPlane"": function projectOnPlane( a ){
    [code]
  },
  ""projectOnVector"": function projectOnVector( a ){
    [code]
  },
  ""reflect"": function reflect( a ){
    [code]
  },
  ""rejectOnVector"": function rejectOnVector( a ){
    [code]
  },
  ""round"": function round(){
    [code]
  },
  ""roundToZero"": function roundToZero(){
    [code]
  },
  ""set"": function set( a, b, c ){
    [code]
  },
  ""setComponent"": function setComponent( a, b ){
    [code]
  },
  ""setEulerFromQuaternion"": function setEulerFromQuaternion(){
    [code]
  },
  ""setEulerFromRotationMatrix"": function setEulerFromRotationMatrix(){
    [code]
  },
  ""setFromCylindrical"": function setFromCylindrical( a ){
    [code]
  },
  ""setFromMatrixColumn"": function setFromMatrixColumn( a, b ){
    [code]
  },
  ""setFromMatrixPosition"": function setFromMatrixPosition( a ){
    [code]
  },
  ""setFromMatrixScale"": function setFromMatrixScale( a ){
    [code]
  },
  ""setFromSpherical"": function setFromSpherical( a ){
    [code]
  },
  ""setLength"": function setLength( a ){
    [code]
  },
  ""setScalar"": function setScalar( a ){
    [code]
  },
  ""setX"": function setX( a ){
    [code]
  },
  ""setY"": function setY( a ){
    [code]
  },
  ""setZ"": function setZ( a ){
    [code]
  },
  ""sub"": function sub( a, b ){
    [code]
  },
  ""subScalar"": function subScalar( a ){
    [code]
  },
  ""subVectors"": function subVectors( a, b ){
    [code]
  },
  ""toArray"": function toArray( a, b ){
    [code]
  },
  ""transformDirection"": function transformDirection( a ){
    [code]
  },
  ""unproject"": function unproject( a ){
    [code]
  },
  ""x"": 2,
  ""y"": 3,
  ""z"": 4
}
Result:
{
""add"": function add( a, b ){
[code]
},
""addScalar"": function addScalar( a ){
[code]
},
""addScaledVector"": function addScaledVector( a, b ){
[code]
},
""addVectors"": function addVectors( a, b ){
[code]
},
""angleTo"": function angleTo( a ){
[code]
},
""applyAxisAngle"": function applyAxisAngle( a, b ){
[code]
},
""applyEuler"": function applyEuler( a ){
[code]
},
""applyMatrix3"": function applyMatrix3( a ){
[code]
},
""applyMatrix4"": function applyMatrix4( a ){
[code]
},
""applyProjection"": function applyProjection( a ){
[code]
},
""applyQuaternion"": function applyQuaternion( a ){
[code]
},
""ceil"": function ceil(){
[code]
},
""changeBasis"": function changeBasis( a, b, c, d ){
[code]
},
""clamp"": function clamp( a, b ){
[code]
},
""clampLength"": function clampLength( a, b ){
[code]
},
""clampScalar"": function clampScalar( a, b ){
[code]
},
""clone"": function clone(){
[code]
},
""copy"": function copy( a ){
[code]
},
""cross"": function cross( a, b ){
[code]
},
""crossVectors"": function crossVectors( a, b ){
[code]
},
""distanceTo"": function distanceTo( a ){
[code]
},
""distanceToManhattan"": function distanceToManhattan( a ){
[code]
},
""distanceToSquared"": function distanceToSquared( a ){
[code]
},
""divide"": function divide( a ){
[code]
},
""divideScalar"": function divideScalar( a ){
[code]
},
""dot"": function dot( a ){
[code]
},
""equals"": function equals( a ){
[code]
},
""floor"": function floor(){
[code]
},
""fromArray"": function fromArray( a, b ){
[code]
},
""fromAttribute"": function fromAttribute( a, b, c ){
[code]
},
""fromBufferAttribute"": function fromBufferAttribute( a, b, c ){
[code]
},
""getColumnFromMatrix"": function getColumnFromMatrix( a, b ){
[code]
},
""getComponent"": function getComponent( a ){
[code]
},
""getPositionFromMatrix"": function getPositionFromMatrix( a ){
[code]
},
""getScaleFromMatrix"": function getScaleFromMatrix( a ){
[code]
},
""isVector3"": true,
""length"": function length(){
[code]
},
""lengthManhattan"": function lengthManhattan(){
[code]
},
""lengthSq"": function lengthSq(){
[code]
},
""lerp"": function lerp( a, b ){
[code]
},
""lerpVectors"": function lerpVectors( a, b, c ){
[code]
},
""manhattanDistanceTo"": function manhattanDistanceTo( a ){
[code]
},
""manhattanLength"": function manhattanLength(){
[code]
},
""max"": function max( a ){
[code]
},
""min"": function min( a ){
[code]
},
""multiply"": function multiply( a, b ){
[code]
},
""multiplyScalar"": function multiplyScalar( a ){
[code]
},
""multiplyVectors"": function multiplyVectors( a, b ){
[code]
},
""negate"": function negate(){
[code]
},
""normalize"": function normalize(){
[code]
},
""project"": function project( a ){
[code]
},
""projectOnPlane"": function projectOnPlane( a ){
[code]
},
""projectOnVector"": function projectOnVector( a ){
[code]
},
""reflect"": function reflect( a ){
[code]
},
""rejectOnVector"": function rejectOnVector( a ){
[code]
},
""round"": function round(){
[code]
},
""roundToZero"": function roundToZero(){
[code]
},
""set"": function set( a, b, c ){
[code]
},
""setComponent"": function setComponent( a, b ){
[code]
},
""setEulerFromQuaternion"": function setEulerFromQuaternion(){
[code]
},
""setEulerFromRotationMatrix"": function setEulerFromRotationMatrix(){
[code]
},
""setFromCylindrical"": function setFromCylindrical( a ){
[code]
},
""setFromMatrixColumn"": function setFromMatrixColumn( a, b ){
[code]
},
""setFromMatrixPosition"": function setFromMatrixPosition( a ){
[code]
},
""setFromMatrixScale"": function setFromMatrixScale( a ){
[code]
},
""setFromSpherical"": function setFromSpherical( a ){
[code]
},
""setLength"": function setLength( a ){
[code]
},
""setScalar"": function setScalar( a ){
[code]
},
""setX"": function setX( a ){
[code]
},
""setY"": function setY( a ){
[code]
},
""setZ"": function setZ( a ){
[code]
},
""sub"": function sub( a, b ){
[code]
},
""subScalar"": function subScalar( a ){
[code]
},
""subVectors"": function subVectors( a, b ){
[code]
},
""toArray"": function toArray( a, b ){
[code]
},
""transformDirection"": function transformDirection( a ){
[code]
},
""unproject"": function unproject( a ){
[code]
},
""x"": 1,
""y"": 2,
""z"": 3
}
Diff:
{
""add"": function add( a, b ){
[code]
},
""addScalar"": function addScalar( a ){
[code]
},
""addScaledVector"": function addScaledVector( a, b ){
[code]
},
""addVectors"": function addVectors( a, b ){
[code]
},
""angleTo"": function angleTo( a ){
[code]
},
""applyAxisAngle"": function applyAxisAngle( a, b ){
[code]
},
""applyEuler"": function applyEuler( a ){
[code]
},
""applyMatrix3"": function applyMatrix3( a ){
[code]
},
""applyMatrix4"": function applyMatrix4( a ){
[code]
},
""applyProjection"": function applyProjection( a ){
[code]
},
""applyQuaternion"": function applyQuaternion( a ){
[code]
},
""ceil"": function ceil(){
[code]
},
""changeBasis"": function changeBasis( a, b, c, d ){
[code]
},
""clamp"": function clamp( a, b ){
[code]
},
""clampLength"": function clampLength( a, b ){
[code]
},
""clampScalar"": function clampScalar( a, b ){
[code]
},
""clone"": function clone(){
[code]
},
""copy"": function copy( a ){
[code]
},
""cross"": function cross( a, b ){
[code]
},
""crossVectors"": function crossVectors( a, b ){
[code]
},
""distanceTo"": function distanceTo( a ){
[code]
},
""distanceToManhattan"": function distanceToManhattan( a ){
[code]
},
""distanceToSquared"": function distanceToSquared( a ){
[code]
},
""divide"": function divide( a ){
[code]
},
""divideScalar"": function divideScalar( a ){
[code]
},
""dot"": function dot( a ){
[code]
},
""equals"": function equals( a ){
[code]
},
""floor"": function floor(){
[code]
},
""fromArray"": function fromArray( a, b ){
[code]
},
""fromAttribute"": function fromAttribute( a, b, c ){
[code]
},
""fromBufferAttribute"": function fromBufferAttribute( a, b, c ){
[code]
},
""getColumnFromMatrix"": function getColumnFromMatrix( a, b ){
[code]
},
""getComponent"": function getComponent( a ){
[code]
},
""getPositionFromMatrix"": function getPositionFromMatrix( a ){
[code]
},
""getScaleFromMatrix"": function getScaleFromMatrix( a ){
[code]
},
""isVector3"": true,
""length"": function length(){
[code]
},
""lengthManhattan"": function lengthManhattan(){
[code]
},
""lengthSq"": function lengthSq(){
[code]
},
""lerp"": function lerp( a, b ){
[code]
},
""lerpVectors"": function lerpVectors( a, b, c ){
[code]
},
""manhattanDistanceTo"": function manhattanDistanceTo( a ){
[code]
},
""manhattanLength"": function manhattanLength(){
[code]
},
""max"": function max( a ){
[code]
},
""min"": function min( a ){
[code]
},
""multiply"": function multiply( a, b ){
[code]
},
""multiplyScalar"": function multiplyScalar( a ){
[code]
},
""multiplyVectors"": function multiplyVectors( a, b ){
[code]
},
""negate"": function negate(){
[code]
},
""normalize"": function normalize(){
[code]
},
""project"": function project( a ){
[code]
},
""projectOnPlane"": function projectOnPlane( a ){
[code]
},
""projectOnVector"": function projectOnVector( a ){
[code]
},
""reflect"": function reflect( a ){
[code]
},
""rejectOnVector"": function rejectOnVector( a ){
[code]
},
""round"": function round(){
[code]
},
""roundToZero"": function roundToZero(){
[code]
},
""set"": function set( a, b, c ){
[code]
},
""setComponent"": function setComponent( a, b ){
[code]
},
""setEulerFromQuaternion"": function setEulerFromQuaternion(){
[code]
},
""setEulerFromRotationMatrix"": function setEulerFromRotationMatrix(){
[code]
},
""setFromCylindrical"": function setFromCylindrical( a ){
[code]
},
""setFromMatrixColumn"": function setFromMatrixColumn( a, b ){
[code]
},
""setFromMatrixPosition"": function setFromMatrixPosition( a ){
[code]
},
""setFromMatrixScale"": function setFromMatrixScale( a ){
[code]
},
""setFromSpherical"": function setFromSpherical( a ){
[code]
},
""setLength"": function setLength( a ){
[code]
},
""setScalar"": function setScalar( a ){
[code]
},
""setX"": function setX( a ){
[code]
},
""setY"": function setY( a ){
[code]
},
""setZ"": function setZ( a ){
[code]
},
""sub"": function sub( a, b ){
[code]
},
""subScalar"": function subScalar( a ){
[code]
},
""subVectors"": function subVectors( a, b ){
[code]
},
""toArray"": function toArray( a, b ){
[code]
},
""transformDirection"": function transformDirection( a ){
[code]
},
""unproject"": function unproject( a ){
[code]
},
""x"": 21,
""y"": 32,
""z"": 43
}",loldrup,NONE,2018-08-01T07:35:41Z,,False,3.0,,3.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False
1301,Incorrect DOM built in appendTestResults(),"Tell us about your runtime:

QUnit version: 2.6.1
What environment are you running QUnit in? (e.g., browser, Node): Browser
How are you running QUnit? (e.g., script, testem, Grunt): grunt


What are you trying to do?
If the contents of ""#qunit"" is extracted with innerHTML and written to a HTML file, the resultant HTML is invalid.  This is because ""#qunit-testresult"" is created as a ""p"" and its innerHTML is filled with several ""divs"" like ""#qunit-testresult-display"" and ""#qunit-testresult-controls"".
The problem is that a ""div"" element is not valid content of a ""p"".  In fact the HTML spec states that  a ""p"" followed by a ""div"" should assume that the end tag of the ""p"" has been omitted.
The result of parsing <p id=qunit-testresult""><div id=qunit-testresult-display /></p> is an empty ""p"" element with the ""divs"" as siblings.  This breaks any CSS used to format this section.
The fix is to make ""#qunit-testresult"" a ""div"" instead.",kjax,NONE,2018-08-02T20:30:53Z,,False,2.0,,3.0,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
1302,Update development dependencies for CVE-2018-3728,"GitHub's vulnerability detection flags the following

Dependencies defined in package-lock.json (556)

hapijs / hoek [ Known security vulnerability in 2.16.3 ]


affects all versions before 4.2.0 and 5.0.x before 5.0


See also:

https://nvd.nist.gov/vuln/detail/CVE-2018-3728
https://www.npmjs.com/package/hoek
https://github.com/hapijs/hoek",Krinkle,MEMBER,2018-08-07T22:02:56Z,2018-08-19T20:24:12Z,True,6.0,,2.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1308,`console.log` inside `QUnit.done` does not work in terminal,"Tell us about your runtime:

QUnit version: 2.4.1
What environment are you running QUnit in? (e.g., browser, Node): browser (Chrome headless)
How are you running QUnit? (e.g., script, testem, Grunt): Ember CLI 2.18, which is using Testem


What are you trying to do?
Code that reproduces the problem:

QUnit.done(() => console.log(""foo""));
This code is executed in the browser environment. I have no access to Node features from there.
What did you expect to happen?
The log message is visible when I run tests with the terminal output (via ember test --serve, which is using Chrome headless).

What actually happened?
The log message is only visible when I run tests in browser (ember test --serve). When I run tests in the terminal (ember test), the log message is not visible. It does not appear in the CI.
console.logs made during test execution do appear in the terminal. But my goal is to collect some stats about tests and spit them out after all tests complete.",lolmaus,NONE,2018-08-23T09:55:44Z,2018-08-23T16:10:31Z,True,1.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
1309,Matcher Concept and assertThat,"Hi,
this is rather a feature request than a bug report therefore i skipped the template.
Would it be possible to implement a matcher concept (like JUnit 4 does with Java).
http://www.vogella.com/tutorials/Hamcrest/article.html
https://github.com/junit-team/junit4/wiki/matchers-and-assertthat
E.g. by implementing a method like
assert.that(obj, matcher)
and providing a set of standard matchers. Custom matchers can then also be created.",tobiasso85,NONE,2018-09-11T11:03:16Z,,False,1.0,,3.0,True,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False
1312,QUnit to fix Lighthouse only two issues; cannot locate target or script.  ,"Tell us about your runtime:

QUnit version:
What environment are you running QUnit in? (e.g., browser, Node):
How are you running QUnit? (e.g., script, testem, Grunt):


What are you trying to do?
Code that reproduces the problem:


If you have any relevant configuration information, please include that here:
What did you expect to happen?

What actually happened?",,NONE,2018-09-19T14:11:54Z,2018-09-20T18:13:20Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
1313,qunit:all test hanging,"Tell us about your runtime:

QUnit version: master (2.6.3-pre)
What environment are you running QUnit in? (e.g., browser, Node): Node
How are you running QUnit? (e.g., script, testem, Grunt): Grunt


Node 9.2.1
What are you trying to do?
Code that reproduces the problem:

npm test

If you have any relevant configuration information, please include that here:
What did you expect to happen?
The tests to pass (or fail)
What actually happened?
The tests just hanged at the first test

Running ""qunit:all"" (qunit) task
Testing http://localhost:8000/test/sandboxed-iframe.html

Any idea what I may be missing? I'm on a Mac...",brettz9,NONE,2018-09-23T12:33:00Z,2018-09-30T02:33:28Z,True,5.0,,4.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
1318,Jenkins git build failing due to not being to launch Chromium,"The Jenkins build that publishes the latest changes to master looks to have been failing since we introduced testing with Headless Chrome/Chromium.
Example of failure here: http://jenkins.jquery.com/job/QUnit/782/console",trentmwillis,MEMBER,2018-10-10T16:01:14Z,2018-10-12T03:20:59Z,True,4.0,,2.0,False,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1321,"QUnit 2.7 claims compatibility with Node 4, but fails","Some of our CI systems are still running on Node 4 and the qunit npm package claims that it's still compatible with it:
https://github.com/qunitjs/qunit/blob/2.7.0/package.json#L100
Unfortunately qunit has a dependency on sane@4 though, which is Node 6+. It seems that this dependency bump was introduced without a change to the Node requirements of QUnit 🤔
As our CI will try to install the latest qunit, it will try to install sane@4 now and fail:
error sane@4.0.1: The engine ""node"" is incompatible with this module. Expected version ""6.* || 8.* || >= 10.*"". Got ""4.9.1""

/cc @trentmwillis @stefanpenner",Turbo87,CONTRIBUTOR,2018-10-12T09:50:17Z,2018-12-29T20:17:47Z,True,5.0,2.9,4.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1322,qunit does not run all tests in a module,"Tell us about your runtime:

QUnit version: 2.7.0
What environment are you running QUnit in? (e.g., browser, Node): browser, tested on firefox nightly/stable and chromium
How are you running QUnit? (e.g., script, testem, Grunt): script/require.js


What are you trying to do?
Code that reproduces the problem:
See https://www.shlomifish.org/fc-solve--qunit-1/js-fc-solve/automated-tests/i.html - source is here - https://github.com/shlomif/fc-solve/tree/qunit-bug--module-hooks/fc-solve/site/wml (note the branch).


If you have any relevant configuration information, please include that here:
What did you expect to happen?
Run all tests.

What actually happened?

not all tests were run and I get something in the console.
If I comment out this line:
  		function logSuiteEnd(module) {

  			// Reset `module.hooks` to ensure that anything referenced in these hooks
  			// has been released to be garbage collected.
  			module.hooks = {}; // <- THIS ONE

  			emit(""suiteEnd"", module.suiteReport.end(true));
  			runLoggingCallbacks(""moduleDone"", {
  				name: module.name,
  				tests: module.tests,
  				failed: module.stats.bad,
  				passed: module.stats.all - module.stats.bad,
  				total: module.stats.all,
  				runtime: now() - module.stats.started
  			});
  		}

then the problem disappears.",shlomif,CONTRIBUTOR,2018-10-14T17:01:05Z,,False,0.0,,2.0,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False
1325,deepEqual goes into infinite recursion,"Tell us about your runtime:

QUnit version: 2.7.1
What environment are you running QUnit in? (e.g., browser, Node): Browser
How are you running QUnit? (e.g., script, testem, Grunt): Script

What are you trying to do?
Code that reproduces the problem:
https://jsfiddle.net/bzomqak8/11/
class Foo {
  constructor(a = 1) {
    this.a = a;
  }
}

Object.defineProperty(Foo.prototype, 'b', {
  enumerable: true,
  get() {
    return new Foo(this.a + 1);
  }
})

QUnit.test(""hello test"", function(assert) {
  assert.deepEqual(new Foo(), new Foo());
});
If you have any relevant configuration information, please include that here:
What did you expect to happen?
I expected QUnit to not compare computed properties.
What actually happened?
QUnit compares computed properties by using a for..in loop which (due to BFS) recurses infinitely without ever hitting a stack limit.
This is a minimal reproduction extracted from one of our Ember apps. In the actual app we use an Ember.Object and a computed property instead of the code above, but the effect is the same.",Turbo87,CONTRIBUTOR,2018-10-24T12:10:57Z,,False,1.0,,3.0,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1327,Deprecate (not)deepEqual and (not)propEqual,"Deep comparison is a bundle of sharp edges. We make opinionated choices along certain dimensions for which individual use cases might have reasonable opposite preferences, and don't even document them except with references in comments to issues that successfully argued for new behavior. Some examples:

Follow the prototype chain?

Allow exceptions (e.g., deepEqual( Object.create(null), {} ), deepEqual( Object.create(Object.create(null)), {} ), deepEqual( new Uint8Array([1]), new Uint16Array([1]) ))?


Include non-enumerable properties?
Check descriptor attributes (e.g., writable, configurable, value vs. get)?
Stop property iteration in certain cases (e.g., functions and DOM nodes)?
Relax comparison in certain cases (e.g., for methods added at instantiation like constructor(){ this.method = function(){…}; } or for troublesome getters or [I'm sure this is coming] Number vs. BigInt)?

As long as deep comparison is bundled with the core project, there will continue to be bespoke requests like #1325. I'd much rather see it pulled out and given a proper treatment as an addon via immediate deprecation followed by removal in the next major release. Perhaps a well-documented dead-simple remnant that serves the common use case of SameValue equality across the values of all (and only) enumerable properties of plain objects and arrays could be left behind.",gibson042,MEMBER,2018-10-28T21:26:00Z,,False,2.0,,4.0,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1328,Share 'before' hook test environment with child module,"Tell us about your runtime:

QUnit version: 2.6.2
What environment are you running QUnit in? (e.g., browser, Node): browser
How are you running QUnit? (e.g., script, testem, Grunt): ember-qunit

What are you trying to do?
module('parent', function(hooks) {
  hooks.before(function() {
    this.hello = 'world';
  });

  test('outer', function(assert) {
    assert.equal(this.hello, 'world'); // pass
  });

  module('child', function() {
    test('inner', function(assert) {
      assert.equal(this.hello, 'world'); // fails
    });
  });
});
What did you expect to happen?
Expecting nested child modules to share test environment with parent module.
What actually happened?
Nested child module have it's own test environment object.",ming-codes,NONE,2018-10-29T22:23:46Z,,False,1.0,,3.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1329,Add async support for QUnit.on() callback,"Add the same async promise support in other QUnit callbacks (eg: begin, done, moduleStart, etc..) to QUnit.on() as discussed here: #1307",step2yeung,CONTRIBUTOR,2018-11-01T16:56:17Z,,False,3.0,,2.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1330,Hide content in htmlreporter UI,"Question
Would it be possible to change the htmlreporter UI to show something like
| test output | current tests|
where test output is a queue and the current tests area is a static area where just the tests render into?
Reasoning
The experience right now is very jarring as tests progress or fail, the UI is shifting content around.",gabrielcsapo,CONTRIBUTOR,2018-11-05T18:59:12Z,,False,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
1331,Changing QUnit.config.testId has no effect.,"Tell us about your runtime:

QUnit version:2.7.0
What environment are you running QUnit in? (e.g., browser, Node): browser
How are you running QUnit? (e.g., script, testem, Grunt): ember-qunit


What are you trying to do?
I'm attempting to change the current test on the fly by clicking a button on the testing page.
Code that reproduces the problem:

const testId = `abc`; //where abc is a valid testId
window.QUnit.config.testId = [testId];
This has no effect.
The documentation says:
This property allows QUnit to run specific tests identified by the hashed version of their module name
and test name. You can specify one or multiple tests to run.

I have the same experience with all of the QUnit.config properties, so I'm probably just missing a step, but I have gone through the docs quite carefully and can't figure out what I would need to do to have this work like the docs describe.
What did you expect to happen?
I expect the specified test to run.

What actually happened?
No apparent change in behavior.
The only way i am able to have any effect on the tests that run is by directly changing the window.location, which causes a page refresh.",averydev,NONE,2018-11-29T06:05:04Z,,False,1.0,,2.0,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False
1333,Improve assert.throws() error in TAP reporter,"Test case
QUnit.module( ""Throws match"", function() {
	QUnit.test( ""bad"", function( assert ) {
		assert.throws( function() {
			throw new Error( ""Match me with a pattern"" );
		}, /incorrect pattern/, ""match error"" );
	} );
} );
What actually happened?
TAP version 13
not ok 1 global failure
  ---
  message: ""match error""
  severity: failed
  actual: {}
  expected: {}",Krinkle,MEMBER,2018-12-15T20:44:08Z,2019-01-03T20:07:02Z,True,0.0,2.9,1.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
1340,Defend against console mocks in TAP reporter,"Test case
QUnit.module( ""e2e/cli"", function() {
	QUnit.test( ""help"", function( assert ) {
		var cli = function () {};
		return cli( ""help"" ).then( ( data ) => {
			assert.strictEqual( data, true, 'data' );
		} );
	} );
} );
What actually happened?
qunit  test/
TAP version 13
ok 1 Writer > constructor()
ok 2 Writer > child()
ok 3 Writer > prefix()
ok 4 e2e/cli > record
ok 5 e2e/cli > compare
ok 7 e2e/cli > unknown command
ok 8 e2e/conductor > record() - clean state per run
ok 9 conductor > expandScenario()
ok 10 util/is > like() - single type
ok 11 util/is > like() - multi type
ok 12 util/is > like() - plain object
1..12
# pass 11
# skip 0
# todo 0
# fail 1

Notes
Note how there is nothing in the output other than fail 1. After I debugged the whole thing and realised that cli() didn't return a promise (Cannot read property 'then' of undefined""), I did notice there is a tiny little clue.
The clue is, number 6 is skipped in the output (it goes from 5 to 7). So in retrospect, I could've used that to find which test the problem is with, and maybe from there find out what the problem is.
Initially, though, I didn't even know where it was coming from.",Krinkle,MEMBER,2018-12-18T05:09:57Z,,False,4.0,,2.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False
1342,Reduce size of module dependency graph,"The qunit npm package has quite a lot of dependencies installed when used in another project.
The total number of packages installed according to (as of QUnit 2.8.0) is 143 packages.  (Not including dev dependencies, that are only installed for QUnit contributors.)

Graph visualisation: https://npm.anvaka.com/#/view/2d/qunit/2.8.0
Tree visualisation: https://snyk.io/test/npm/qunit/2.8.0?tab=dependencies

Assuming we won't be investing in a way to sandbox QUnit, I believe this is beyond what we can reasonably expect a developer to audit before installing. Keeping in mind that merely running npm install in a Git project using qunit, is enough for any of these packages turned bad to start scraping process.env, ~/.ssh, etc (e.g. through postinstall hooks, or at run-time).
I'm aiming with this task to take a serious look at what abstractions we need and are providing value, and which we might be better off not using a package for. For problems where the abstractions can be ""simple enough to obviously have no problems"", it might be better to simply inline it within our repo (with proper licensing information inline, if based on an existing package). In such case, I believe the theoretical value gained from future updates is non-existent or small enough to not outweigh the loss in understandability and security of QUnit overall. If in these areas we do find a rare bug one day, we can easily update it by hand.
Goal: Maximum 20, preferably less than 10.
QUnit prides simplicity, I believe. We've done well to uphold that in our API. I'm hoping we can reach simplicity in our dependency graph as well!
Relating reading:

https://jakearchibald.com/2018/when-packages-go-bad/
https://hackernoon.com/npm-package-permissions-an-idea-441a02902d9b

And also:

https://24ways.org/2018/its-beginning-to-look-a-lot-like-xssmas/
https://css-tricks.com/how-to-worry-about-npm-package-weight/
https://snyk.io/blog/malicious-code-found-in-npm-package-event-stream",Krinkle,MEMBER,2018-12-22T20:59:15Z,2018-12-28T22:00:19Z,True,2.0,2.9,2.0,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,True,False
1347,Require Windows tests passing on pull requests,"To avoid #1346 in the future, and to embrace Windows support, perhaps we should integrate AppVeyor for pull requests and require it to be passing like we do for Linux (on Travis CI).
Alternatively, we could look into adding Windows to the Travis CI build matrix, which has experimental support as of https://blog.travis-ci.com/2018-10-11-windows-early-release.
Thoughts?
/cc @platinumazure @trentmwillis",Krinkle,MEMBER,2018-12-28T06:34:07Z,2019-01-02T00:11:01Z,True,4.0,2.9,3.0,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False
1348,Require npmjs.org 2FA for package publishing,"Reading through RELEASE.md (Thanks @trentmwillis for writing this!), it noticed it says one has to temporarily disable the npmjs.org account protection from ""Authorization  and publishing"" to ""Authorization only"".
See https://docs.npmjs.com/requiring-2fa-for-package-publishing-and-settings-modification
This issue is to:

Determine which parts of the release process would need to change to avoid this step,
How we could improve them, and whether to do so,
(If we agree) Make the necessary changes,
(If we agree) Enable the ""Require 2FA to publish"" option at https://www.npmjs.com/package/qunit/access.",Krinkle,MEMBER,2018-12-29T03:17:04Z,,False,1.0,,2.0,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1350,Release process without protection bypass,"Reading through RELEASE.md (Thanks @trentmwillis for writing this!), it noticed it says one has to temporarily disable branch protection for the Build: Prepare @VERSION release  commit.
This issue is to evaluate which parts of the release process would need to change to avoid this step, and whether would want to change it.",Krinkle,MEMBER,2018-12-29T05:50:51Z,,False,3.0,,2.0,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1351,Document URL parameters,"Assuming the QUnit URL parameters are to be treated as part of the public interface (rather than just a mechanism for conveying GUI interactions to subsequent loads), we should document them:

filter → QUnit.config.filter
seed → QUnit.config.seed (boolean true replaced with a random string)
module (QUnit.config relation to be determined by /issues/956)
testId → QUnit.config.testId (splitting on commas until /issues/954 is resolved)
moduleId → QUnit.config.moduleId (splitting on commas until /issues/954 is resolved)
hidepassed → QUnit.config.hidepassed (HTML reporter boolean option)
noglobals → QUnit.config.noglobals
notrycatch → QUnit.config.notrycatch
user-defined by QUnit.urlConfig → QUnit.config[id]",gibson042,MEMBER,2015-12-15T16:27:02Z,,False,4.0,,4.0,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False
1352,Document deprecated API,"List all the deprecated parts of the API.
Ref #918 (comment)",leobalter,MEMBER,2016-02-01T13:43:33Z,,False,0.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1353,"Add ""version added"" annotations to API documentation","Similar to http://api.jquery.com/on/

version added: 1.7

Pages like http://api.qunitjs.com/async/ should mention e.g. ""version added: 1.16"".
Would help a lot. Especially when working with frameworks that may abstract how or which QUnit is being loaded.",Krinkle,MEMBER,2015-02-10T00:28:04Z,,False,2.0,,3.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1354,Document good usage of assert.expect,"Based on the discussion in #666, there are some anti-patterns around assert.expect. We should document how to use it properly, along with the anti-patterns to avoid.
Assigning this to @JamesMGreene since he had some examples for that. Along with updating http://api.qunitjs.com/expect/ we can also check other pages, like the cookbook.",jzaefferer,MEMBER,2014-09-24T16:00:53Z,,False,2.0,,3.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1355,Split the documentation on 1.x.x and 2.x.x,"As we are in the way to 2.x.x, we should think about a solution to keep the 1.x.x documentation.
Many things in the API are changing and people would still need to have the doc support for the 1.x.x version.
One vague idea is to replace documentation content to Markdown files so we can get just point to github tags. That would affect the build process, how to document, etc, but I consider it's worth a discussion.
Other is to set the build process generate the content based on the git version and release it in a subfolder like: http://api.qunitjs.com/1.15.0/.... The problem here is to have cross links pointing to the respective entry and version.",leobalter,MEMBER,2014-09-22T15:24:35Z,2018-12-29T06:08:35Z,True,3.0,,3.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False
1356,Document failure of assertions ran after done(),"From qunitjs/qunitjs.com#84 (comment):

We need to add a clear note about the auto-failing behavior of assertions that occur after the final done resolution within a test phase... at least to the API docs if not also to the Cookbook.

Should include this in the docs for assert.async().",jzaefferer,MEMBER,2014-11-06T15:06:14Z,,False,1.0,,2.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1357,Arrow functions as test/module hook callbacks,"The API documentation for QUnit.module mentions that tests are run with a test environment set as this within the test. If people are to take advantage of this functionality, they need to remember to use function expressions or function declaration references; if they don't, the mechanics of arrow functions implies that the outer this context is used.
Is this worth noting somewhere? Would a PR be accepted for adding such a note?",platinumazure,CONTRIBUTOR,2016-08-23T21:38:08Z,,False,2.0,,3.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1358,Document callback ordering more explicitly.,"The ordering of callbacks is not very obvious in the API docs currently. As I read through https://api.qunitjs.com/callbacks/, I am left with many questions. I poked around the test suite in jquery/qunitjs and didn't find a test that listed all callbacks in order in an array passed to a assert.deepEquals(actualHooksFired, expectedHookOrder) call to help me (here is an example in Ember that shows the explicit hook order for component lifecycle).
A few examples of the questions that I had after reading through the docs of QUnit.testStart (just to pick a single hook for demonstration purposes):
The description of QUnit.testStart() says this:

Description: Register a callback to fire whenever a test begins.

Outstanding questions are:

Is a callback registered with QUnit.testStart called before or after moduleStart?
Is a callback registered with QUnit.testStart called before or after any individual beforeEach in the tests direct module parent?
Is a callback registered with QUnit.testStart called before or after the the before callback in the tests direct module parent?
Is the this context set to the same shared this context that will be used in the tests beforeEach / test?


I would be more than happy to try and help flesh these out, but I'd like to:

 Confirm the explicit ordering is under test
 Verify that this is something that we want to have documented on the main site",rwjblue,CONTRIBUTOR,2016-09-16T01:43:28Z,,False,1.0,,3.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1359,Make CLI tests passing on Windows,"As part of #1347 I tried to consolidate the main tests and CLI tests under plainly npm test, but ran into the problem that the CLI tests don't currently pass on Windows.
For a while I tried to make them work, thinking it was an issue with Travis (because AppVeyor is green). Only to realise they would also fail on AppVeyor. It's just that we don't run them there.
So.. filing this as a separate issue to resolve later.
I ran into two issues:

Running an executable from a sub directory doesn't work.

The bin/qunit test/cli/*.js part of grunt && bin/qunit test/cli/*.js isn't working on Windows. It fails as follows:
'bin' is not recognized as an internal or external command, operable program or batch file.

This is presumably due to the use of a forward-slash. Some sources on the internet suggested that wrapping them in quotes and/or using ./ would make it work, but that didn't seem to do the trick.
What did work is changing the invocation to node bin/qunit test/cli/*.js.

The child processes created by the CLI tests fail.

  expected: undefined
  stack: Error: Command failed: C:\windows\system32\cmd.exe /s /c ""../../../bin/qunit --reporter npm-reporter""
'..' is not recognized as an internal or external command,
operable program or batch file.
    at Promise.all.then.arr (C:\projects\qunit\node_modules\execa\index.js:236:11)
    at process._tickCallback (internal/process/next_tick.js:68:7)
  ...

This is presumably the same issue in essence. ../../../ doesn't work in that way on Windows. This might be an easy fix given that we invoke it from within Node.js, so we could easily vary the logic by process.platform and/or utilise something like path.join() to get the slashes right.",Krinkle,MEMBER,2018-12-30T19:32:37Z,,False,1.0,,2.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1364,"Figure out autodetect for ""grunt qunit"" test urls","What are you trying to do?
Running tests via npm test, or making a release via qunitjs/jquery-release.
What actually happened?
Running ""connect:nolivereload"" (connect) task
Fatal error: Port 8000 is already in use by another process.
Grunt command failed
Aborting.

Other notes
In b7df499, I added an --connect-port option to Gruntfile, but this only works when using the workflow of installing grunt-cli globally first and/or invoking it via npx.
It can be passed to the command within npm test as npm test -- --connect-port=8123, except that only works for the last command if there are multiple (which is no longer the grunt command as of 681cee7).
This can be worked around by not using npm test during local development, but that's not an option for release.js.
Depending on how difficult it will be to use autodetect, a short-term workaround could be to make this an ENV option instead, or to find a way that doesn't involve a manually started connect server.",Krinkle,MEMBER,2019-01-06T22:42:10Z,,False,0.0,,1.0,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1367,Breakage in 2.9.0:  Error: Cannot find module '../src/cli/run',"Tell us about your runtime:

QUnit version: 2.9.0
What environment are you running QUnit in? (e.g., browser, Node): Node (10.11.0)
How are you running QUnit? (e.g., script, testem, Grunt): ./node_modules/.bin/qunit test.js

What are you trying to do?
Run tests that worked under 2.8.0.
Code that reproduces the problem: an empty test.js
What did you expect to happen?
Global failure, no tests to run.
What actually happened?
Error: Cannot find module '../src/cli/run'
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:581:15)
    at Function.Module._load (internal/modules/cjs/loader.js:507:25)
    at Module.require (internal/modules/cjs/loader.js:637:17)
    at require (internal/modules/cjs/helpers.js:20:18)
    at Object.<anonymous> (/home/jacekkopecky/wscwk2/node_modules/qunit/bin/qunit.js:6:13)
    at Module._compile (internal/modules/cjs/loader.js:689:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
    at Module.load (internal/modules/cjs/loader.js:599:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
    at Function.Module._load (internal/modules/cjs/loader.js:530:3)",jacekkopecky,NONE,2019-01-07T10:27:44Z,2019-01-07T16:47:01Z,True,8.0,2.9,4.0,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False
1371,"Parent directories "".."" in file path","Tell us about your runtime:

QUnit version: 2.9.1
What environment are you running QUnit in? (e.g., browser, Node): Node
How are you running QUnit? (e.g., script, testem, Grunt): Gradle / manual

What are you trying to do?
Let QUnit run a JavaScript test compiled by Kotlin.
The test is for a specific sub-project.
The output file is placed outside the sub project directory itself (see tree).
The command was (called from the subProject1 directory, like Gradle calls QUnit):
node ../node_modules/qunit/bin/qunit.js ../out/subProject1-test.js
The project is structured like:
project
|-- gradle
|-- lib
|-- node_modules
|-- out
|-- subProject1
`-- subProject2

What did you expect to happen?
QUnit running the test and giving a report like running this command from the project root:
node node_modules/qunit/bin/qunit.js out/subProject1-test.js
What actually happened?
The output of QUnit was:
No files were found matching: ../out/subProject1-test.js

It seems that QUnit does not interpret the "".."" as ""parent directory"" while searching for the given file(s).",Zocker1999NET,NONE,2019-01-23T22:02:40Z,,False,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True
1372,`qunit --require` does not find local module if qunit is globally installed,"Tell us about your runtime:

QUnit version: 2.9.1
What environment are you running QUnit in? (e.g., browser, Node): Node v11.7.0
How are you running QUnit? (e.g., script, testem, Grunt): CLI

What are you trying to do?
Pull request #1271 added the --require option, but it does not seem to work with esm, as @jdalton hoped.
I wrote a test of using esm with qunit --require. Perhaps I am not doing it correctly. If you can help me figure this out, I would happily contribute to qunitjs/qunitjs.com#144.
npm install to get esm package.
npm install -g qunit to get qunit globally.
qunit --require esm test.js to run the test.
What actually happened?
TAP version 13
not ok 1 test.js > Failed to load the test file with error:
/Users/jeremiah/Projects/esm-qunit-experiment/test.js:1
(function (exports, require, module, __filename, __dirname) { import {bar} from './foo.js';
                                                                     ^

SyntaxError: Unexpected token {
    at new Script (vm.js:84:7)
    at createScript (vm.js:264:10)
    at Object.runInThisContext (vm.js:312:10)
    at Module._compile (internal/modules/cjs/loader.js:684:28)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)
    at Module.load (internal/modules/cjs/loader.js:620:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)
    at Function.Module._load (internal/modules/cjs/loader.js:552:3)
    at Module.require (internal/modules/cjs/loader.js:657:17)
    at require (internal/modules/cjs/helpers.js:22:18)
  ---
  message: ""should be able to load file""
  severity: failed
  actual: false
  expected: true
  stack:     at Object.<anonymous> (/usr/local/lib/node_modules/qunit/src/cli/run.js:60:13)
  ...
1..1
# pass 0
# skip 0
# todo 0
# fail 1

What did you expect to happen?
TAP version 13
ok 1 Hinkle finkle dinkle doo
1..1
# pass 1
# skip 0
# todo 0
# fail 0",jeremiahlee,NONE,2019-01-24T13:58:04Z,,False,8.0,,5.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False
1374,testStart callback does not wait on returned Promise.,"Tell us about your runtime:

QUnit version: 2.7.1
What environment are you running QUnit in? (e.g., browser, Node): node v10.12.0
How are you running QUnit? (e.g., script, testem, Grunt): using the qunit script (eg. ./node_modules/qunit/bin/qunit)

What are you trying to do?
Code that reproduces the problem:
""use strict"";

QUnit.testStart (() => {
   console.log (""waiting"");
   return new Promise ((resolve, reject) => setTimeout (resolve, 5000))
      .then (() => console.log (""proceeding""));
});
QUnit.testDone (() => console.log (""done""));

QUnit.test (""test"", (assert) => {
   console.log (""inside the test"");
   assert.equal (2+2, 4);
});
Command line:
./node_modules/qunit/bin/qunit test.js

What did you expect to happen?
According to the documentation, QUnit should wait for the promise before proceeding, so I expected to see the traces:
waiting
proceeding
inside the test
done

in that order with a 5s delay between waiting and proceeding.
What actually happened?
The test proceeded immediately without waiting for the promise. I got the traces:
waiting
inside the test
done
proceeding

with the expected 5s delay before the proceeding trace, but by that time the test has already run.",jeberger,NONE,2019-02-13T08:41:11Z,2019-02-14T08:57:36Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1375,Semaphore imbalance when returned promise resolves when test timed out.,"Tell us about your runtime:

QUnit version:2.9.1
What environment are you running QUnit in? (e.g., browser, Node): Browser & Node
How are you running QUnit? (e.g., script, testem, Grunt): qunit Node CLI / testem


What are you trying to do?
A test returning a promise (or an async) that runs longer than the allowed timeout period, causes an internal test semaphore imbalance if the returned promise ever settles.
Code that reproduces the problem:

QUnit.module('group of tests', function(hooks) {
  QUnit.test('one', function(assert) {
	assert.timeout(10);

    return new Promise(resolve => setTimeout(resolve, 20));
  });

  QUnit.test('two', function(assert) {
   	return new Promise(resolve => setTimeout(resolve, 20))
      .then(() => {
        assert.ok(true, 'all is well');
      });
  });
});
CodePen Demo Here
If you have any relevant configuration information, please include that here:
What did you expect to happen?
Test one should fail (due to timeout), and test two should pass.
What actually happened?
Test one fails properly (due to timeout), however test two also fails with the following message:
Tried to restart test while already started (test's semaphore was 0 already)",rwjblue,CONTRIBUTOR,2019-02-20T14:12:41Z,2019-02-21T04:52:18Z,True,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1377,Core: hooks invoked after a test is considered torn down can cause error,"Tell us about your runtime:

QUnit version: 2.9.1
What environment are you running QUnit in? (e.g., browser, Node):* Browser & Node
How are you running QUnit? (e.g., script, testem, Grunt): * qunit Node CLI / testem

What are you trying to do?
A test whose done hooks are attempted to be invoked after the test is considered torn down can produce an error when trying to access those hooks.
Code that reproduces the problem:

QUnit.test( ""hello test"", function( assert ) {
  let done = assert.async()
  assert.ok( 1 == ""1"", ""Passed!"" );
  setTimeout(done,10);
  return Promise.reject();
});
Will result in:
Uncaught Error: assert.async callback called after test finished.
    at done (qunit-2.9.1.js:3773)
qunit-2.9.1.js:3107 Uncaught TypeError: Cannot read property 'length' of undefined
    at processHooks (qunit-2.9.1.js:3107)
    at Test.hooks (qunit-2.9.1.js:3116)
    at runTest (qunit-2.9.1.js:3254)
    at advanceTestQueue (qunit-2.9.1.js:2646)
    at Object.advance (qunit-2.9.1.js:2597)
    at Test.queue (qunit-2.9.1.js:3276)
    at test (qunit-2.9.1.js:3516)
    at Object.onError (qunit-2.9.1.js:4217)
    at window$1.onerror (qunit-2.9.1.js:5499)

Codepen: https://codepen.io/rwjblue/pen/KJLQEJ
If you have any relevant configuration information, please include that here:
What did you expect to happen?
Trying to access hooks on an already torn down test should not result in an error.
What actually happened?
An error was thrown when trying to access hooks on a module. At this point, hooks has already been torn down.",scalvert,CONTRIBUTOR,2019-02-22T00:21:09Z,,False,3.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1383,CLI should not exit with process.exit,"Tell us about your runtime:

QUnit version: latest
What environment are you running QUnit in? (e.g., browser, Node): node
How are you running QUnit? (e.g., script, testem, Grunt): qunit node cli

What are you trying to do?
Code that reproduces the problem:
Test leaks timeout that would normally prevent node from exiting.
If you have any relevant configuration information, please include that here:
What did you expect to happen?
QUnit shouldn't force exit.
What actually happened?
QUnit forces exit, hiding leaks.",krisselden,NONE,2019-03-13T20:53:04Z,,False,1.0,,3.0,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False
1386,Tests involving window scrolling fails in iOS due to iframe not being scrollable,"Tell us about your runtime:

QUnit version:
What environment are you running QUnit in? (e.g., browser, Node):
How are you running QUnit? (e.g., script, testem, Grunt):


What are you trying to do?
Code that reproduces the problem:


If you have any relevant configuration information, please include that here:
What did you expect to happen?

What actually happened?",pudupa,NONE,2019-04-01T21:18:33Z,2019-05-07T23:05:35Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1387,Elect / Nominate representative(s) to the OpenJS Foundation CPC ,"Context
As part of the new OpenJS Foundation's bylaws, the Cross Project Council (CPC) has been chartered to serve as the primary governing body for programs and regular support of Foundation projects. For example, it will be responsible for things like infrastructure, travel assistance, CoC support, accepting new projects into the foundation, and mentorship programs to name a few. It will also be responsible for electing board representative(s) to the OpenJS Foundation board of directors.
Any interested person from our project communities can attend CPC meetings and volunteer to participate in tasks. For most programs, the CPC is expected to operate on the consensus of OpenJS Foundation project members. Issues that require a vote - namely the election of Board representatives and accepting a new project - will be memorialized by a voting CPC membership comprised of up to 2 representatives from Impact level projects and 2 representatives from Growth and At-Large stages.
If you'd like more info/context on the governance of the OpenJS Foundation, please let me know or follow this repo. The main point I hope you take away is that the foundation is to be run by and for the projects, and to do that we need participants from the project community.
Request
As an At Large stage project, QUnit is encouraged to send representatives to participate in CPC meetings, to advise on programs and support that will be helpful to it, and to nominate someone from the project community to serve in a voting capacity.
We anticipate having our first 'official' CPC meeting on May 30 or 31 at the Collaborator Summit in Berlin (sidebar, you should come!). In the interim, we would love for project members to participate in the Bootstrap CPC meetings which are currently held on Mondays (watch this repo for meeting details).
If this is not the correct forum to raise this, please let me know and I will close the issue and post it in the preferred channel. Note that I'm posting essentially the same message to all OpenJS Foundation project repos, because I want to get the word out and make sure we all have the same information.
your pal,
Jory",jorydotcom,NONE,2019-04-07T19:59:30Z,,False,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1389,assert.throws fails when expected is an arrow function: 'prototype' property of expected is not an object,"Tell us about your runtime:

QUnit version: 2.9.2 & 2.9.3-pre
What environment are you running QUnit in? (e.g., browser, Node): browser
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:66.0) Gecko/20100101 Firefox/66.0
How are you running QUnit? (e.g., script, testem, Grunt): script


What are you trying to do?
Code that reproduces the problem:

run in jsbin
function f() {
  throw new Error('err');
}
function errCheck(e) {
  return e.message == 'err';
}
QUnit.test('foo', (t) => {
  t.throws(f, errCheck); // this assert is passed
  t.throws(f, (e) => e.message == 'err'); // this assert fails
})
What did you expect to happen?
test passed

What actually happened?
1st assert passed,
but 2nd assert fails:
'prototype' property of expected is not an object",ohze,NONE,2019-04-17T18:56:59Z,,False,2.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1390,Provide a way to reset the test server,"Tell us about your runtime:

QUnit version: 2.6
What environment are you running QUnit in? (e.g., browser, Node): browser
How are you running QUnit? (e.g., script, testem, Grunt): testem, via ember test


What are you trying to do?

We have a large test suite that we don't expect to run entirely in a single browser as it'd take ages to complete (and maybe even crash before it's finished). By default QUnit loads all tests and starts to run them, interacting with the dropdown to filter specific modules can get tricky as tests run in the background.
We've worked around this by adding a default filter that doesn't match any tests as the runner is started. This gets us to a state of ""all tests are loaded and nothing is running or filtered to run"".
If you have any relevant configuration information, please include that here:
What did you expect to happen?

The abort button gets us the first part of this state but I haven't been able to find a way to get the latter part (nothing is filtered to run).
What actually happened?
I've added a button to our test page that changes the URL as a workaround but this seemed like something that could be widely useful for others if there was first-class support.",sduquej,NONE,2019-04-19T10:07:32Z,,False,1.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1392,Add support for Google Apps Script,"It would be great, if QUnit could be used as testing framework for Google Apps Scripts.
Here is an experimental fork of QUnit that already does this (and works for me):
https://github.com/simula-innovation/qunit/tree/gas/gas
The problem with this fork is that it is not maintained for several years and missing new features of QUnit.
Here is some information about how development with Google Apps Script is working:
https://developers.google.com/apps-script/guides/projects
https://developers.google.com/apps-script/guides/clasp",ahochsteger,NONE,2019-05-01T10:07:06Z,,False,4.0,,2.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
1393,Community Invitation to the OpenJS Collaborator Summit + Info,"Hi all! In an effort to make sure we're fully getting the word out to OpenJS Foundation project communities about the collaborator summit, I'm posting the following message on main or admin repos:
This year, the Node Collaborator summit is opening up to include and welcome all former JS Foundation projects. The Collaborator summit is a space where projects and working groups within projects have the dedicated time and space to get together and get work done. We will have project-specific meetings, cross-project meetings on issues like security and standards, and of course meetings to discuss new programs and patterns for the new CPC.
The event will be in Berlin on May 30-31st at the Courtyard Marriott City Center. It is free to register with the password 'collabsummit.' We are also inviting all projects/attendees to suggest meetings and sessions via our CFP - these are not conference talks, but rather collaborative conversations or meetings you would like to hold with your peers. We ask that you register in advance so that we can allocate meeting room space and resources, and so that we can publish where conversations are scheduled in the day or two leading up to the event.
Links:

Session Proposals
Registration (password is collabsummit)
Information on how to apply for the Travel Fund
Summit Planning Repo",jorydotcom,NONE,2019-05-01T14:55:50Z,2019-06-14T00:05:39Z,True,2.0,,3.0,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False
1394,Display progress in test runner during test suite execution,It would be an excellent enhancement to add indication of progress during test execution within the test runner application. The first two indicators that come to mind are number of tests completed and time elapsed (e.g. 40/230 Tests complete after 1890 milliseconds.).,ghaagsma,CONTRIBUTOR,2019-05-13T22:53:27Z,2019-06-18T17:42:10Z,True,1.0,,2.0,False,False,False,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False
1396,"Consider renaming ""Main assertions"" page","Almost every time I navigate to https://api.qunitjs.com/ I find myself clicking ""Main assertions"" when looking up one of the assert methods, like propEqual or some such.
Then after a brief moment of confusing and a failed attempt at expanding the page further, I realise I should have clicked ""Assertions"" instead.
I don't have any good ideas off the top of my head, but we may want to consider renaming this page.",Krinkle,MEMBER,2019-06-10T15:33:13Z,,False,0.0,,1.0,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,False
1399,"Can the test file name be passed in the ""suitestart"" and ""suiteend"" callback ?","Hi,
I have a use case where I want to print the name of the testfile before and after the test run.
For eg: if I have two test files
testFIle1.js
QUnit.test(""point1"", function(assert){
assert.ok(true);
});
testFile2.js
QUnit.test(""point1"", function(assert) {
assert.ok(true);
});
when I run qunit.js --reporter=myreporter test*.js ...I want the following printed in the console.
testStart=>filename: testFile1.js
progress: point1 pass
testEnd=>filename: testFile1.js result: pass
testStart=>filename: testFile2.js
progress: point1 pass
testEnd=>filename: testFile2.js result: pass",muthu90ec,NONE,2019-06-20T23:29:44Z,,False,0.0,,1.0,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False
